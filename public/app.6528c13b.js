// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (
  modules,
  entry,
  mainEntry,
  parcelRequireName,
  externals,
  distDir,
  publicUrl,
  devServer
) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var importMap = previousRequire.i || {};
  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        if (externals[name]) {
          return externals[name];
        }
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        globalObject
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      if (res === false) {
        return {};
      }
      // Synthesize a module to follow re-exports.
      if (Array.isArray(res)) {
        var m = {__esModule: true};
        res.forEach(function (v) {
          var key = v[0];
          var id = v[1];
          var exp = v[2] || v[0];
          var x = newRequire(id);
          if (key === '*') {
            Object.keys(x).forEach(function (key) {
              if (
                key === 'default' ||
                key === '__esModule' ||
                Object.prototype.hasOwnProperty.call(m, key)
              ) {
                return;
              }

              Object.defineProperty(m, key, {
                enumerable: true,
                get: function () {
                  return x[key];
                },
              });
            });
          } else if (exp === '*') {
            Object.defineProperty(m, key, {
              enumerable: true,
              value: x,
            });
          } else {
            Object.defineProperty(m, key, {
              enumerable: true,
              get: function () {
                if (exp === 'default') {
                  return x.__esModule ? x.default : x;
                }
                return x[exp];
              },
            });
          }
        });
        return m;
      }
      return newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.require = nodeRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.distDir = distDir;
  newRequire.publicUrl = publicUrl;
  newRequire.devServer = devServer;
  newRequire.i = importMap;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  // Only insert newRequire.load when it is actually used.
  // The code in this file is linted against ES5, so dynamic import is not allowed.
  // INSERT_LOAD_HERE

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });
    }
  }
})({"6DHTQ":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SERVER_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "439701173a9199ea";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "62088a896528c13b";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_SERVER_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , disposedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ , bundleNotFound = false;
function getHostname() {
    return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);
}
// eslint-disable-next-line no-redeclare
let WebSocket = globalThis.WebSocket;
if (!WebSocket && typeof module.bundle.root === 'function') try {
    // eslint-disable-next-line no-global-assign
    WebSocket = module.bundle.root('ws');
} catch  {
// ignore.
}
var hostname = getHostname();
var port = getPort();
var protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && ![
    'localhost',
    '127.0.0.1',
    '0.0.0.0'
].includes(hostname) ? 'wss' : 'ws';
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if (!parent || !parent.isParcelRequire) {
    // Web extension context
    var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes('test.js');
    }
    var ws;
    if (HMR_USE_SSE) ws = new EventSource('/__parcel_hmr');
    else try {
        // If we're running in the dev server's node runner, listen for messages on the parent port.
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) {
            parentPort.on('message', async (message)=>{
                try {
                    await handleMessage(message);
                    parentPort.postMessage('updated');
                } catch  {
                    parentPort.postMessage('restart');
                }
            });
            // After the bundle has finished running, notify the dev server that the HMR update is complete.
            queueMicrotask(()=>parentPort.postMessage('ready'));
        }
    } catch  {
        if (typeof WebSocket !== 'undefined') try {
            ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
        } catch (err) {
            // Ignore cloudflare workers error.
            if (err.message && !err.message.includes('Disallowed operation called within global scope')) console.error(err.message);
        }
    }
    if (ws) {
        // $FlowFixMe
        ws.onmessage = async function(event /*: {data: string, ...} */ ) {
            var data /*: HMRMessage */  = JSON.parse(event.data);
            await handleMessage(data);
        };
        if (ws instanceof WebSocket) {
            ws.onerror = function(e) {
                if (e.message) console.error(e.message);
            };
            ws.onclose = function() {
                console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
            };
        }
    }
}
async function handleMessage(data /*: HMRMessage */ ) {
    checkedAssets = {} /*: {|[string]: boolean|} */ ;
    disposedAssets = {} /*: {|[string]: boolean|} */ ;
    assetsToAccept = [];
    assetsToDispose = [];
    bundleNotFound = false;
    if (data.type === 'reload') fullReload();
    else if (data.type === 'update') {
        // Remove error overlay if there is one
        if (typeof document !== 'undefined') removeErrorOverlay();
        let assets = data.assets;
        // Handle HMR Update
        let handled = assets.every((asset)=>{
            return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        });
        // Dispatch a custom event in case a bundle was not found. This might mean
        // an asset on the server changed and we should reload the page. This event
        // gives the client an opportunity to refresh without losing state
        // (e.g. via React Server Components). If e.preventDefault() is not called,
        // we will trigger a full page reload.
        if (handled && bundleNotFound && assets.some((a)=>a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {
            cancelable: true
        }));
        if (handled) {
            console.clear();
            // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
            if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') window.dispatchEvent(new CustomEvent('parcelhmraccept'));
            await hmrApplyUpdates(assets);
            hmrDisposeQueue();
            // Run accept callbacks. This will also re-execute other disposed assets in topological order.
            let processedAssets = {};
            for(let i = 0; i < assetsToAccept.length; i++){
                let id = assetsToAccept[i][1];
                if (!processedAssets[id]) {
                    hmrAccept(assetsToAccept[i][0], id);
                    processedAssets[id] = true;
                }
            }
        } else fullReload();
    }
    if (data.type === 'error') {
        // Log parcel errors to console
        for (let ansiDiagnostic of data.diagnostics.ansi){
            let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
            console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
        }
        if (typeof document !== 'undefined') {
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, '') : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + '</div>').join('')}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ''}
      </div>
    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if (typeof location !== 'undefined' && 'reload' in location) location.reload();
    else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
    else try {
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) parentPort.postMessage('restart');
    } catch (err) {
        console.error("[parcel] \u26A0\uFE0F An HMR update was not accepted. Please restart the process.");
    }
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute('href');
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    href.split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout || typeof document === 'undefined') return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === 'js') {
        if (typeof document !== 'undefined') {
            let script = document.createElement('script');
            script.src = asset.url + '?t=' + Date.now();
            if (asset.outputFormat === 'esmodule') script.type = 'module';
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === 'function') {
            // Worker scripts
            if (asset.outputFormat === 'esmodule') return import(asset.url + '?t=' + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + '?t=' + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        }
        // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.
        // This is required in case modules are duplicated. We need to ensure all instances have the updated code.
        if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    checkedAssets = {};
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else if (a !== null) {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) {
            bundleNotFound = true;
            return true;
        }
        return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return null;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    if (!cached) return true;
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
    return false;
}
function hmrDisposeQueue() {
    // Dispose all old assets.
    for(let i = 0; i < assetsToDispose.length; i++){
        let id = assetsToDispose[i][1];
        if (!disposedAssets[id]) {
            hmrDispose(assetsToDispose[i][0], id);
            disposedAssets[id] = true;
        }
    }
    assetsToDispose = [];
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        let assetsToAlsoAccept = [];
        cached.hot._acceptCallbacks.forEach(function(cb) {
            let additionalAssets = cb(function() {
                return getParents(module.bundle.root, id);
            });
            if (Array.isArray(additionalAssets) && additionalAssets.length) assetsToAlsoAccept.push(...additionalAssets);
        });
        if (assetsToAlsoAccept.length) {
            let handled = assetsToAlsoAccept.every(function(a) {
                return hmrAcceptCheck(a[0], a[1]);
            });
            if (!handled) return fullReload();
            hmrDisposeQueue();
        }
    }
}

},{}],"6kb64":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _redom = require("redom");
var _app = require("./App");
var _appDefault = parcelHelpers.interopDefault(_app);
const contentElement = document.getElementById('content-wrapper');
const app = new (0, _appDefault.default)();
(0, _redom.mount)(contentElement, app);

},{"redom":"9CzRX","./App":"4giRf","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9CzRX":[function(require,module,exports,__globalThis) {
(function(global, factory) {
    factory(exports);
})(this, function(exports1) {
    'use strict';
    function _arrayLikeToArray(r, a) {
        (null == a || a > r.length) && (a = r.length);
        for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];
        return n;
    }
    function _classCallCheck(a, n) {
        if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
    }
    function _construct(t, e, r) {
        if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
        var o = [
            null
        ];
        o.push.apply(o, e);
        var p = new (t.bind.apply(t, o))();
        return p;
    }
    function _defineProperties(e, r) {
        for(var t = 0; t < r.length; t++){
            var o = r[t];
            o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
        }
    }
    function _createClass(e, r, t) {
        return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", {
            writable: false
        }), e;
    }
    function _createForOfIteratorHelper(r, e) {
        var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
        if (!t) {
            if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
                t && (r = t);
                var n = 0, F = function() {};
                return {
                    s: F,
                    n: function() {
                        return n >= r.length ? {
                            done: true
                        } : {
                            done: false,
                            value: r[n++]
                        };
                    },
                    e: function(r) {
                        throw r;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o, a = true, u = false;
        return {
            s: function() {
                t = t.call(r);
            },
            n: function() {
                var r = t.next();
                return a = r.done, r;
            },
            e: function(r) {
                u = true, o = r;
            },
            f: function() {
                try {
                    a || null == t.return || t.return();
                } finally{
                    if (u) throw o;
                }
            }
        };
    }
    function _isNativeReflectConstruct() {
        try {
            var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        } catch (t) {}
        return (_isNativeReflectConstruct = function() {
            return !!t;
        })();
    }
    function _toPrimitive(t, r) {
        if ("object" != typeof t || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (undefined !== e) {
            var i = e.call(t, r);
            if ("object" != typeof i) return i;
            throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return String(t);
    }
    function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == typeof i ? i : i + "";
    }
    function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
            return typeof o;
        } : function(o) {
            return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
        }, _typeof(o);
    }
    function _unsupportedIterableToArray(r, a) {
        if (r) {
            if ("string" == typeof r) return _arrayLikeToArray(r, a);
            var t = ({}).toString.call(r).slice(8, -1);
            return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : undefined;
        }
    }
    function createElement(query, ns) {
        var _parse = parse(query), tag = _parse.tag, id = _parse.id, className = _parse.className;
        var element = ns ? document.createElementNS(ns, tag) : document.createElement(tag);
        if (id) element.id = id;
        if (className) {
            if (ns) element.setAttribute("class", className);
            else element.className = className;
        }
        return element;
    }
    function parse(query) {
        var chunks = query.split(/([.#])/);
        var className = "";
        var id = "";
        for(var i = 1; i < chunks.length; i += 2)switch(chunks[i]){
            case ".":
                className += " ".concat(chunks[i + 1]);
                break;
            case "#":
                id = chunks[i + 1];
        }
        return {
            className: className.trim(),
            tag: chunks[0] || "div",
            id: id
        };
    }
    function html(query) {
        var element;
        var type = _typeof(query);
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        if (type === "string") element = createElement(query);
        else if (type === "function") {
            var Query = query;
            element = _construct(Query, args);
        } else throw new Error("At least one argument required");
        parseArgumentsInternal(getEl(element), args, true);
        return element;
    }
    var el = html;
    var h = html;
    html.extend = function extendHtml() {
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return html.bind.apply(html, [
            this
        ].concat(args));
    };
    function unmount(parent, _child) {
        var child = _child;
        var parentEl = getEl(parent);
        var childEl = getEl(child);
        if (child === childEl && childEl.__redom_view) // try to look up the view if not provided
        child = childEl.__redom_view;
        if (childEl.parentNode) {
            doUnmount(child, childEl, parentEl);
            parentEl.removeChild(childEl);
        }
        return child;
    }
    function doUnmount(child, childEl, parentEl) {
        var hooks = childEl.__redom_lifecycle;
        if (hooksAreEmpty(hooks)) {
            childEl.__redom_lifecycle = {};
            return;
        }
        var traverse = parentEl;
        if (childEl.__redom_mounted) trigger(childEl, "onunmount");
        while(traverse){
            var parentHooks = traverse.__redom_lifecycle || {};
            for(var hook in hooks)if (parentHooks[hook]) parentHooks[hook] -= hooks[hook];
            if (hooksAreEmpty(parentHooks)) traverse.__redom_lifecycle = null;
            traverse = traverse.parentNode;
        }
    }
    function hooksAreEmpty(hooks) {
        if (hooks == null) return true;
        for(var key in hooks){
            if (hooks[key]) return false;
        }
        return true;
    }
    var hookNames = [
        "onmount",
        "onremount",
        "onunmount"
    ];
    var shadowRootAvailable = typeof window !== "undefined" && "ShadowRoot" in window;
    function mount(parent, _child, before, replace) {
        var child = _child;
        var parentEl = getEl(parent);
        var childEl = getEl(child);
        if (child === childEl && childEl.__redom_view) // try to look up the view if not provided
        child = childEl.__redom_view;
        if (child !== childEl) childEl.__redom_view = child;
        var wasMounted = childEl.__redom_mounted;
        var oldParent = childEl.parentNode;
        if (wasMounted && oldParent !== parentEl) doUnmount(child, childEl, oldParent);
        if (before != null) {
            if (replace) {
                var beforeEl = getEl(before);
                if (beforeEl.__redom_mounted) trigger(beforeEl, "onunmount");
                parentEl.replaceChild(childEl, beforeEl);
            } else parentEl.insertBefore(childEl, getEl(before));
        } else parentEl.appendChild(childEl);
        doMount(child, childEl, parentEl, oldParent);
        return child;
    }
    function trigger(el, eventName) {
        var _view$eventName;
        if (eventName === "onmount" || eventName === "onremount") el.__redom_mounted = true;
        else if (eventName === "onunmount") el.__redom_mounted = false;
        var hooks = el.__redom_lifecycle;
        if (!hooks) return;
        var view = el.__redom_view;
        var hookCount = 0;
        view === null || view === undefined || (_view$eventName = view[eventName]) === null || _view$eventName === undefined || _view$eventName.call(view);
        for(var hook in hooks)if (hook) hookCount++;
        if (hookCount) {
            var traverse = el.firstChild;
            while(traverse){
                var next = traverse.nextSibling;
                trigger(traverse, eventName);
                traverse = next;
            }
        }
    }
    function doMount(child, childEl, parentEl, oldParent) {
        var _traverse;
        if (!childEl.__redom_lifecycle) childEl.__redom_lifecycle = {};
        var hooks = childEl.__redom_lifecycle;
        var remount = parentEl === oldParent;
        var hooksFound = false;
        var _iterator = _createForOfIteratorHelper(hookNames), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var hookName = _step.value;
                if (!remount) {
                    // if already mounted, skip this phase
                    if (child !== childEl) // only Views can have lifecycle events
                    {
                        if (hookName in child) hooks[hookName] = (hooks[hookName] || 0) + 1;
                    }
                }
                if (hooks[hookName]) hooksFound = true;
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        if (!hooksFound) {
            childEl.__redom_lifecycle = {};
            return;
        }
        var traverse = parentEl;
        var triggered = false;
        if (remount || (_traverse = traverse) !== null && _traverse !== undefined && _traverse.__redom_mounted) {
            trigger(childEl, remount ? "onremount" : "onmount");
            triggered = true;
        }
        while(traverse){
            var parent = traverse.parentNode;
            if (!traverse.__redom_lifecycle) traverse.__redom_lifecycle = {};
            var parentHooks = traverse.__redom_lifecycle;
            for(var hook in hooks)parentHooks[hook] = (parentHooks[hook] || 0) + hooks[hook];
            if (triggered) break;
            if (traverse.nodeType === Node.DOCUMENT_NODE || shadowRootAvailable && traverse instanceof ShadowRoot || parent !== null && parent !== undefined && parent.__redom_mounted) {
                trigger(traverse, remount ? "onremount" : "onmount");
                triggered = true;
            }
            traverse = parent;
        }
    }
    function setStyle(view, arg1, arg2) {
        var el = getEl(view);
        if (_typeof(arg1) === "object") for(var key in arg1)setStyleValue(el, key, arg1[key]);
        else setStyleValue(el, arg1, arg2);
    }
    function setStyleValue(el, key, value) {
        el.style[key] = value == null ? "" : value;
    }
    var xlinkns = "http://www.w3.org/1999/xlink";
    function setAttr(view, arg1, arg2) {
        setAttrInternal(view, arg1, arg2);
    }
    function setAttrInternal(view, arg1, arg2, initial) {
        var el = getEl(view);
        var isObj = _typeof(arg1) === "object";
        if (isObj) for(var key in arg1)setAttrInternal(el, key, arg1[key], initial);
        else {
            var isSVG = el instanceof SVGElement;
            var isFunc = typeof arg2 === "function";
            if (arg1 === "style" && _typeof(arg2) === "object") setStyle(el, arg2);
            else if (isSVG && isFunc) el[arg1] = arg2;
            else if (arg1 === "dataset") setData(el, arg2);
            else if (!isSVG && (arg1 in el || isFunc) && arg1 !== "list") el[arg1] = arg2;
            else {
                if (isSVG && arg1 === "xlink") {
                    setXlink(el, arg2);
                    return;
                }
                if (initial && arg1 === "class") {
                    setClassName(el, arg2);
                    return;
                }
                if (arg2 == null) el.removeAttribute(arg1);
                else el.setAttribute(arg1, arg2);
            }
        }
    }
    function setClassName(el, additionToClassName) {
        if (additionToClassName == null) el.removeAttribute("class");
        else if (el.classList) el.classList.add(additionToClassName);
        else if (_typeof(el.className) === "object" && el.className && el.className.baseVal) el.className.baseVal = "".concat(el.className.baseVal, " ").concat(additionToClassName).trim();
        else el.className = "".concat(el.className, " ").concat(additionToClassName).trim();
    }
    function setXlink(el, arg1, arg2) {
        if (_typeof(arg1) === "object") for(var key in arg1)setXlink(el, key, arg1[key]);
        else if (arg2 != null) el.setAttributeNS(xlinkns, arg1, arg2);
        else el.removeAttributeNS(xlinkns, arg1, arg2);
    }
    function setData(el, arg1, arg2) {
        if (_typeof(arg1) === "object") for(var key in arg1)setData(el, key, arg1[key]);
        else if (arg2 != null) el.dataset[arg1] = arg2;
        else delete el.dataset[arg1];
    }
    function text(str) {
        return document.createTextNode(str != null ? str : "");
    }
    function parseArgumentsInternal(element, args, initial) {
        var _iterator = _createForOfIteratorHelper(args), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var arg = _step.value;
                if (arg !== 0 && !arg) continue;
                var type = _typeof(arg);
                if (type === "function") arg(element);
                else if (type === "string" || type === "number") element.appendChild(text(arg));
                else if (isNode(getEl(arg))) mount(element, arg);
                else if (arg.length) parseArgumentsInternal(element, arg, initial);
                else if (type === "object") setAttrInternal(element, arg, null, initial);
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
    }
    function ensureEl(parent) {
        return typeof parent === "string" ? html(parent) : getEl(parent);
    }
    function getEl(parent) {
        return parent.nodeType && parent || !parent.el && parent || getEl(parent.el);
    }
    function isNode(arg) {
        return arg === null || arg === undefined ? undefined : arg.nodeType;
    }
    function dispatch(child, data) {
        var eventName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "redom";
        var childEl = getEl(child);
        var event = new CustomEvent(eventName, {
            bubbles: true,
            detail: data
        });
        childEl.dispatchEvent(event);
    }
    function setChildren(parent) {
        var parentEl = getEl(parent);
        for(var _len = arguments.length, children = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)children[_key - 1] = arguments[_key];
        var current = traverse(parent, children, parentEl.firstChild);
        while(current){
            var next = current.nextSibling;
            unmount(parent, current);
            current = next;
        }
    }
    function traverse(parent, children, _current) {
        var current = _current;
        var childEls = Array(children.length);
        for(var i = 0; i < children.length; i++)childEls[i] = children[i] && getEl(children[i]);
        for(var _i = 0; _i < children.length; _i++){
            var child = children[_i];
            if (!child) continue;
            var childEl = childEls[_i];
            if (childEl === current) {
                current = current.nextSibling;
                continue;
            }
            if (isNode(childEl)) {
                var _current2;
                var next = (_current2 = current) === null || _current2 === undefined ? undefined : _current2.nextSibling;
                var exists = child.__redom_index != null;
                var replace = exists && next === childEls[_i + 1];
                mount(parent, child, current, replace);
                if (replace) current = next;
                continue;
            }
            if (child.length != null) current = traverse(parent, child, current);
        }
        return current;
    }
    function listPool(View, key, initData) {
        return new ListPool(View, key, initData);
    }
    var ListPool = /*#__PURE__*/ function() {
        function ListPool(View, key, initData) {
            _classCallCheck(this, ListPool);
            this.View = View;
            this.initData = initData;
            this.oldLookup = {};
            this.lookup = {};
            this.oldViews = [];
            this.views = [];
            if (key != null) this.key = typeof key === "function" ? key : propKey(key);
        }
        return _createClass(ListPool, [
            {
                key: "update",
                value: function update(data, context) {
                    var View = this.View, key = this.key, initData = this.initData;
                    var keySet = key != null;
                    var oldLookup = this.lookup;
                    var newLookup = {};
                    var newViews = Array(data.length);
                    var oldViews = this.views;
                    for(var i = 0; i < data.length; i++){
                        var _view$update, _view;
                        var item = data[i];
                        var view = undefined;
                        if (keySet) {
                            var id = key(item);
                            view = oldLookup[id] || new View(initData, item, i, data);
                            newLookup[id] = view;
                            view.__redom_id = id;
                        } else view = oldViews[i] || new View(initData, item, i, data);
                        (_view$update = (_view = view).update) === null || _view$update === undefined || _view$update.call(_view, item, i, data, context);
                        var el = getEl(view.el);
                        el.__redom_view = view;
                        newViews[i] = view;
                    }
                    this.oldViews = oldViews;
                    this.views = newViews;
                    this.oldLookup = oldLookup;
                    this.lookup = newLookup;
                }
            }
        ]);
    }();
    function propKey(key) {
        return function proppedKey(item) {
            return item[key];
        };
    }
    function list(parent, View, key, initData) {
        return new List(parent, View, key, initData);
    }
    var List = /*#__PURE__*/ function() {
        function List(parent, View, key, initData) {
            _classCallCheck(this, List);
            this.View = View;
            this.initData = initData;
            this.views = [];
            this.pool = new ListPool(View, key, initData);
            this.el = ensureEl(parent);
            this.keySet = key != null;
        }
        return _createClass(List, [
            {
                key: "update",
                value: function update(data, context) {
                    var keySet = this.keySet;
                    var oldViews = this.views;
                    this.pool.update(data || [], context);
                    var _this$pool = this.pool, views = _this$pool.views, lookup = _this$pool.lookup;
                    if (keySet) for(var i = 0; i < oldViews.length; i++){
                        var oldView = oldViews[i];
                        var id = oldView.__redom_id;
                        if (lookup[id] == null) {
                            oldView.__redom_index = null;
                            unmount(this, oldView);
                        }
                    }
                    for(var _i = 0; _i < views.length; _i++){
                        var view = views[_i];
                        view.__redom_index = _i;
                    }
                    setChildren(this, views);
                    if (keySet) this.lookup = lookup;
                    this.views = views;
                }
            }
        ]);
    }();
    List.extend = function extendList(parent, View, key, initData) {
        return List.bind(List, parent, View, key, initData);
    };
    list.extend = List.extend;
    function place(View, initData) {
        return new Place(View, initData);
    }
    var Place = /*#__PURE__*/ function() {
        function Place(View, initData) {
            _classCallCheck(this, Place);
            this.el = text("");
            this.visible = false;
            this.view = null;
            this._placeholder = this.el;
            if (View instanceof Node) this._el = View;
            else if (View.el instanceof Node) {
                this._el = View;
                this.view = View;
            } else this._View = View;
            this._initData = initData;
        }
        return _createClass(Place, [
            {
                key: "update",
                value: function update(visible, data) {
                    var placeholder = this._placeholder;
                    var parentNode = this.el.parentNode;
                    if (visible) {
                        var _this$view, _this$view$update;
                        if (!this.visible) {
                            if (this._el) {
                                mount(parentNode, this._el, placeholder);
                                unmount(parentNode, placeholder);
                                this.el = getEl(this._el);
                                this.visible = visible;
                            } else {
                                var View = this._View;
                                var view = new View(this._initData);
                                this.el = getEl(view);
                                this.view = view;
                                mount(parentNode, view, placeholder);
                                unmount(parentNode, placeholder);
                            }
                        }
                        (_this$view = this.view) === null || _this$view === undefined || (_this$view$update = _this$view.update) === null || _this$view$update === undefined || _this$view$update.call(_this$view, data);
                    } else if (this.visible) {
                        if (this._el) {
                            mount(parentNode, placeholder, this._el);
                            unmount(parentNode, this._el);
                            this.el = placeholder;
                            this.visible = visible;
                            return;
                        }
                        mount(parentNode, placeholder, this.view);
                        unmount(parentNode, this.view);
                        this.el = placeholder;
                        this.view = null;
                    }
                    this.visible = visible;
                }
            }
        ]);
    }();
    function ref(ctx, key, value) {
        ctx[key] = value;
        return value;
    }
    function router(parent, views, initData) {
        return new Router(parent, views, initData);
    }
    var Router = /*#__PURE__*/ function() {
        function Router(parent, views, initData) {
            _classCallCheck(this, Router);
            this.el = ensureEl(parent);
            this.views = views;
            this.Views = views; // backwards compatibility
            this.initData = initData;
        }
        return _createClass(Router, [
            {
                key: "update",
                value: function update(route, data) {
                    var _this$view, _this$view$update;
                    if (route !== this.route) {
                        var views = this.views;
                        var View = views[route];
                        this.route = route;
                        if (View && (View instanceof Node || View.el instanceof Node)) this.view = View;
                        else this.view = View && new View(this.initData, data);
                        setChildren(this.el, [
                            this.view
                        ]);
                    }
                    (_this$view = this.view) === null || _this$view === undefined || (_this$view$update = _this$view.update) === null || _this$view$update === undefined || _this$view$update.call(_this$view, data, route);
                }
            }
        ]);
    }();
    var ns = "http://www.w3.org/2000/svg";
    function svg(query) {
        var element;
        var type = _typeof(query);
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        if (type === "string") element = createElement(query, ns);
        else if (type === "function") {
            var Query = query;
            element = _construct(Query, args);
        } else throw new Error("At least one argument required");
        parseArgumentsInternal(getEl(element), args, true);
        return element;
    }
    var s = svg;
    svg.extend = function extendSvg() {
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return svg.bind.apply(svg, [
            this
        ].concat(args));
    };
    svg.ns = ns;
    function viewFactory(views, key) {
        if (!views || _typeof(views) !== "object") throw new Error("views must be an object");
        if (!key || typeof key !== "string") throw new Error("key must be a string");
        return function factoryView(initData, item, i, data) {
            var viewKey = item[key];
            var View = views[viewKey];
            if (View) return new View(initData, item, i, data);
            throw new Error("view ".concat(viewKey, " not found"));
        };
    }
    exports1.List = List;
    exports1.ListPool = ListPool;
    exports1.Place = Place;
    exports1.Router = Router;
    exports1.dispatch = dispatch;
    exports1.el = el;
    exports1.h = h;
    exports1.html = html;
    exports1.list = list;
    exports1.listPool = listPool;
    exports1.mount = mount;
    exports1.place = place;
    exports1.ref = ref;
    exports1.router = router;
    exports1.s = s;
    exports1.setAttr = setAttr;
    exports1.setChildren = setChildren;
    exports1.setData = setData;
    exports1.setStyle = setStyle;
    exports1.setXlink = setXlink;
    exports1.svg = svg;
    exports1.text = text;
    exports1.unmount = unmount;
    exports1.viewFactory = viewFactory;
});

},{}],"4giRf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _redom = require("redom");
var _packageJson = require("../../../package.json");
var _packageJsonDefault = parcelHelpers.interopDefault(_packageJson);
var _picoMinCss = require("@picocss/pico/css/pico.min.css");
var _mileageModal = require("../Components/MileageModal");
var _mileageModalDefault = parcelHelpers.interopDefault(_mileageModal);
var _loginComponent = require("../Components/LoginComponent");
var _loginComponentDefault = parcelHelpers.interopDefault(_loginComponent);
var _authServiceJs = require("../services/authService.js");
class App {
    constructor(){
        this.loginComponent = new (0, _loginComponentDefault.default)();
        this.entryModal = new (0, _mileageModalDefault.default)();
        // Set up callback for auth state changes
        this.loginComponent.onAuthStateChange = this.handleAuthStateChange;
        // Set up callback for mileage submission
        this.entryModal.onMileageSubmitted = this.handleMileageSubmitted;
        this.el = (0, _redom.el)('', (0, _redom.el)('header', (0, _redom.el)('nav', (0, _redom.el)('h1', 'Mileage Claims'), this.loginComponent)), (0, _redom.el)('main', this.contentContainer = (0, _redom.el)('.container', (0, _redom.el)('p', 'Please sign in with your Microsoft 365 account to submit mileage claims.'), this.showModalButton = (0, _redom.el)('button', {
            type: 'button',
            disabled: true
        }, 'Add Mileage Entry'))), this.entryModal);
    }
    onmount = ()=>{
        this.displayAppVersion();
        this.setupEventListeners();
        this.checkAuthState();
    };
    setupEventListeners = ()=>{
        this.showModalButton.addEventListener('click', this.openModal);
    };
    handleAuthStateChange = async (event)=>{
        const { isAuthenticated } = event.detail;
        if (isAuthenticated) {
            this.showModalButton.disabled = false;
            const userInfo = await (0, _authServiceJs.AuthService).getUserInfo();
            this.contentContainer.innerHTML = '';
            this.contentContainer.appendChild((0, _redom.el)('p', `Welcome, ${userInfo.name}! You can now submit mileage claims.`));
            this.contentContainer.appendChild(this.showModalButton);
        } else {
            this.showModalButton.disabled = true;
            this.contentContainer.innerHTML = '';
            this.contentContainer.appendChild((0, _redom.el)('p', 'Please sign in with your Microsoft 365 account to submit mileage claims.'));
            this.contentContainer.appendChild(this.showModalButton);
        }
    };
    handleMileageSubmitted = (event)=>{
        const { success, message, error } = event.detail;
        if (success) {
            // Show success message
            const successMsg = (0, _redom.el)('div', {
                style: 'color: var(--ins-color); padding: 1rem; margin: 1rem 0; border-left: 4px solid var(--ins-color);'
            }, message);
            this.contentContainer.insertBefore(successMsg, this.showModalButton);
            // Remove success message after 5 seconds
            setTimeout(()=>{
                if (successMsg.parentNode) successMsg.parentNode.removeChild(successMsg);
            }, 5000);
        } else if (error) console.error('Mileage submission failed:', error);
    };
    checkAuthState = async ()=>{
        const isAuthenticated = await (0, _authServiceJs.AuthService).isAuthenticated();
        if (isAuthenticated) this.handleAuthStateChange({
            detail: {
                isAuthenticated: true
            }
        });
    };
    openModal = ()=>{
        this.entryModal.open();
    };
    onunmount = ()=>{
        this.showModalButton.removeEventListener('click', this.openModal);
    };
    displayAppVersion = ()=>{
        const versionElement = document.getElementById('app-version');
        if (versionElement) versionElement.textContent = `v${(0, _packageJsonDefault.default).version}`;
    };
}
exports.default = App;

},{"redom":"9CzRX","../../../package.json":"c3hj5","@picocss/pico/css/pico.min.css":"e6gfM","../Components/MileageModal":"gosFZ","../Components/LoginComponent":"aaxde","../services/authService.js":"3PAGw","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"c3hj5":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"name\":\"mileage-claims\",\"version\":\"1.0.13\",\"scripts\":{\"start\":\"npm run clean && parcel src/app.html --open\",\"clean\":\"rmdir /s /q dist || exit 0\",\"prebuild\":\"npm version patch --force\",\"build\":\"npm run clean && parcel build src/app.html --no-source-maps\"},\"type\":\"module\",\"dependencies\":{\"@azure/msal-browser\":\"^4.26.0\",\"@picocss/pico\":\"^2.1.1\",\"ky\":\"^1.8.1\",\"redom-components\":\"^1.0.16\"},\"devDependencies\":{\"parcel\":\"^2.16.0\",\"redom\":\"^4.3.0\"}}");

},{}],"e6gfM":[function() {},{}],"gosFZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _redom = require("redom");
var _postcodeInput = require("../PostcodeInput");
var _dateInput = require("../DateInput");
var _calculateButton = require("../CalculateButton");
var _mileageServiceJs = require("../../services/mileageService.js");
var _indexCss = require("./index.css");
class MileageModal {
    constructor(){
        this.onSave = null;
        this.onCancel = null;
        this.onMileageSubmitted = null; // Callback for mileage submission
        this.createElement();
    }
    createElement = ()=>{
        this.dateInput = new (0, _dateInput.DateInput)({
            name: 'date'
        });
        this.startPostcodeInput = new (0, _postcodeInput.PostcodeInput)({
            placeholder: 'Start postcode',
            name: 'start'
        });
        this.endPostcodeInput = new (0, _postcodeInput.PostcodeInput)({
            placeholder: 'End postcode',
            name: 'end'
        });
        this.milesInput = (0, _redom.el)('input', {
            type: 'number',
            placeholder: '0',
            step: '1',
            min: '0'
        });
        this.reasonInput = (0, _redom.el)('input', {
            type: 'text',
            placeholder: 'Reason for travel (optional)',
            value: 'Business travel'
        });
        this.calculateBtn = new (0, _calculateButton.CalculateButton)({
            name: 'calculate'
        });
        this.cancelBtn = (0, _redom.el)('button.secondary', {
            type: 'button'
        }, 'Cancel');
        this.saveBtn = (0, _redom.el)('button', {
            type: 'button'
        }, 'Save Entry');
        this.closeBtn = (0, _redom.el)('button', {
            'aria-label': 'Close',
            rel: 'prev'
        });
        // Create modal structure
        this.el = (0, _redom.el)('dialog', (0, _redom.el)('article', (0, _redom.el)('header', this.closeBtn, this.titleElement = (0, _redom.el)('p', (0, _redom.el)('strong', 'Add Mileage Entry'))), (0, _redom.el)('.modal-content', (0, _redom.el)('label', 'Date', this.dateInput), (0, _redom.el)('label', 'Start Location', this.startPostcodeInput), (0, _redom.el)('label', 'End Location', this.endPostcodeInput), (0, _redom.el)('label', 'Miles', (0, _redom.el)('', {
            role: 'group'
        }, this.milesInput, this.calculateBtn)), (0, _redom.el)('label', 'Reason for Travel', this.reasonInput)), (0, _redom.el)('footer', this.cancelBtn, this.saveBtn)));
    };
    onmount = ()=>{
        this.setupEventListeners();
    };
    setupEventListeners = ()=>{
        // Direct event handling - simple and clear
        this.el.addEventListener('uselocation', this.handleLocation);
        this.el.addEventListener('calculate', this.handleCalculate);
        this.closeBtn.addEventListener('click', this.handleClose);
        this.cancelBtn.addEventListener('click', this.handleCancel);
        this.saveBtn.addEventListener('click', this.handleSave);
    };
    onunmount = ()=>{
        this.teardownEventListeners();
    };
    teardownEventListeners = ()=>{
        // Clean up all events
        this.el.removeEventListener('uselocation', this.handleLocation);
        this.el.removeEventListener('calculate', this.handleCalculate);
        this.closeBtn.removeEventListener('click', this.handleClose);
        this.cancelBtn.removeEventListener('click', this.handleCancel);
        this.saveBtn.removeEventListener('click', this.handleSave);
    };
    // Public API: Open the modal
    open = ()=>{
        // Simple modal opening - mount and show
        document.body.appendChild(this.el);
        this.el.showModal();
        this.dateInput.focus();
    };
    // Public API: Close the modal
    close = ()=>{
        // Simple modal closing - close and unmount
        this.el.close();
        if (this.el.parentNode) this.el.parentNode.removeChild(this.el);
    };
    handleClose = ()=>{
        this.close();
    };
    handleCancel = ()=>{
        // Trigger cancel callback if set
        if (this.onCancel) this.onCancel();
        this.close();
    };
    // Business logic handlers - clean and direct
    handleLocation = async (e)=>{
        const inputName = e.detail.name;
        try {
            const postcode = await (0, _mileageServiceJs.MileageService).getCurrentLocationPostcode();
            // Update the appropriate input based on the event
            if (inputName === 'start') this.startPostcodeInput.value = postcode;
            else if (inputName === 'end') this.endPostcodeInput.value = postcode;
        } catch (error) {
            alert(error.message);
        }
    };
    handleCalculate = async ()=>{
        const startPostcode = this.startPostcodeInput.value.trim();
        const endPostcode = this.endPostcodeInput.value.trim();
        try {
            // Disable calculate button during calculation
            this.calculateBtn.disabled = true;
            const miles = await (0, _mileageServiceJs.MileageService).calculateDistance(startPostcode, endPostcode);
            this.milesInput.value = miles;
        } catch (error) {
            alert(error.message);
        } finally{
            // Re-enable calculate button
            this.calculateBtn.disabled = false;
        }
    };
    handleSave = async ()=>{
        const data = {
            date: this.dateInput.value,
            fromPostcode: this.startPostcodeInput.value,
            toPostcode: this.endPostcodeInput.value,
            distance: this.milesInput.value,
            reason: this.reasonInput.value || 'Business travel'
        };
        // Validate the data using the service
        const validation = (0, _mileageServiceJs.MileageService).validateMileageEntry(data);
        if (!validation.isValid) {
            alert('Please fix the following errors:\n' + validation.errors.join('\n'));
            return;
        }
        // Format postcodes for consistency
        data.fromPostcode = (0, _mileageServiceJs.MileageService).formatPostcode(data.fromPostcode);
        data.toPostcode = (0, _mileageServiceJs.MileageService).formatPostcode(data.toPostcode);
        try {
            // Save to Azure backend
            await (0, _mileageServiceJs.MileageService).saveMileageEntry(data);
            // Call callback for success
            if (this.onMileageSubmitted) this.onMileageSubmitted({
                detail: {
                    success: true,
                    data: data,
                    message: 'Mileage claim submitted successfully!'
                }
            });
            this.close();
        } catch (error) {
            console.error('Failed to submit mileage claim:', error);
            // Show error message in modal
            const errorMsg = this.el.querySelector('.error-message') || (0, _redom.el)('div', {
                className: 'error-message'
            });
            errorMsg.textContent = error.message || 'Failed to submit mileage claim. Please try again.';
            errorMsg.style.color = 'var(--del-color)';
            errorMsg.style.marginTop = '1rem';
            if (!this.el.querySelector('.error-message')) this.el.querySelector('form').appendChild(errorMsg);
            // Call callback for error
            if (this.onMileageSubmitted) this.onMileageSubmitted({
                detail: {
                    success: false,
                    error: error.message,
                    data: data
                }
            });
        }
    };
}
exports.default = MileageModal;

},{"redom":"9CzRX","../PostcodeInput":"aqLF9","../DateInput":"3IVHY","../CalculateButton":"cOTZ7","../../services/mileageService.js":"16bB4","./index.css":"dfMvT","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"aqLF9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PostcodeInput", ()=>PostcodeInput);
var _redom = require("redom");
class PostcodeInput {
    constructor(props = {}){
        const { placeholder = '', value = '', name } = props;
        // Store the name/id for event identification
        this.name = name;
        this.el = (0, _redom.el)('', {
            role: 'group'
        }, [
            this.input = (0, _redom.el)('input', {
                type: 'text',
                placeholder: placeholder,
                value: value
            }),
            this.button = (0, _redom.el)('button', {
                class: 'secondary',
                title: 'Use current location'
            }, [
                (0, _redom.svg)('svg.lucide.lucide-locate-fixed', {
                    width: "24",
                    height: "24",
                    viewBox: "0 0 24 24",
                    fill: "none",
                    stroke: "currentColor",
                    "stroke-width": "2",
                    "stroke-linecap": "round",
                    "stroke-linejoin": "round"
                }, [
                    (0, _redom.svg)('line', {
                        x1: "2",
                        x2: "5",
                        y1: "12",
                        y2: "12"
                    }),
                    (0, _redom.svg)('line', {
                        x1: "19",
                        x2: "22",
                        y1: "12",
                        y2: "12"
                    }),
                    (0, _redom.svg)('line', {
                        x1: "12",
                        x2: "12",
                        y1: "2",
                        y2: "5"
                    }),
                    (0, _redom.svg)('line', {
                        x1: "12",
                        x2: "12",
                        y1: "19",
                        y2: "22"
                    }),
                    (0, _redom.svg)('circle', {
                        cx: "12",
                        cy: "12",
                        r: "7"
                    }),
                    (0, _redom.svg)('circle', {
                        cx: "12",
                        cy: "12",
                        r: "3"
                    })
                ])
            ])
        ]);
    }
    onmount = ()=>{
        this.button.addEventListener('click', this.handleUseLocation);
    };
    onunmount = ()=>{
        this.button.removeEventListener('click', this.handleUseLocation);
    };
    get value() {
        return this.input.value;
    }
    set value(val) {
        this.input.value = val || '';
    }
    // Event dispatch proxy methods
    addEventListener(type, listener, options) {
        this.el.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
        this.el.removeEventListener(type, listener, options);
    }
    dispatchEvent(event) {
        return this.el.dispatchEvent(event);
    }
    handleUseLocation = ()=>{
        this.dispatchEvent(new CustomEvent('uselocation', {
            bubbles: true,
            detail: {
                component: this,
                name: this.name
            }
        }));
    };
    focus() {
        this.input.focus();
    }
    clear() {
        this.value = '';
    }
}

},{"redom":"9CzRX","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jnFvT":[function(require,module,exports,__globalThis) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"3IVHY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DateInput", ()=>DateInput);
var _redom = require("redom");
class DateInput {
    constructor(props = {}){
        this.props = props;
        this.createElement();
    }
    createElement = ()=>{
        // Get today's date in YYYY-MM-DD format
        const today = new Date().toISOString().split('T')[0];
        // Use provided value or default to today
        const value = this.props.value || today;
        this.el = (0, _redom.el)('input', {
            type: 'date',
            value: value,
            name: this.props.name || 'date'
        });
    };
    // Getter for value
    get value() {
        return this.el.value;
    }
    // Setter for value
    set value(newValue) {
        this.el.value = newValue;
    }
    // Method to reset to today's date
    resetToToday = ()=>{
        const today = new Date().toISOString().split('T')[0];
        this.value = today;
    };
    // Method to focus the input
    focus = ()=>{
        this.el.focus();
    };
}

},{"redom":"9CzRX","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"cOTZ7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CalculateButton", ()=>CalculateButton);
var _redom = require("redom");
class CalculateButton {
    constructor(props = {}){
        const { disabled = false, title = 'Calculate mileage', name } = props;
        // Store props
        this.name = name;
        this._disabled = disabled;
        this.el = (0, _redom.el)('button.contrast', {
            type: 'button',
            title: title,
            'aria-label': title,
            disabled: disabled
        }, [
            (0, _redom.svg)('svg.lucide.lucide-calculator', {
                width: "24",
                height: "24",
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: "currentColor",
                "stroke-width": "2",
                "stroke-linecap": "round",
                "stroke-linejoin": "round"
            }, [
                (0, _redom.svg)('rect', {
                    width: "16",
                    height: "20",
                    x: "4",
                    y: "2",
                    rx: "2"
                }),
                (0, _redom.svg)('line', {
                    x1: "8",
                    x2: "16",
                    y1: "6",
                    y2: "6"
                }),
                (0, _redom.svg)('line', {
                    x1: "16",
                    x2: "16",
                    y1: "14",
                    y2: "18"
                }),
                (0, _redom.svg)('path', {
                    d: "M16 10h.01"
                }),
                (0, _redom.svg)('path', {
                    d: "M12 10h.01"
                }),
                (0, _redom.svg)('path', {
                    d: "M8 10h.01"
                }),
                (0, _redom.svg)('path', {
                    d: "M12 14h.01"
                }),
                (0, _redom.svg)('path', {
                    d: "M8 14h.01"
                }),
                (0, _redom.svg)('path', {
                    d: "M12 18h.01"
                }),
                (0, _redom.svg)('path', {
                    d: "M8 18h.01"
                })
            ])
        ]);
    }
    onmount = ()=>{
        this.el.addEventListener('click', this.handleClick);
    };
    onunmount = ()=>{
        this.el.removeEventListener('click', this.handleClick);
    };
    // Getter and setter for disabled state
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
        this.el.disabled = value;
    }
    // Event dispatch proxy methods
    addEventListener = (type, listener, options)=>{
        this.el.addEventListener(type, listener, options);
    };
    removeEventListener = (type, listener, options)=>{
        this.el.removeEventListener(type, listener, options);
    };
    dispatchEvent = (event)=>{
        return this.el.dispatchEvent(event);
    };
    handleClick = ()=>{
        if (!this.disabled) this.dispatchEvent(new CustomEvent('calculate', {
            bubbles: true,
            detail: {
                component: this,
                name: this.name
            }
        }));
    };
    // Focus the button
    focus = ()=>{
        this.el.focus();
    };
}

},{"redom":"9CzRX","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"16bB4":[function(require,module,exports,__globalThis) {
// Service for handling mileage-related business logic
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MileageService", ()=>MileageService);
parcelHelpers.export(exports, "getCurrentLocationPostcode", ()=>getCurrentLocationPostcode);
parcelHelpers.export(exports, "calculateDistance", ()=>calculateDistance);
parcelHelpers.export(exports, "validateMileageEntry", ()=>validateMileageEntry);
parcelHelpers.export(exports, "formatPostcode", ()=>formatPostcode);
var _authServiceJs = require("./authService.js");
class MileageService {
    /**
     * Get user's current location and convert to postcode
     * @returns {Promise<string>} Promise that resolves to postcode string
     */ static async getCurrentLocationPostcode() {
        if (!('geolocation' in navigator)) throw new Error('Geolocation is not supported by this browser');
        const position = await new Promise((resolve, reject)=>{
            navigator.geolocation.getCurrentPosition(resolve, reject);
        });
        console.log('Would reverse-geocode', position);
        // TODO: Replace with actual reverse geocoding API call
        const postcode = 'SW1A 1AA'; // Dummy postcode from reverse-geocoding
        return postcode;
    }
    /**
     * Calculate distance between two postcodes
     * @param {string} startPostcode 
     * @param {string} endPostcode 
     * @returns {Promise<number>} Distance in miles
     */ static async calculateDistance(startPostcode, endPostcode) {
        if (!startPostcode?.trim() || !endPostcode?.trim()) throw new Error('Both start and end postcodes are required');
        // TODO: Replace with actual distance calculation API
        // For now, return a random distance for demo purposes
        const miles = Math.floor(Math.random() * 100) + 10; // Random miles between 10-110
        console.log(`Calculated ${miles} miles from ${startPostcode} to ${endPostcode}`);
        // Simulate API delay
        await new Promise((resolve)=>setTimeout(resolve, 500));
        return miles;
    }
    /**
     * Validate mileage entry data
     * @param {Object} data - Mileage entry data
     * @returns {Object} { isValid: boolean, errors: string[] }
     */ static validateMileageEntry(data) {
        const errors = [];
        if (!data.date) errors.push('Date is required');
        if (!data.startPostcode?.trim()) errors.push('Start postcode is required');
        if (!data.endPostcode?.trim()) errors.push('End postcode is required');
        if (!data.miles || data.miles <= 0) errors.push('Miles must be greater than 0');
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    /**
     * Format postcode for consistency
     * @param {string} postcode 
     * @returns {string} Formatted postcode
     */ static formatPostcode(postcode) {
        if (!postcode) return '';
        // Basic UK postcode formatting - add space before last 3 characters
        const cleaned = postcode.replace(/\s/g, '').toUpperCase();
        if (cleaned.length >= 5) return cleaned.slice(0, -3) + ' ' + cleaned.slice(-3);
        return cleaned;
    }
    /**
     * Save mileage entry to Azure backend
     * @param {Object} mileageData - Validated mileage entry data
     * @returns {Promise<Object>} Response from server
     */ static async saveMileageEntry(mileageData) {
        try {
            // Get authentication token
            const token = await (0, _authServiceJs.AuthService).getAccessToken();
            const userInfo = await (0, _authServiceJs.AuthService).getUserInfo();
            // Prepare data for submission
            const submissionData = {
                ...mileageData,
                submittedBy: userInfo.email,
                submittedAt: new Date().toISOString(),
                status: 'submitted'
            };
            // Call Azure Function API
            const response = await fetch('/api/saveMileageEntry', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(submissionData)
            });
            if (!response.ok) {
                const errorData = await response.json().catch(()=>({}));
                throw new Error(errorData.message || `Server error: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error('Failed to save mileage entry:', error);
            throw new Error(`Failed to save mileage entry: ${error.message}`);
        }
    }
    /**
     * Get user's mileage entries from Azure backend
     * @returns {Promise<Array>} Array of mileage entries
     */ static async getMileageEntries() {
        try {
            const token = await (0, _authServiceJs.AuthService).getAccessToken();
            const response = await fetch('/api/getMileageEntries', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            if (!response.ok) throw new Error(`Failed to fetch entries: ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('Failed to get mileage entries:', error);
            throw error;
        }
    }
}
const getCurrentLocationPostcode = MileageService.getCurrentLocationPostcode;
const calculateDistance = MileageService.calculateDistance;
const validateMileageEntry = MileageService.validateMileageEntry;
const formatPostcode = MileageService.formatPostcode;

},{"./authService.js":"3PAGw","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"3PAGw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthService", ()=>AuthService);
var _msalBrowser = require("@azure/msal-browser");
// Check if we're in local development
const isLocalDevelopment = window.location.hostname === 'localhost';
// MSAL configuration
const msalConfig = {
    auth: {
        clientId: 'your-client-id-here',
        authority: 'https://login.microsoftonline.com/common',
        redirectUri: window.location.origin + '/.auth/login/aad/callback'
    },
    cache: {
        cacheLocation: 'sessionStorage',
        storeAuthStateInCookie: false
    }
};
// Login request configuration
const loginRequest = {
    scopes: [
        'User.Read',
        'openid',
        'profile',
        'email'
    ]
};
// Create MSAL instance
let msalInstance = null;
class AuthService {
    static async initialize() {
        if (isLocalDevelopment) // In local development, skip MSAL initialization
        return null;
        if (!msalInstance) {
            msalInstance = new (0, _msalBrowser.PublicClientApplication)(msalConfig);
            await msalInstance.initialize();
        }
        return msalInstance;
    }
    static async login() {
        if (isLocalDevelopment) {
            // Simulate login in local development
            console.log('Local development: Simulating login');
            return {
                account: {
                    username: 'local.user@localhost',
                    name: 'Local Development User'
                }
            };
        }
        await this.initialize();
        try {
            const response = await msalInstance.loginPopup(loginRequest);
            console.log('Login successful:', response.account);
            return response.account;
        } catch (error) {
            console.error('Login failed:', error);
            throw error;
        }
    }
    static async logout() {
        if (isLocalDevelopment) {
            console.log('Local development: Simulating logout');
            return;
        }
        await this.initialize();
        try {
            await msalInstance.logoutPopup();
        } catch (error) {
            console.error('Logout failed:', error);
        }
    }
    static async getCurrentUser() {
        if (isLocalDevelopment) return null; // No user in local development
        await this.initialize();
        const accounts = msalInstance.getAllAccounts();
        return accounts.length > 0 ? accounts[0] : null;
    }
    static async getAccessToken() {
        if (isLocalDevelopment) return 'local-development-token';
        await this.initialize();
        const account = await this.getCurrentUser();
        if (!account) throw new Error('No user logged in');
        try {
            const response = await msalInstance.acquireTokenSilent({
                ...loginRequest,
                account: account
            });
            return response.accessToken;
        } catch (error) {
            console.warn('Silent token acquisition failed, trying popup:', error);
            try {
                const response = await msalInstance.acquireTokenPopup(loginRequest);
                return response.accessToken;
            } catch (popupError) {
                console.error('Token acquisition failed:', popupError);
                throw popupError;
            }
        }
    }
    static async isAuthenticated() {
        if (isLocalDevelopment) return false; // Not authenticated in local development
        const user = await this.getCurrentUser();
        return user !== null;
    }
    static async getUserInfo() {
        if (isLocalDevelopment) return {
            name: 'Local Development User',
            email: 'local.user@localhost',
            id: 'local-dev-user'
        };
        const user = await this.getCurrentUser();
        if (!user) return null;
        return {
            name: user.name,
            email: user.username,
            id: user.homeAccountId
        };
    }
}
// Initialize on module load
AuthService.initialize().catch(console.error);

},{"@azure/msal-browser":"gdldj","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"gdldj":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PublicClientApplication", ()=>(0, _publicClientApplicationMjs.PublicClientApplication));
parcelHelpers.export(exports, "createNestablePublicClientApplication", ()=>(0, _publicClientApplicationMjs.createNestablePublicClientApplication));
parcelHelpers.export(exports, "createStandardPublicClientApplication", ()=>(0, _publicClientApplicationMjs.createStandardPublicClientApplication));
parcelHelpers.export(exports, "PublicClientNext", ()=>(0, _publicClientNextMjs.PublicClientNext));
parcelHelpers.export(exports, "DEFAULT_IFRAME_TIMEOUT_MS", ()=>(0, _configurationMjs.DEFAULT_IFRAME_TIMEOUT_MS));
parcelHelpers.export(exports, "ApiId", ()=>(0, _browserConstantsMjs.ApiId));
parcelHelpers.export(exports, "BrowserCacheLocation", ()=>(0, _browserConstantsMjs.BrowserCacheLocation));
parcelHelpers.export(exports, "CacheLookupPolicy", ()=>(0, _browserConstantsMjs.CacheLookupPolicy));
parcelHelpers.export(exports, "InteractionStatus", ()=>(0, _browserConstantsMjs.InteractionStatus));
parcelHelpers.export(exports, "InteractionType", ()=>(0, _browserConstantsMjs.InteractionType));
parcelHelpers.export(exports, "WrapperSKU", ()=>(0, _browserConstantsMjs.WrapperSKU));
parcelHelpers.export(exports, "BrowserAuthError", ()=>(0, _browserAuthErrorMjs.BrowserAuthError));
parcelHelpers.export(exports, "BrowserAuthErrorMessage", ()=>(0, _browserAuthErrorMjs.BrowserAuthErrorMessage));
parcelHelpers.export(exports, "BrowserConfigurationAuthError", ()=>(0, _browserConfigurationAuthErrorMjs.BrowserConfigurationAuthError));
parcelHelpers.export(exports, "BrowserConfigurationAuthErrorMessage", ()=>(0, _browserConfigurationAuthErrorMjs.BrowserConfigurationAuthErrorMessage));
parcelHelpers.export(exports, "stubbedPublicClientApplication", ()=>(0, _ipublicClientApplicationMjs.stubbedPublicClientApplication));
parcelHelpers.export(exports, "NavigationClient", ()=>(0, _navigationClientMjs.NavigationClient));
parcelHelpers.export(exports, "MemoryStorage", ()=>(0, _memoryStorageMjs.MemoryStorage));
parcelHelpers.export(exports, "LocalStorage", ()=>(0, _localStorageMjs.LocalStorage));
parcelHelpers.export(exports, "SessionStorage", ()=>(0, _sessionStorageMjs.SessionStorage));
parcelHelpers.export(exports, "EventMessageUtils", ()=>(0, _eventMessageMjs.EventMessageUtils));
parcelHelpers.export(exports, "EventType", ()=>(0, _eventTypeMjs.EventType));
parcelHelpers.export(exports, "EventHandler", ()=>(0, _eventHandlerMjs.EventHandler));
parcelHelpers.export(exports, "SignedHttpRequest", ()=>(0, _signedHttpRequestMjs.SignedHttpRequest));
parcelHelpers.export(exports, "BrowserPerformanceClient", ()=>(0, _browserPerformanceClientMjs.BrowserPerformanceClient));
parcelHelpers.export(exports, "BrowserPerformanceMeasurement", ()=>(0, _browserPerformanceMeasurementMjs.BrowserPerformanceMeasurement));
parcelHelpers.export(exports, "AccountEntity", ()=>(0, _browser.AccountEntity));
parcelHelpers.export(exports, "AuthError", ()=>(0, _browser.AuthError));
parcelHelpers.export(exports, "AuthErrorCodes", ()=>(0, _browser.AuthErrorCodes));
parcelHelpers.export(exports, "AuthErrorMessage", ()=>(0, _browser.AuthErrorMessage));
parcelHelpers.export(exports, "AuthenticationHeaderParser", ()=>(0, _browser.AuthenticationHeaderParser));
parcelHelpers.export(exports, "AuthenticationScheme", ()=>(0, _browser.AuthenticationScheme));
parcelHelpers.export(exports, "AzureCloudInstance", ()=>(0, _browser.AzureCloudInstance));
parcelHelpers.export(exports, "ClientAuthError", ()=>(0, _browser.ClientAuthError));
parcelHelpers.export(exports, "ClientAuthErrorCodes", ()=>(0, _browser.ClientAuthErrorCodes));
parcelHelpers.export(exports, "ClientAuthErrorMessage", ()=>(0, _browser.ClientAuthErrorMessage));
parcelHelpers.export(exports, "ClientConfigurationError", ()=>(0, _browser.ClientConfigurationError));
parcelHelpers.export(exports, "ClientConfigurationErrorCodes", ()=>(0, _browser.ClientConfigurationErrorCodes));
parcelHelpers.export(exports, "ClientConfigurationErrorMessage", ()=>(0, _browser.ClientConfigurationErrorMessage));
parcelHelpers.export(exports, "InteractionRequiredAuthError", ()=>(0, _browser.InteractionRequiredAuthError));
parcelHelpers.export(exports, "InteractionRequiredAuthErrorCodes", ()=>(0, _browser.InteractionRequiredAuthErrorCodes));
parcelHelpers.export(exports, "InteractionRequiredAuthErrorMessage", ()=>(0, _browser.InteractionRequiredAuthErrorMessage));
parcelHelpers.export(exports, "JsonWebTokenTypes", ()=>(0, _browser.JsonWebTokenTypes));
parcelHelpers.export(exports, "LogLevel", ()=>(0, _browser.LogLevel));
parcelHelpers.export(exports, "Logger", ()=>(0, _browser.Logger));
parcelHelpers.export(exports, "OIDC_DEFAULT_SCOPES", ()=>(0, _browser.OIDC_DEFAULT_SCOPES));
parcelHelpers.export(exports, "PerformanceEvents", ()=>(0, _browser.PerformanceEvents));
parcelHelpers.export(exports, "PromptValue", ()=>(0, _browser.PromptValue));
parcelHelpers.export(exports, "ProtocolMode", ()=>(0, _browser.ProtocolMode));
parcelHelpers.export(exports, "ServerError", ()=>(0, _browser.ServerError));
parcelHelpers.export(exports, "ServerResponseType", ()=>(0, _browser.ServerResponseType));
parcelHelpers.export(exports, "StringUtils", ()=>(0, _browser.StringUtils));
parcelHelpers.export(exports, "StubPerformanceClient", ()=>(0, _browser.StubPerformanceClient));
parcelHelpers.export(exports, "UrlString", ()=>(0, _browser.UrlString));
parcelHelpers.export(exports, "version", ()=>(0, _packageMetadataMjs.version));
parcelHelpers.export(exports, "isPlatformBrokerAvailable", ()=>(0, _platformAuthProviderMjs.isPlatformBrokerAvailable));
parcelHelpers.export(exports, "BrowserUtils", ()=>_browserUtilsMjs);
parcelHelpers.export(exports, "BrowserAuthErrorCodes", ()=>_browserAuthErrorCodesMjs);
parcelHelpers.export(exports, "BrowserConfigurationAuthErrorCodes", ()=>_browserConfigurationAuthErrorCodesMjs);
var _browserUtilsMjs = require("./utils/BrowserUtils.mjs");
var _publicClientApplicationMjs = require("./app/PublicClientApplication.mjs");
var _publicClientNextMjs = require("./app/PublicClientNext.mjs");
var _configurationMjs = require("./config/Configuration.mjs");
var _browserConstantsMjs = require("./utils/BrowserConstants.mjs");
var _browserAuthErrorMjs = require("./error/BrowserAuthError.mjs");
var _browserConfigurationAuthErrorMjs = require("./error/BrowserConfigurationAuthError.mjs");
var _ipublicClientApplicationMjs = require("./app/IPublicClientApplication.mjs");
var _navigationClientMjs = require("./navigation/NavigationClient.mjs");
var _memoryStorageMjs = require("./cache/MemoryStorage.mjs");
var _localStorageMjs = require("./cache/LocalStorage.mjs");
var _sessionStorageMjs = require("./cache/SessionStorage.mjs");
var _eventMessageMjs = require("./event/EventMessage.mjs");
var _eventTypeMjs = require("./event/EventType.mjs");
var _eventHandlerMjs = require("./event/EventHandler.mjs");
var _signedHttpRequestMjs = require("./crypto/SignedHttpRequest.mjs");
var _browserPerformanceClientMjs = require("./telemetry/BrowserPerformanceClient.mjs");
var _browserPerformanceMeasurementMjs = require("./telemetry/BrowserPerformanceMeasurement.mjs");
var _browser = require("@azure/msal-common/browser");
var _packageMetadataMjs = require("./packageMetadata.mjs");
var _platformAuthProviderMjs = require("./broker/nativeBroker/PlatformAuthProvider.mjs");
var _browserAuthErrorCodesMjs = require("./error/BrowserAuthErrorCodes.mjs");
var _browserConfigurationAuthErrorCodesMjs = require("./error/BrowserConfigurationAuthErrorCodes.mjs");
'use strict';

},{"./utils/BrowserUtils.mjs":false,"./app/PublicClientApplication.mjs":"fC6PS","./app/PublicClientNext.mjs":false,"./config/Configuration.mjs":false,"./utils/BrowserConstants.mjs":false,"./error/BrowserAuthError.mjs":false,"./error/BrowserConfigurationAuthError.mjs":false,"./app/IPublicClientApplication.mjs":false,"./navigation/NavigationClient.mjs":false,"./cache/MemoryStorage.mjs":false,"./cache/LocalStorage.mjs":false,"./cache/SessionStorage.mjs":false,"./event/EventMessage.mjs":false,"./event/EventType.mjs":false,"./event/EventHandler.mjs":false,"./crypto/SignedHttpRequest.mjs":false,"./telemetry/BrowserPerformanceClient.mjs":false,"./telemetry/BrowserPerformanceMeasurement.mjs":false,"@azure/msal-common/browser":false,"./packageMetadata.mjs":false,"./broker/nativeBroker/PlatformAuthProvider.mjs":false,"./error/BrowserAuthErrorCodes.mjs":false,"./error/BrowserConfigurationAuthErrorCodes.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"77mxR":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invoke", ()=>(0, _browser.invoke));
parcelHelpers.export(exports, "invokeAsync", ()=>(0, _browser.invokeAsync));
parcelHelpers.export(exports, "addClientCapabilitiesToClaims", ()=>addClientCapabilitiesToClaims);
parcelHelpers.export(exports, "blockAPICallsBeforeInitialize", ()=>blockAPICallsBeforeInitialize);
parcelHelpers.export(exports, "blockAcquireTokenInPopups", ()=>blockAcquireTokenInPopups);
parcelHelpers.export(exports, "blockNonBrowserEnvironment", ()=>blockNonBrowserEnvironment);
parcelHelpers.export(exports, "blockRedirectInIframe", ()=>blockRedirectInIframe);
parcelHelpers.export(exports, "blockReloadInHiddenIframes", ()=>blockReloadInHiddenIframes);
parcelHelpers.export(exports, "clearHash", ()=>clearHash);
parcelHelpers.export(exports, "createGuid", ()=>createGuid);
parcelHelpers.export(exports, "getCurrentUri", ()=>getCurrentUri);
parcelHelpers.export(exports, "getHomepage", ()=>getHomepage);
parcelHelpers.export(exports, "isInIframe", ()=>isInIframe);
parcelHelpers.export(exports, "isInPopup", ()=>isInPopup);
parcelHelpers.export(exports, "preconnect", ()=>preconnect);
parcelHelpers.export(exports, "preflightCheck", ()=>preflightCheck);
parcelHelpers.export(exports, "redirectPreflightCheck", ()=>redirectPreflightCheck);
parcelHelpers.export(exports, "replaceHash", ()=>replaceHash);
var _browser = require("@azure/msal-common/browser");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserConstantsMjs = require("./BrowserConstants.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
var _browserConfigurationAuthErrorMjs = require("../error/BrowserConfigurationAuthError.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
var _browserConfigurationAuthErrorCodesMjs = require("../error/BrowserConfigurationAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Clears hash from window url.
 */ function clearHash(contentWindow) {
    // Office.js sets history.replaceState to null
    contentWindow.location.hash = "";
    if (typeof contentWindow.history.replaceState === "function") // Full removes "#" from url
    contentWindow.history.replaceState(null, "", `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);
}
/**
 * Replaces current hash with hash from provided url
 */ function replaceHash(url) {
    const urlParts = url.split("#");
    urlParts.shift(); // Remove part before the hash
    window.location.hash = urlParts.length > 0 ? urlParts.join("#") : "";
}
/**
 * Returns boolean of whether the current window is in an iframe or not.
 */ function isInIframe() {
    return window.parent !== window;
}
/**
 * Returns boolean of whether or not the current window is a popup opened by msal
 */ function isInPopup() {
    return typeof window !== "undefined" && !!window.opener && window.opener !== window && typeof window.name === "string" && window.name.indexOf(`${(0, _browserConstantsMjs.BrowserConstants).POPUP_NAME_PREFIX}.`) === 0;
}
// #endregion
/**
 * Returns current window URL as redirect uri
 */ function getCurrentUri() {
    return typeof window !== "undefined" && window.location ? window.location.href.split("?")[0].split("#")[0] : "";
}
/**
 * Gets the homepage url for the current window location.
 */ function getHomepage() {
    const currentUrl = new (0, _browser.UrlString)(window.location.href);
    const urlComponents = currentUrl.getUrlComponents();
    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;
}
/**
 * Throws error if we have completed an auth and are
 * attempting another auth request inside an iframe.
 */ function blockReloadInHiddenIframes() {
    const isResponseHash = (0, _browser.UrlString).hashContainsKnownProperties(window.location.hash);
    // return an error if called from the hidden iframe created by the msal js silent calls
    if (isResponseHash && isInIframe()) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.blockIframeReload));
}
/**
 * Block redirect operations in iframes unless explicitly allowed
 * @param interactionType Interaction type for the request
 * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe
 */ function blockRedirectInIframe(allowRedirectInIframe) {
    if (isInIframe() && !allowRedirectInIframe) // If we are not in top frame, we shouldn't redirect. This is also handled by the service.
    throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.redirectInIframe));
}
/**
 * Block redirectUri loaded in popup from calling AcquireToken APIs
 */ function blockAcquireTokenInPopups() {
    // Popups opened by msal popup APIs are given a name that starts with "msal."
    if (isInPopup()) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.blockNestedPopups));
}
/**
 * Throws error if token requests are made in non-browser environment
 * @param isBrowserEnvironment Flag indicating if environment is a browser.
 */ function blockNonBrowserEnvironment() {
    if (typeof window === "undefined") throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.nonBrowserEnvironment));
}
/**
 * Throws error if initialize hasn't been called
 * @param initialized
 */ function blockAPICallsBeforeInitialize(initialized) {
    if (!initialized) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.uninitializedPublicClientApplication));
}
/**
 * Helper to validate app environment before making an auth request
 * @param initialized
 */ function preflightCheck(initialized) {
    // Block request if not in browser environment
    blockNonBrowserEnvironment();
    // Block auth requests inside a hidden iframe
    blockReloadInHiddenIframes();
    // Block redirectUri opened in a popup from calling MSAL APIs
    blockAcquireTokenInPopups();
    // Block token acquisition before initialize has been called
    blockAPICallsBeforeInitialize(initialized);
}
/**
 * Helper to validate app enviornment before making redirect request
 * @param initialized
 * @param config
 */ function redirectPreflightCheck(initialized, config) {
    preflightCheck(initialized);
    blockRedirectInIframe(config.system.allowRedirectInIframe);
    // Block redirects if memory storage is enabled but storeAuthStateInCookie is not
    if (config.cache.cacheLocation === (0, _browserConstantsMjs.BrowserCacheLocation).MemoryStorage && !config.cache.storeAuthStateInCookie) throw (0, _browserConfigurationAuthErrorMjs.createBrowserConfigurationAuthError)((0, _browserConfigurationAuthErrorCodesMjs.inMemRedirectUnavailable));
}
/**
 * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request
 * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com
 * @returns
 */ function preconnect(authority) {
    const link = document.createElement("link");
    link.rel = "preconnect";
    link.href = new URL(authority).origin;
    link.crossOrigin = "anonymous";
    document.head.appendChild(link);
    // The browser will close connection if not used within a few seconds, remove element from the header after 10s
    window.setTimeout(()=>{
        try {
            document.head.removeChild(link);
        } catch  {}
    }, 10000); // 10s Timeout
}
/**
 * Wrapper function that creates a UUID v7 from the current timestamp.
 * @returns {string}
 */ function createGuid() {
    return (0, _browserCryptoMjs.createNewGuid)();
}
const addClientCapabilitiesToClaims = (0, _browser.RequestParameterBuilder).addClientCapabilitiesToClaims;

},{"@azure/msal-common/browser":"aaatw","../error/BrowserAuthError.mjs":"dg1Z3","./BrowserConstants.mjs":"kJowt","../crypto/BrowserCrypto.mjs":"8sZR9","../error/BrowserConfigurationAuthError.mjs":"gAGzP","../error/BrowserAuthErrorCodes.mjs":"dwOM5","../error/BrowserConfigurationAuthErrorCodes.mjs":"1PmN9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"aaatw":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthorizationCodeClient", ()=>(0, _authorizationCodeClientMjs.AuthorizationCodeClient));
parcelHelpers.export(exports, "RefreshTokenClient", ()=>(0, _refreshTokenClientMjs.RefreshTokenClient));
parcelHelpers.export(exports, "SilentFlowClient", ()=>(0, _silentFlowClientMjs.SilentFlowClient));
parcelHelpers.export(exports, "BaseClient", ()=>(0, _baseClientMjs.BaseClient));
parcelHelpers.export(exports, "DEFAULT_SYSTEM_OPTIONS", ()=>(0, _clientConfigurationMjs.DEFAULT_SYSTEM_OPTIONS));
parcelHelpers.export(exports, "buildTenantProfile", ()=>(0, _accountInfoMjs.buildTenantProfile));
parcelHelpers.export(exports, "tenantIdMatchesHomeTenant", ()=>(0, _accountInfoMjs.tenantIdMatchesHomeTenant));
parcelHelpers.export(exports, "updateAccountTenantProfileData", ()=>(0, _accountInfoMjs.updateAccountTenantProfileData));
parcelHelpers.export(exports, "getTenantIdFromIdTokenClaims", ()=>(0, _tokenClaimsMjs.getTenantIdFromIdTokenClaims));
parcelHelpers.export(exports, "CcsCredentialType", ()=>(0, _ccsCredentialMjs.CcsCredentialType));
parcelHelpers.export(exports, "buildClientInfo", ()=>(0, _clientInfoMjs.buildClientInfo));
parcelHelpers.export(exports, "buildClientInfoFromHomeAccountId", ()=>(0, _clientInfoMjs.buildClientInfoFromHomeAccountId));
parcelHelpers.export(exports, "Authority", ()=>(0, _authorityMjs.Authority));
parcelHelpers.export(exports, "buildStaticAuthorityOptions", ()=>(0, _authorityMjs.buildStaticAuthorityOptions));
parcelHelpers.export(exports, "formatAuthorityUri", ()=>(0, _authorityMjs.formatAuthorityUri));
parcelHelpers.export(exports, "AzureCloudInstance", ()=>(0, _authorityOptionsMjs.AzureCloudInstance));
parcelHelpers.export(exports, "AuthorityType", ()=>(0, _authorityTypeMjs.AuthorityType));
parcelHelpers.export(exports, "ProtocolMode", ()=>(0, _protocolModeMjs.ProtocolMode));
parcelHelpers.export(exports, "CacheManager", ()=>(0, _cacheManagerMjs.CacheManager));
parcelHelpers.export(exports, "DefaultStorageClass", ()=>(0, _cacheManagerMjs.DefaultStorageClass));
parcelHelpers.export(exports, "AccountEntity", ()=>(0, _accountEntityMjs.AccountEntity));
parcelHelpers.export(exports, "StubbedNetworkModule", ()=>(0, _inetworkModuleMjs.StubbedNetworkModule));
parcelHelpers.export(exports, "ThrottlingUtils", ()=>(0, _throttlingUtilsMjs.ThrottlingUtils));
parcelHelpers.export(exports, "getRequestThumbprint", ()=>(0, _requestThumbprintMjs.getRequestThumbprint));
parcelHelpers.export(exports, "UrlString", ()=>(0, _urlStringMjs.UrlString));
parcelHelpers.export(exports, "DEFAULT_CRYPTO_IMPLEMENTATION", ()=>(0, _icryptoMjs.DEFAULT_CRYPTO_IMPLEMENTATION));
parcelHelpers.export(exports, "ResponseHandler", ()=>(0, _responseHandlerMjs.ResponseHandler));
parcelHelpers.export(exports, "buildAccountToCache", ()=>(0, _responseHandlerMjs.buildAccountToCache));
parcelHelpers.export(exports, "ScopeSet", ()=>(0, _scopeSetMjs.ScopeSet));
parcelHelpers.export(exports, "AuthenticationHeaderParser", ()=>(0, _authenticationHeaderParserMjs.AuthenticationHeaderParser));
parcelHelpers.export(exports, "LogLevel", ()=>(0, _loggerMjs.LogLevel));
parcelHelpers.export(exports, "Logger", ()=>(0, _loggerMjs.Logger));
parcelHelpers.export(exports, "InteractionRequiredAuthError", ()=>(0, _interactionRequiredAuthErrorMjs.InteractionRequiredAuthError));
parcelHelpers.export(exports, "InteractionRequiredAuthErrorMessage", ()=>(0, _interactionRequiredAuthErrorMjs.InteractionRequiredAuthErrorMessage));
parcelHelpers.export(exports, "createInteractionRequiredAuthError", ()=>(0, _interactionRequiredAuthErrorMjs.createInteractionRequiredAuthError));
parcelHelpers.export(exports, "AuthError", ()=>(0, _authErrorMjs.AuthError));
parcelHelpers.export(exports, "AuthErrorMessage", ()=>(0, _authErrorMjs.AuthErrorMessage));
parcelHelpers.export(exports, "createAuthError", ()=>(0, _authErrorMjs.createAuthError));
parcelHelpers.export(exports, "ServerError", ()=>(0, _serverErrorMjs.ServerError));
parcelHelpers.export(exports, "NetworkError", ()=>(0, _networkErrorMjs.NetworkError));
parcelHelpers.export(exports, "createNetworkError", ()=>(0, _networkErrorMjs.createNetworkError));
parcelHelpers.export(exports, "CacheError", ()=>(0, _cacheErrorMjs.CacheError));
parcelHelpers.export(exports, "createCacheError", ()=>(0, _cacheErrorMjs.createCacheError));
parcelHelpers.export(exports, "ClientAuthError", ()=>(0, _clientAuthErrorMjs.ClientAuthError));
parcelHelpers.export(exports, "ClientAuthErrorMessage", ()=>(0, _clientAuthErrorMjs.ClientAuthErrorMessage));
parcelHelpers.export(exports, "createClientAuthError", ()=>(0, _clientAuthErrorMjs.createClientAuthError));
parcelHelpers.export(exports, "ClientConfigurationError", ()=>(0, _clientConfigurationErrorMjs.ClientConfigurationError));
parcelHelpers.export(exports, "ClientConfigurationErrorMessage", ()=>(0, _clientConfigurationErrorMjs.ClientConfigurationErrorMessage));
parcelHelpers.export(exports, "createClientConfigurationError", ()=>(0, _clientConfigurationErrorMjs.createClientConfigurationError));
parcelHelpers.export(exports, "AADAuthorityConstants", ()=>(0, _constantsMjs.AADAuthorityConstants));
parcelHelpers.export(exports, "AuthenticationScheme", ()=>(0, _constantsMjs.AuthenticationScheme));
parcelHelpers.export(exports, "CacheAccountType", ()=>(0, _constantsMjs.CacheAccountType));
parcelHelpers.export(exports, "CacheOutcome", ()=>(0, _constantsMjs.CacheOutcome));
parcelHelpers.export(exports, "CacheType", ()=>(0, _constantsMjs.CacheType));
parcelHelpers.export(exports, "ClaimsRequestKeys", ()=>(0, _constantsMjs.ClaimsRequestKeys));
parcelHelpers.export(exports, "CodeChallengeMethodValues", ()=>(0, _constantsMjs.CodeChallengeMethodValues));
parcelHelpers.export(exports, "Constants", ()=>(0, _constantsMjs.Constants));
parcelHelpers.export(exports, "CredentialType", ()=>(0, _constantsMjs.CredentialType));
parcelHelpers.export(exports, "DEFAULT_TOKEN_RENEWAL_OFFSET_SEC", ()=>(0, _constantsMjs.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC));
parcelHelpers.export(exports, "EncodingTypes", ()=>(0, _constantsMjs.EncodingTypes));
parcelHelpers.export(exports, "Errors", ()=>(0, _constantsMjs.Errors));
parcelHelpers.export(exports, "GrantType", ()=>(0, _constantsMjs.GrantType));
parcelHelpers.export(exports, "HeaderNames", ()=>(0, _constantsMjs.HeaderNames));
parcelHelpers.export(exports, "HttpMethod", ()=>(0, _constantsMjs.HttpMethod));
parcelHelpers.export(exports, "HttpStatus", ()=>(0, _constantsMjs.HttpStatus));
parcelHelpers.export(exports, "JsonWebTokenTypes", ()=>(0, _constantsMjs.JsonWebTokenTypes));
parcelHelpers.export(exports, "OAuthResponseType", ()=>(0, _constantsMjs.OAuthResponseType));
parcelHelpers.export(exports, "OIDC_DEFAULT_SCOPES", ()=>(0, _constantsMjs.OIDC_DEFAULT_SCOPES));
parcelHelpers.export(exports, "ONE_DAY_IN_MS", ()=>(0, _constantsMjs.ONE_DAY_IN_MS));
parcelHelpers.export(exports, "PasswordGrantConstants", ()=>(0, _constantsMjs.PasswordGrantConstants));
parcelHelpers.export(exports, "PersistentCacheKeys", ()=>(0, _constantsMjs.PersistentCacheKeys));
parcelHelpers.export(exports, "PromptValue", ()=>(0, _constantsMjs.PromptValue));
parcelHelpers.export(exports, "ResponseMode", ()=>(0, _constantsMjs.ResponseMode));
parcelHelpers.export(exports, "ServerResponseType", ()=>(0, _constantsMjs.ServerResponseType));
parcelHelpers.export(exports, "THE_FAMILY_ID", ()=>(0, _constantsMjs.THE_FAMILY_ID));
parcelHelpers.export(exports, "ThrottlingConstants", ()=>(0, _constantsMjs.ThrottlingConstants));
parcelHelpers.export(exports, "StringUtils", ()=>(0, _stringUtilsMjs.StringUtils));
parcelHelpers.export(exports, "ProtocolUtils", ()=>(0, _protocolUtilsMjs.ProtocolUtils));
parcelHelpers.export(exports, "ServerTelemetryManager", ()=>(0, _serverTelemetryManagerMjs.ServerTelemetryManager));
parcelHelpers.export(exports, "version", ()=>(0, _packageMetadataMjs.version));
parcelHelpers.export(exports, "invoke", ()=>(0, _functionWrappersMjs.invoke));
parcelHelpers.export(exports, "invokeAsync", ()=>(0, _functionWrappersMjs.invokeAsync));
parcelHelpers.export(exports, "JoseHeader", ()=>(0, _joseHeaderMjs.JoseHeader));
parcelHelpers.export(exports, "IntFields", ()=>(0, _performanceEventMjs.IntFields));
parcelHelpers.export(exports, "PerformanceEventStatus", ()=>(0, _performanceEventMjs.PerformanceEventStatus));
parcelHelpers.export(exports, "PerformanceEvents", ()=>(0, _performanceEventMjs.PerformanceEvents));
parcelHelpers.export(exports, "PerformanceClient", ()=>(0, _performanceClientMjs.PerformanceClient));
parcelHelpers.export(exports, "StubPerformanceClient", ()=>(0, _stubPerformanceClientMjs.StubPerformanceClient));
parcelHelpers.export(exports, "PopTokenGenerator", ()=>(0, _popTokenGeneratorMjs.PopTokenGenerator));
parcelHelpers.export(exports, "AuthorizeProtocol", ()=>_authorizeMjs);
parcelHelpers.export(exports, "RequestParameterBuilder", ()=>_requestParameterBuilderMjs);
parcelHelpers.export(exports, "InteractionRequiredAuthErrorCodes", ()=>_interactionRequiredAuthErrorCodesMjs);
parcelHelpers.export(exports, "AuthErrorCodes", ()=>_authErrorCodesMjs);
parcelHelpers.export(exports, "CacheErrorCodes", ()=>_cacheErrorCodesMjs);
parcelHelpers.export(exports, "ClientAuthErrorCodes", ()=>_clientAuthErrorCodesMjs);
parcelHelpers.export(exports, "ClientConfigurationErrorCodes", ()=>_clientConfigurationErrorCodesMjs);
parcelHelpers.export(exports, "AuthToken", ()=>_authTokenMjs);
parcelHelpers.export(exports, "AuthorityFactory", ()=>_authorityFactoryMjs);
parcelHelpers.export(exports, "CacheHelpers", ()=>_cacheHelpersMjs);
parcelHelpers.export(exports, "TimeUtils", ()=>_timeUtilsMjs);
parcelHelpers.export(exports, "UrlUtils", ()=>_urlUtilsMjs);
parcelHelpers.export(exports, "AADServerParamKeys", ()=>_aadserverParamKeysMjs);
var _authorizationCodeClientMjs = require("./client/AuthorizationCodeClient.mjs");
var _refreshTokenClientMjs = require("./client/RefreshTokenClient.mjs");
var _silentFlowClientMjs = require("./client/SilentFlowClient.mjs");
var _baseClientMjs = require("./client/BaseClient.mjs");
var _clientConfigurationMjs = require("./config/ClientConfiguration.mjs");
var _accountInfoMjs = require("./account/AccountInfo.mjs");
var _tokenClaimsMjs = require("./account/TokenClaims.mjs");
var _ccsCredentialMjs = require("./account/CcsCredential.mjs");
var _clientInfoMjs = require("./account/ClientInfo.mjs");
var _authorityMjs = require("./authority/Authority.mjs");
var _authorityOptionsMjs = require("./authority/AuthorityOptions.mjs");
var _authorityTypeMjs = require("./authority/AuthorityType.mjs");
var _protocolModeMjs = require("./authority/ProtocolMode.mjs");
var _cacheManagerMjs = require("./cache/CacheManager.mjs");
var _accountEntityMjs = require("./cache/entities/AccountEntity.mjs");
var _inetworkModuleMjs = require("./network/INetworkModule.mjs");
var _throttlingUtilsMjs = require("./network/ThrottlingUtils.mjs");
var _requestThumbprintMjs = require("./network/RequestThumbprint.mjs");
var _urlStringMjs = require("./url/UrlString.mjs");
var _icryptoMjs = require("./crypto/ICrypto.mjs");
var _authorizeMjs = require("./protocol/Authorize.mjs");
var _requestParameterBuilderMjs = require("./request/RequestParameterBuilder.mjs");
var _responseHandlerMjs = require("./response/ResponseHandler.mjs");
var _scopeSetMjs = require("./request/ScopeSet.mjs");
var _authenticationHeaderParserMjs = require("./request/AuthenticationHeaderParser.mjs");
var _loggerMjs = require("./logger/Logger.mjs");
var _interactionRequiredAuthErrorMjs = require("./error/InteractionRequiredAuthError.mjs");
var _interactionRequiredAuthErrorCodesMjs = require("./error/InteractionRequiredAuthErrorCodes.mjs");
var _authErrorMjs = require("./error/AuthError.mjs");
var _authErrorCodesMjs = require("./error/AuthErrorCodes.mjs");
var _serverErrorMjs = require("./error/ServerError.mjs");
var _networkErrorMjs = require("./error/NetworkError.mjs");
var _cacheErrorMjs = require("./error/CacheError.mjs");
var _cacheErrorCodesMjs = require("./error/CacheErrorCodes.mjs");
var _clientAuthErrorMjs = require("./error/ClientAuthError.mjs");
var _clientAuthErrorCodesMjs = require("./error/ClientAuthErrorCodes.mjs");
var _clientConfigurationErrorMjs = require("./error/ClientConfigurationError.mjs");
var _clientConfigurationErrorCodesMjs = require("./error/ClientConfigurationErrorCodes.mjs");
var _constantsMjs = require("./utils/Constants.mjs");
var _stringUtilsMjs = require("./utils/StringUtils.mjs");
var _protocolUtilsMjs = require("./utils/ProtocolUtils.mjs");
var _serverTelemetryManagerMjs = require("./telemetry/server/ServerTelemetryManager.mjs");
var _packageMetadataMjs = require("./packageMetadata.mjs");
var _functionWrappersMjs = require("./utils/FunctionWrappers.mjs");
var _authTokenMjs = require("./account/AuthToken.mjs");
var _authorityFactoryMjs = require("./authority/AuthorityFactory.mjs");
var _cacheHelpersMjs = require("./cache/utils/CacheHelpers.mjs");
var _timeUtilsMjs = require("./utils/TimeUtils.mjs");
var _urlUtilsMjs = require("./utils/UrlUtils.mjs");
var _aadserverParamKeysMjs = require("./constants/AADServerParamKeys.mjs");
var _joseHeaderMjs = require("./crypto/JoseHeader.mjs");
var _performanceEventMjs = require("./telemetry/performance/PerformanceEvent.mjs");
var _performanceClientMjs = require("./telemetry/performance/PerformanceClient.mjs");
var _stubPerformanceClientMjs = require("./telemetry/performance/StubPerformanceClient.mjs");
var _popTokenGeneratorMjs = require("./crypto/PopTokenGenerator.mjs");
'use strict';

},{"./client/AuthorizationCodeClient.mjs":"4jNdw","./client/RefreshTokenClient.mjs":"bvDRJ","./client/SilentFlowClient.mjs":"94ao6","./client/BaseClient.mjs":false,"./config/ClientConfiguration.mjs":"gxyQP","./account/AccountInfo.mjs":"1dIYU","./account/TokenClaims.mjs":"67kUI","./account/CcsCredential.mjs":"bOumO","./account/ClientInfo.mjs":false,"./authority/Authority.mjs":"aupyF","./authority/AuthorityOptions.mjs":"99vBp","./authority/AuthorityType.mjs":"kfz6w","./authority/ProtocolMode.mjs":"c6YAB","./cache/CacheManager.mjs":"eKq2M","./cache/entities/AccountEntity.mjs":"4Vb6c","./network/INetworkModule.mjs":"3XjRo","./network/ThrottlingUtils.mjs":"ij0vz","./network/RequestThumbprint.mjs":"13rNu","./url/UrlString.mjs":"53sIq","./crypto/ICrypto.mjs":"kYQ47","./protocol/Authorize.mjs":"hx66D","./request/RequestParameterBuilder.mjs":"cR5CB","./response/ResponseHandler.mjs":"hx3Eo","./request/ScopeSet.mjs":"hiTkN","./request/AuthenticationHeaderParser.mjs":false,"./logger/Logger.mjs":"bmFqN","./error/InteractionRequiredAuthError.mjs":"eIkri","./error/InteractionRequiredAuthErrorCodes.mjs":"7poaD","./error/AuthError.mjs":"jXpbF","./error/AuthErrorCodes.mjs":"1SsYn","./error/ServerError.mjs":"av7Z1","./error/NetworkError.mjs":"hgdfy","./error/CacheError.mjs":"37jD6","./error/CacheErrorCodes.mjs":"ixPvB","./error/ClientAuthError.mjs":"dZZgC","./error/ClientAuthErrorCodes.mjs":"dhVcy","./error/ClientConfigurationError.mjs":"byrV8","./error/ClientConfigurationErrorCodes.mjs":"7O3No","./utils/Constants.mjs":"81leO","./utils/StringUtils.mjs":"7KUNp","./utils/ProtocolUtils.mjs":"jpqhk","./telemetry/server/ServerTelemetryManager.mjs":"3lsNW","./packageMetadata.mjs":false,"./utils/FunctionWrappers.mjs":"cnW9d","./account/AuthToken.mjs":"cbmml","./authority/AuthorityFactory.mjs":"i485B","./cache/utils/CacheHelpers.mjs":"gAz9k","./utils/TimeUtils.mjs":"8XXMp","./utils/UrlUtils.mjs":"cbBNR","./constants/AADServerParamKeys.mjs":"kwWCE","./crypto/JoseHeader.mjs":"6c9ll","./telemetry/performance/PerformanceEvent.mjs":"dxcJF","./telemetry/performance/PerformanceClient.mjs":false,"./telemetry/performance/StubPerformanceClient.mjs":"lzGPv","./crypto/PopTokenGenerator.mjs":"8yOzA","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4jNdw":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthorizationCodeClient", ()=>AuthorizationCodeClient);
var _baseClientMjs = require("./BaseClient.mjs");
var _requestParameterBuilderMjs = require("../request/RequestParameterBuilder.mjs");
var _urlUtilsMjs = require("../utils/UrlUtils.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _aadserverParamKeysMjs = require("../constants/AADServerParamKeys.mjs");
var _clientConfigurationMjs = require("../config/ClientConfiguration.mjs");
var _responseHandlerMjs = require("../response/ResponseHandler.mjs");
var _stringUtilsMjs = require("../utils/StringUtils.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _urlStringMjs = require("../url/UrlString.mjs");
var _popTokenGeneratorMjs = require("../crypto/PopTokenGenerator.mjs");
var _timeUtilsMjs = require("../utils/TimeUtils.mjs");
var _clientInfoMjs = require("../account/ClientInfo.mjs");
var _ccsCredentialMjs = require("../account/CcsCredential.mjs");
var _clientConfigurationErrorMjs = require("../error/ClientConfigurationError.mjs");
var _performanceEventMjs = require("../telemetry/performance/PerformanceEvent.mjs");
var _functionWrappersMjs = require("../utils/FunctionWrappers.mjs");
var _clientAssertionUtilsMjs = require("../utils/ClientAssertionUtils.mjs");
var _requestThumbprintMjs = require("../network/RequestThumbprint.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
var _clientConfigurationErrorCodesMjs = require("../error/ClientConfigurationErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Oauth2.0 Authorization Code client
 * @internal
 */ class AuthorizationCodeClient extends (0, _baseClientMjs.BaseClient) {
    constructor(configuration, performanceClient){
        super(configuration, performanceClient);
        // Flag to indicate if client is for hybrid spa auth code redemption
        this.includeRedirectUri = true;
        this.oidcDefaultScopes = this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;
    }
    /**
     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the
     * authorization_code_grant
     * @param request
     */ async acquireToken(request, authCodePayload) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).AuthClientAcquireToken, request.correlationId);
        if (!request.code) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.requestCannotBeMade));
        const reqTimestamp = (0, _timeUtilsMjs.nowSeconds)();
        const response = await (0, _functionWrappersMjs.invokeAsync)(this.executeTokenRequest.bind(this), (0, _performanceEventMjs.PerformanceEvents).AuthClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(this.authority, request);
        // Retrieve requestId from response headers
        const requestId = response.headers?.[(0, _constantsMjs.HeaderNames).X_MS_REQUEST_ID];
        const responseHandler = new (0, _responseHandlerMjs.ResponseHandler)(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);
        // Validate response. This function throws a server error if an error is returned by the server.
        responseHandler.validateTokenResponse(response.body);
        return (0, _functionWrappersMjs.invokeAsync)(responseHandler.handleServerTokenResponse.bind(responseHandler), (0, _performanceEventMjs.PerformanceEvents).HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);
    }
    /**
     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param authorityUri
     */ getLogoutUri(logoutRequest) {
        // Throw error if logoutRequest is null/undefined
        if (!logoutRequest) throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.logoutRequestEmpty));
        const queryString = this.createLogoutUrlQueryString(logoutRequest);
        // Construct logout URI
        return (0, _urlStringMjs.UrlString).appendQueryString(this.authority.endSessionEndpoint, queryString);
    }
    /**
     * Executes POST request to token endpoint
     * @param authority
     * @param request
     */ async executeTokenRequest(authority, request) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).AuthClientExecuteTokenRequest, request.correlationId);
        const queryParametersString = this.createTokenQueryParameters(request);
        const endpoint = (0, _urlStringMjs.UrlString).appendQueryString(authority.tokenEndpoint, queryParametersString);
        const requestBody = await (0, _functionWrappersMjs.invokeAsync)(this.createTokenRequestBody.bind(this), (0, _performanceEventMjs.PerformanceEvents).AuthClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);
        let ccsCredential = undefined;
        if (request.clientInfo) try {
            const clientInfo = (0, _clientInfoMjs.buildClientInfo)(request.clientInfo, this.cryptoUtils.base64Decode);
            ccsCredential = {
                credential: `${clientInfo.uid}${(0, _constantsMjs.Separators).CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,
                type: (0, _ccsCredentialMjs.CcsCredentialType).HOME_ACCOUNT_ID
            };
        } catch (e) {
            this.logger.verbose("Could not parse client info for CCS Header: " + e);
        }
        const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);
        const thumbprint = (0, _requestThumbprintMjs.getRequestThumbprint)(this.config.authOptions.clientId, request);
        return (0, _functionWrappersMjs.invokeAsync)(this.executePostToTokenEndpoint.bind(this), (0, _performanceEventMjs.PerformanceEvents).AuthorizationCodeClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, (0, _performanceEventMjs.PerformanceEvents).AuthorizationCodeClientExecutePostToTokenEndpoint);
    }
    /**
     * Generates a map for all the params to be sent to the service
     * @param request
     */ async createTokenRequestBody(request) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).AuthClientCreateTokenRequestBody, request.correlationId);
        const parameters = new Map();
        (0, _requestParameterBuilderMjs.addClientId)(parameters, request.embeddedClientId || request.tokenBodyParameters?.[0, _aadserverParamKeysMjs.CLIENT_ID] || this.config.authOptions.clientId);
        /*
         * For hybrid spa flow, there will be a code but no verifier
         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI
         */ if (!this.includeRedirectUri) {
            // Just validate
            if (!request.redirectUri) throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.redirectUriEmpty));
        } else // Validate and include redirect uri
        (0, _requestParameterBuilderMjs.addRedirectUri)(parameters, request.redirectUri);
        // Add scope array, parameter builder will add default scopes and dedupe
        (0, _requestParameterBuilderMjs.addScopes)(parameters, request.scopes, true, this.oidcDefaultScopes);
        // add code: user set, not validated
        (0, _requestParameterBuilderMjs.addAuthorizationCode)(parameters, request.code);
        // Add library metadata
        (0, _requestParameterBuilderMjs.addLibraryInfo)(parameters, this.config.libraryInfo);
        (0, _requestParameterBuilderMjs.addApplicationTelemetry)(parameters, this.config.telemetry.application);
        (0, _requestParameterBuilderMjs.addThrottling)(parameters);
        if (this.serverTelemetryManager && !(0, _clientConfigurationMjs.isOidcProtocolMode)(this.config)) (0, _requestParameterBuilderMjs.addServerTelemetry)(parameters, this.serverTelemetryManager);
        // add code_verifier if passed
        if (request.codeVerifier) (0, _requestParameterBuilderMjs.addCodeVerifier)(parameters, request.codeVerifier);
        if (this.config.clientCredentials.clientSecret) (0, _requestParameterBuilderMjs.addClientSecret)(parameters, this.config.clientCredentials.clientSecret);
        if (this.config.clientCredentials.clientAssertion) {
            const clientAssertion = this.config.clientCredentials.clientAssertion;
            (0, _requestParameterBuilderMjs.addClientAssertion)(parameters, await (0, _clientAssertionUtilsMjs.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));
            (0, _requestParameterBuilderMjs.addClientAssertionType)(parameters, clientAssertion.assertionType);
        }
        (0, _requestParameterBuilderMjs.addGrantType)(parameters, (0, _constantsMjs.GrantType).AUTHORIZATION_CODE_GRANT);
        (0, _requestParameterBuilderMjs.addClientInfo)(parameters);
        if (request.authenticationScheme === (0, _constantsMjs.AuthenticationScheme).POP) {
            const popTokenGenerator = new (0, _popTokenGeneratorMjs.PopTokenGenerator)(this.cryptoUtils, this.performanceClient);
            let reqCnfData;
            if (!request.popKid) {
                const generatedReqCnfData = await (0, _functionWrappersMjs.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), (0, _performanceEventMjs.PerformanceEvents).PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);
                reqCnfData = generatedReqCnfData.reqCnfString;
            } else reqCnfData = this.cryptoUtils.encodeKid(request.popKid);
            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)
            (0, _requestParameterBuilderMjs.addPopToken)(parameters, reqCnfData);
        } else if (request.authenticationScheme === (0, _constantsMjs.AuthenticationScheme).SSH) {
            if (request.sshJwk) (0, _requestParameterBuilderMjs.addSshJwk)(parameters, request.sshJwk);
            else throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.missingSshJwk));
        }
        if (!(0, _stringUtilsMjs.StringUtils).isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) (0, _requestParameterBuilderMjs.addClaims)(parameters, request.claims, this.config.authOptions.clientCapabilities);
        let ccsCred = undefined;
        if (request.clientInfo) try {
            const clientInfo = (0, _clientInfoMjs.buildClientInfo)(request.clientInfo, this.cryptoUtils.base64Decode);
            ccsCred = {
                credential: `${clientInfo.uid}${(0, _constantsMjs.Separators).CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,
                type: (0, _ccsCredentialMjs.CcsCredentialType).HOME_ACCOUNT_ID
            };
        } catch (e) {
            this.logger.verbose("Could not parse client info for CCS Header: " + e);
        }
        else ccsCred = request.ccsCredential;
        // Adds these as parameters in the request instead of headers to prevent CORS preflight request
        if (this.config.systemOptions.preventCorsPreflight && ccsCred) switch(ccsCred.type){
            case (0, _ccsCredentialMjs.CcsCredentialType).HOME_ACCOUNT_ID:
                try {
                    const clientInfo = (0, _clientInfoMjs.buildClientInfoFromHomeAccountId)(ccsCred.credential);
                    (0, _requestParameterBuilderMjs.addCcsOid)(parameters, clientInfo);
                } catch (e) {
                    this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                }
                break;
            case (0, _ccsCredentialMjs.CcsCredentialType).UPN:
                (0, _requestParameterBuilderMjs.addCcsUpn)(parameters, ccsCred.credential);
                break;
        }
        if (request.embeddedClientId) (0, _requestParameterBuilderMjs.addBrokerParameters)(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);
        if (request.tokenBodyParameters) (0, _requestParameterBuilderMjs.addExtraQueryParameters)(parameters, request.tokenBodyParameters);
        // Add hybrid spa parameters if not already provided
        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[0, _aadserverParamKeysMjs.RETURN_SPA_CODE])) (0, _requestParameterBuilderMjs.addExtraQueryParameters)(parameters, {
            [(0, _aadserverParamKeysMjs.RETURN_SPA_CODE)]: "1"
        });
        (0, _requestParameterBuilderMjs.instrumentBrokerParams)(parameters, request.correlationId, this.performanceClient);
        return (0, _urlUtilsMjs.mapToQueryString)(parameters);
    }
    /**
     * This API validates the `EndSessionRequest` and creates a URL
     * @param request
     */ createLogoutUrlQueryString(request) {
        const parameters = new Map();
        if (request.postLogoutRedirectUri) (0, _requestParameterBuilderMjs.addPostLogoutRedirectUri)(parameters, request.postLogoutRedirectUri);
        if (request.correlationId) (0, _requestParameterBuilderMjs.addCorrelationId)(parameters, request.correlationId);
        if (request.idTokenHint) (0, _requestParameterBuilderMjs.addIdTokenHint)(parameters, request.idTokenHint);
        if (request.state) (0, _requestParameterBuilderMjs.addState)(parameters, request.state);
        if (request.logoutHint) (0, _requestParameterBuilderMjs.addLogoutHint)(parameters, request.logoutHint);
        if (request.extraQueryParameters) (0, _requestParameterBuilderMjs.addExtraQueryParameters)(parameters, request.extraQueryParameters);
        if (this.config.authOptions.instanceAware) (0, _requestParameterBuilderMjs.addInstanceAware)(parameters);
        return (0, _urlUtilsMjs.mapToQueryString)(parameters, this.config.authOptions.encodeExtraQueryParams, request.extraQueryParameters);
    }
}

},{"./BaseClient.mjs":"hrViH","../request/RequestParameterBuilder.mjs":"cR5CB","../utils/UrlUtils.mjs":"cbBNR","../utils/Constants.mjs":"81leO","../constants/AADServerParamKeys.mjs":"kwWCE","../config/ClientConfiguration.mjs":"gxyQP","../response/ResponseHandler.mjs":"hx3Eo","../utils/StringUtils.mjs":"7KUNp","../error/ClientAuthError.mjs":"dZZgC","../url/UrlString.mjs":"53sIq","../crypto/PopTokenGenerator.mjs":"8yOzA","../utils/TimeUtils.mjs":"8XXMp","../account/ClientInfo.mjs":"2DIEg","../account/CcsCredential.mjs":"bOumO","../error/ClientConfigurationError.mjs":"byrV8","../telemetry/performance/PerformanceEvent.mjs":"dxcJF","../utils/FunctionWrappers.mjs":"cnW9d","../utils/ClientAssertionUtils.mjs":"8tHBi","../network/RequestThumbprint.mjs":"13rNu","../error/ClientAuthErrorCodes.mjs":"dhVcy","../error/ClientConfigurationErrorCodes.mjs":"7O3No","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"hrViH":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseClient", ()=>BaseClient);
var _clientConfigurationMjs = require("../config/ClientConfiguration.mjs");
var _loggerMjs = require("../logger/Logger.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _packageMetadataMjs = require("../packageMetadata.mjs");
var _ccsCredentialMjs = require("../account/CcsCredential.mjs");
var _clientInfoMjs = require("../account/ClientInfo.mjs");
var _requestParameterBuilderMjs = require("../request/RequestParameterBuilder.mjs");
var _urlUtilsMjs = require("../utils/UrlUtils.mjs");
var _authorityFactoryMjs = require("../authority/AuthorityFactory.mjs");
var _performanceEventMjs = require("../telemetry/performance/PerformanceEvent.mjs");
var _throttlingUtilsMjs = require("../network/ThrottlingUtils.mjs");
var _authErrorMjs = require("../error/AuthError.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _networkErrorMjs = require("../error/NetworkError.mjs");
var _functionWrappersMjs = require("../utils/FunctionWrappers.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.
 * @internal
 */ class BaseClient {
    constructor(configuration, performanceClient){
        // Set the configuration
        this.config = (0, _clientConfigurationMjs.buildClientConfiguration)(configuration);
        // Initialize the logger
        this.logger = new (0, _loggerMjs.Logger)(this.config.loggerOptions, (0, _packageMetadataMjs.name), (0, _packageMetadataMjs.version));
        // Initialize crypto
        this.cryptoUtils = this.config.cryptoInterface;
        // Initialize storage interface
        this.cacheManager = this.config.storageInterface;
        // Set the network interface
        this.networkClient = this.config.networkInterface;
        // Set TelemetryManager
        this.serverTelemetryManager = this.config.serverTelemetryManager;
        // set Authority
        this.authority = this.config.authOptions.authority;
        // set performance telemetry client
        this.performanceClient = performanceClient;
    }
    /**
     * Creates default headers for requests to token endpoint
     */ createTokenRequestHeaders(ccsCred) {
        const headers = {};
        headers[(0, _constantsMjs.HeaderNames).CONTENT_TYPE] = (0, _constantsMjs.Constants).URL_FORM_CONTENT_TYPE;
        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) switch(ccsCred.type){
            case (0, _ccsCredentialMjs.CcsCredentialType).HOME_ACCOUNT_ID:
                try {
                    const clientInfo = (0, _clientInfoMjs.buildClientInfoFromHomeAccountId)(ccsCred.credential);
                    headers[(0, _constantsMjs.HeaderNames).CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;
                } catch (e) {
                    this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                }
                break;
            case (0, _ccsCredentialMjs.CcsCredentialType).UPN:
                headers[(0, _constantsMjs.HeaderNames).CCS_HEADER] = `UPN: ${ccsCred.credential}`;
                break;
        }
        return headers;
    }
    /**
     * Http post to token endpoint
     * @param tokenEndpoint
     * @param queryString
     * @param headers
     * @param thumbprint
     */ async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {
        if (queuedEvent) this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);
        const response = await this.sendPostRequest(thumbprint, tokenEndpoint, {
            body: queryString,
            headers: headers
        }, correlationId);
        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) // Telemetry data successfully logged by server, clear Telemetry cache
        this.config.serverTelemetryManager.clearTelemetryCache();
        return response;
    }
    /**
     * Wraps sendPostRequestAsync with necessary preflight and postflight logic
     * @param thumbprint - Request thumbprint for throttling
     * @param tokenEndpoint - Endpoint to make the POST to
     * @param options - Body and Headers to include on the POST request
     * @param correlationId - CorrelationId for telemetry
     */ async sendPostRequest(thumbprint, tokenEndpoint, options, correlationId) {
        (0, _throttlingUtilsMjs.ThrottlingUtils).preProcess(this.cacheManager, thumbprint, correlationId);
        let response;
        try {
            response = await (0, _functionWrappersMjs.invokeAsync)(this.networkClient.sendPostRequestAsync.bind(this.networkClient), (0, _performanceEventMjs.PerformanceEvents).NetworkClientSendPostRequestAsync, this.logger, this.performanceClient, correlationId)(tokenEndpoint, options);
            const responseHeaders = response.headers || {};
            this.performanceClient?.addFields({
                refreshTokenSize: response.body.refresh_token?.length || 0,
                httpVerToken: responseHeaders[(0, _constantsMjs.HeaderNames).X_MS_HTTP_VERSION] || "",
                requestId: responseHeaders[(0, _constantsMjs.HeaderNames).X_MS_REQUEST_ID] || ""
            }, correlationId);
        } catch (e) {
            if (e instanceof (0, _networkErrorMjs.NetworkError)) {
                const responseHeaders = e.responseHeaders;
                if (responseHeaders) this.performanceClient?.addFields({
                    httpVerToken: responseHeaders[(0, _constantsMjs.HeaderNames).X_MS_HTTP_VERSION] || "",
                    requestId: responseHeaders[(0, _constantsMjs.HeaderNames).X_MS_REQUEST_ID] || "",
                    contentTypeHeader: responseHeaders[(0, _constantsMjs.HeaderNames).CONTENT_TYPE] || undefined,
                    contentLengthHeader: responseHeaders[(0, _constantsMjs.HeaderNames).CONTENT_LENGTH] || undefined,
                    httpStatus: e.httpStatus
                }, correlationId);
                throw e.error;
            }
            if (e instanceof (0, _authErrorMjs.AuthError)) throw e;
            else throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.networkError));
        }
        (0, _throttlingUtilsMjs.ThrottlingUtils).postProcess(this.cacheManager, thumbprint, response, correlationId);
        return response;
    }
    /**
     * Updates the authority object of the client. Endpoint discovery must be completed.
     * @param updatedAuthority
     */ async updateAuthority(cloudInstanceHostname, correlationId) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).UpdateTokenEndpointAuthority, correlationId);
        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;
        const cloudInstanceAuthority = await (0, _authorityFactoryMjs.createDiscoveredInstance)(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, correlationId, this.performanceClient);
        this.authority = cloudInstanceAuthority;
    }
    /**
     * Creates query string for the /token request
     * @param request
     */ createTokenQueryParameters(request) {
        const parameters = new Map();
        if (request.embeddedClientId) (0, _requestParameterBuilderMjs.addBrokerParameters)(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);
        if (request.tokenQueryParameters) (0, _requestParameterBuilderMjs.addExtraQueryParameters)(parameters, request.tokenQueryParameters);
        (0, _requestParameterBuilderMjs.addCorrelationId)(parameters, request.correlationId);
        (0, _requestParameterBuilderMjs.instrumentBrokerParams)(parameters, request.correlationId, this.performanceClient);
        return (0, _urlUtilsMjs.mapToQueryString)(parameters);
    }
}

},{"../config/ClientConfiguration.mjs":"gxyQP","../logger/Logger.mjs":"bmFqN","../utils/Constants.mjs":"81leO","../packageMetadata.mjs":"1CjrA","../account/CcsCredential.mjs":"bOumO","../account/ClientInfo.mjs":"2DIEg","../request/RequestParameterBuilder.mjs":"cR5CB","../utils/UrlUtils.mjs":"cbBNR","../authority/AuthorityFactory.mjs":"i485B","../telemetry/performance/PerformanceEvent.mjs":"dxcJF","../network/ThrottlingUtils.mjs":"ij0vz","../error/AuthError.mjs":"jXpbF","../error/ClientAuthError.mjs":"dZZgC","../error/NetworkError.mjs":"hgdfy","../utils/FunctionWrappers.mjs":"cnW9d","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"gxyQP":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_SYSTEM_OPTIONS", ()=>DEFAULT_SYSTEM_OPTIONS);
parcelHelpers.export(exports, "buildClientConfiguration", ()=>buildClientConfiguration);
parcelHelpers.export(exports, "isOidcProtocolMode", ()=>isOidcProtocolMode);
var _icryptoMjs = require("../crypto/ICrypto.mjs");
var _loggerMjs = require("../logger/Logger.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _packageMetadataMjs = require("../packageMetadata.mjs");
var _authorityOptionsMjs = require("../authority/AuthorityOptions.mjs");
var _cacheManagerMjs = require("../cache/CacheManager.mjs");
var _protocolModeMjs = require("../authority/ProtocolMode.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _stubPerformanceClientMjs = require("../telemetry/performance/StubPerformanceClient.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const DEFAULT_SYSTEM_OPTIONS = {
    tokenRenewalOffsetSeconds: (0, _constantsMjs.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC),
    preventCorsPreflight: false
};
const DEFAULT_LOGGER_IMPLEMENTATION = {
    loggerCallback: ()=>{
    // allow users to not set loggerCallback
    },
    piiLoggingEnabled: false,
    logLevel: (0, _loggerMjs.LogLevel).Info,
    correlationId: (0, _constantsMjs.Constants).EMPTY_STRING
};
const DEFAULT_CACHE_OPTIONS = {
    claimsBasedCachingEnabled: false
};
const DEFAULT_NETWORK_IMPLEMENTATION = {
    async sendGetRequestAsync () {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    },
    async sendPostRequestAsync () {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
};
const DEFAULT_LIBRARY_INFO = {
    sku: (0, _constantsMjs.Constants).SKU,
    version: (0, _packageMetadataMjs.version),
    cpu: (0, _constantsMjs.Constants).EMPTY_STRING,
    os: (0, _constantsMjs.Constants).EMPTY_STRING
};
const DEFAULT_CLIENT_CREDENTIALS = {
    clientSecret: (0, _constantsMjs.Constants).EMPTY_STRING,
    clientAssertion: undefined
};
const DEFAULT_AZURE_CLOUD_OPTIONS = {
    azureCloudInstance: (0, _authorityOptionsMjs.AzureCloudInstance).None,
    tenant: `${(0, _constantsMjs.Constants).DEFAULT_COMMON_TENANT}`
};
const DEFAULT_TELEMETRY_OPTIONS = {
    application: {
        appName: "",
        appVersion: ""
    }
};
/**
 * Function that sets the default options when not explicitly configured from app developer
 *
 * @param Configuration
 *
 * @returns Configuration
 */ function buildClientConfiguration({ authOptions: userAuthOptions, systemOptions: userSystemOptions, loggerOptions: userLoggerOption, cacheOptions: userCacheOptions, storageInterface: storageImplementation, networkInterface: networkImplementation, cryptoInterface: cryptoImplementation, clientCredentials: clientCredentials, libraryInfo: libraryInfo, telemetry: telemetry, serverTelemetryManager: serverTelemetryManager, persistencePlugin: persistencePlugin, serializableCache: serializableCache }) {
    const loggerOptions = {
        ...DEFAULT_LOGGER_IMPLEMENTATION,
        ...userLoggerOption
    };
    return {
        authOptions: buildAuthOptions(userAuthOptions),
        systemOptions: {
            ...DEFAULT_SYSTEM_OPTIONS,
            ...userSystemOptions
        },
        loggerOptions: loggerOptions,
        cacheOptions: {
            ...DEFAULT_CACHE_OPTIONS,
            ...userCacheOptions
        },
        storageInterface: storageImplementation || new (0, _cacheManagerMjs.DefaultStorageClass)(userAuthOptions.clientId, (0, _icryptoMjs.DEFAULT_CRYPTO_IMPLEMENTATION), new (0, _loggerMjs.Logger)(loggerOptions), new (0, _stubPerformanceClientMjs.StubPerformanceClient)()),
        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,
        cryptoInterface: cryptoImplementation || (0, _icryptoMjs.DEFAULT_CRYPTO_IMPLEMENTATION),
        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,
        libraryInfo: {
            ...DEFAULT_LIBRARY_INFO,
            ...libraryInfo
        },
        telemetry: {
            ...DEFAULT_TELEMETRY_OPTIONS,
            ...telemetry
        },
        serverTelemetryManager: serverTelemetryManager || null,
        persistencePlugin: persistencePlugin || null,
        serializableCache: serializableCache || null
    };
}
/**
 * Construct authoptions from the client and platform passed values
 * @param authOptions
 */ function buildAuthOptions(authOptions) {
    return {
        clientCapabilities: [],
        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,
        skipAuthorityMetadataCache: false,
        instanceAware: false,
        encodeExtraQueryParams: false,
        ...authOptions
    };
}
/**
 * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise
 * @param ClientConfiguration
 */ function isOidcProtocolMode(config) {
    return config.authOptions.authority.options.protocolMode === (0, _protocolModeMjs.ProtocolMode).OIDC;
}

},{"../crypto/ICrypto.mjs":"kYQ47","../logger/Logger.mjs":"bmFqN","../utils/Constants.mjs":"81leO","../packageMetadata.mjs":"1CjrA","../authority/AuthorityOptions.mjs":"99vBp","../cache/CacheManager.mjs":"eKq2M","../authority/ProtocolMode.mjs":"c6YAB","../error/ClientAuthError.mjs":"dZZgC","../telemetry/performance/StubPerformanceClient.mjs":"lzGPv","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"kYQ47":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_CRYPTO_IMPLEMENTATION", ()=>DEFAULT_CRYPTO_IMPLEMENTATION);
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const DEFAULT_CRYPTO_IMPLEMENTATION = {
    createNewGuid: ()=>{
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    },
    base64Decode: ()=>{
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    },
    base64Encode: ()=>{
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    },
    base64UrlEncode: ()=>{
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    },
    encodeKid: ()=>{
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    },
    async getPublicKeyThumbprint () {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    },
    async removeTokenBindingKey () {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    },
    async clearKeystore () {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    },
    async signJwt () {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    },
    async hashString () {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
};

},{"../error/ClientAuthError.mjs":"dZZgC","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"dZZgC":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientAuthErrorCodes", ()=>_clientAuthErrorCodesMjs);
parcelHelpers.export(exports, "ClientAuthError", ()=>ClientAuthError);
parcelHelpers.export(exports, "ClientAuthErrorMessage", ()=>ClientAuthErrorMessage);
parcelHelpers.export(exports, "ClientAuthErrorMessages", ()=>ClientAuthErrorMessages);
parcelHelpers.export(exports, "createClientAuthError", ()=>createClientAuthError);
var _authErrorMjs = require("./AuthError.mjs");
var _clientAuthErrorCodesMjs = require("./ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * ClientAuthErrorMessage class containing string constants used by error codes and messages.
 */ const ClientAuthErrorMessages = {
    [(0, _clientAuthErrorCodesMjs.clientInfoDecodingError)]: "The client info could not be parsed/decoded correctly",
    [(0, _clientAuthErrorCodesMjs.clientInfoEmptyError)]: "The client info was empty",
    [(0, _clientAuthErrorCodesMjs.tokenParsingError)]: "Token cannot be parsed",
    [(0, _clientAuthErrorCodesMjs.nullOrEmptyToken)]: "The token is null or empty",
    [(0, _clientAuthErrorCodesMjs.endpointResolutionError)]: "Endpoints cannot be resolved",
    [(0, _clientAuthErrorCodesMjs.networkError)]: "Network request failed",
    [(0, _clientAuthErrorCodesMjs.openIdConfigError)]: "Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.",
    [(0, _clientAuthErrorCodesMjs.hashNotDeserialized)]: "The hash parameters could not be deserialized",
    [(0, _clientAuthErrorCodesMjs.invalidState)]: "State was not the expected format",
    [(0, _clientAuthErrorCodesMjs.stateMismatch)]: "State mismatch error",
    [(0, _clientAuthErrorCodesMjs.stateNotFound)]: "State not found",
    [(0, _clientAuthErrorCodesMjs.nonceMismatch)]: "Nonce mismatch error",
    [(0, _clientAuthErrorCodesMjs.authTimeNotFound)]: "Max Age was requested and the ID token is missing the auth_time variable. auth_time is an optional claim and is not enabled by default - it must be enabled. See https://aka.ms/msaljs/optional-claims for more information.",
    [(0, _clientAuthErrorCodesMjs.maxAgeTranspired)]: "Max Age is set to 0, or too much time has elapsed since the last end-user authentication.",
    [(0, _clientAuthErrorCodesMjs.multipleMatchingTokens)]: "The cache contains multiple tokens satisfying the requirements. Call AcquireToken again providing more requirements such as authority or account.",
    [(0, _clientAuthErrorCodesMjs.multipleMatchingAccounts)]: "The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account",
    [(0, _clientAuthErrorCodesMjs.multipleMatchingAppMetadata)]: "The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata",
    [(0, _clientAuthErrorCodesMjs.requestCannotBeMade)]: "Token request cannot be made without authorization code or refresh token.",
    [(0, _clientAuthErrorCodesMjs.cannotRemoveEmptyScope)]: "Cannot remove null or empty scope from ScopeSet",
    [(0, _clientAuthErrorCodesMjs.cannotAppendScopeSet)]: "Cannot append ScopeSet",
    [(0, _clientAuthErrorCodesMjs.emptyInputScopeSet)]: "Empty input ScopeSet cannot be processed",
    [(0, _clientAuthErrorCodesMjs.deviceCodePollingCancelled)]: "Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.",
    [(0, _clientAuthErrorCodesMjs.deviceCodeExpired)]: "Device code is expired.",
    [(0, _clientAuthErrorCodesMjs.deviceCodeUnknownError)]: "Device code stopped polling for unknown reasons.",
    [(0, _clientAuthErrorCodesMjs.noAccountInSilentRequest)]: "Please pass an account object, silent flow is not supported without account information",
    [(0, _clientAuthErrorCodesMjs.invalidCacheRecord)]: "Cache record object was null or undefined.",
    [(0, _clientAuthErrorCodesMjs.invalidCacheEnvironment)]: "Invalid environment when attempting to create cache entry",
    [(0, _clientAuthErrorCodesMjs.noAccountFound)]: "No account found in cache for given key.",
    [(0, _clientAuthErrorCodesMjs.noCryptoObject)]: "No crypto object detected.",
    [(0, _clientAuthErrorCodesMjs.unexpectedCredentialType)]: "Unexpected credential type.",
    [(0, _clientAuthErrorCodesMjs.invalidAssertion)]: "Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515",
    [(0, _clientAuthErrorCodesMjs.invalidClientCredential)]: "Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential",
    [(0, _clientAuthErrorCodesMjs.tokenRefreshRequired)]: "Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.",
    [(0, _clientAuthErrorCodesMjs.userTimeoutReached)]: "User defined timeout for device code polling reached",
    [(0, _clientAuthErrorCodesMjs.tokenClaimsCnfRequiredForSignedJwt)]: "Cannot generate a POP jwt if the token_claims are not populated",
    [(0, _clientAuthErrorCodesMjs.authorizationCodeMissingFromServerResponse)]: "Server response does not contain an authorization code to proceed",
    [(0, _clientAuthErrorCodesMjs.bindingKeyNotRemoved)]: "Could not remove the credential's binding key from storage.",
    [(0, _clientAuthErrorCodesMjs.endSessionEndpointNotSupported)]: "The provided authority does not support logout",
    [(0, _clientAuthErrorCodesMjs.keyIdMissing)]: "A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.",
    [(0, _clientAuthErrorCodesMjs.noNetworkConnectivity)]: "No network connectivity. Check your internet connection.",
    [(0, _clientAuthErrorCodesMjs.userCanceled)]: "User cancelled the flow.",
    [(0, _clientAuthErrorCodesMjs.missingTenantIdError)]: "A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.",
    [(0, _clientAuthErrorCodesMjs.methodNotImplemented)]: "This method has not been implemented",
    [(0, _clientAuthErrorCodesMjs.nestedAppAuthBridgeDisabled)]: "The nested app auth bridge is disabled"
};
/**
 * String constants used by error codes and messages.
 * @deprecated Use ClientAuthErrorCodes instead
 */ const ClientAuthErrorMessage = {
    clientInfoDecodingError: {
        code: (0, _clientAuthErrorCodesMjs.clientInfoDecodingError),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.clientInfoDecodingError]
    },
    clientInfoEmptyError: {
        code: (0, _clientAuthErrorCodesMjs.clientInfoEmptyError),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.clientInfoEmptyError]
    },
    tokenParsingError: {
        code: (0, _clientAuthErrorCodesMjs.tokenParsingError),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.tokenParsingError]
    },
    nullOrEmptyToken: {
        code: (0, _clientAuthErrorCodesMjs.nullOrEmptyToken),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.nullOrEmptyToken]
    },
    endpointResolutionError: {
        code: (0, _clientAuthErrorCodesMjs.endpointResolutionError),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.endpointResolutionError]
    },
    networkError: {
        code: (0, _clientAuthErrorCodesMjs.networkError),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.networkError]
    },
    unableToGetOpenidConfigError: {
        code: (0, _clientAuthErrorCodesMjs.openIdConfigError),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.openIdConfigError]
    },
    hashNotDeserialized: {
        code: (0, _clientAuthErrorCodesMjs.hashNotDeserialized),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.hashNotDeserialized]
    },
    invalidStateError: {
        code: (0, _clientAuthErrorCodesMjs.invalidState),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.invalidState]
    },
    stateMismatchError: {
        code: (0, _clientAuthErrorCodesMjs.stateMismatch),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.stateMismatch]
    },
    stateNotFoundError: {
        code: (0, _clientAuthErrorCodesMjs.stateNotFound),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.stateNotFound]
    },
    nonceMismatchError: {
        code: (0, _clientAuthErrorCodesMjs.nonceMismatch),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.nonceMismatch]
    },
    authTimeNotFoundError: {
        code: (0, _clientAuthErrorCodesMjs.authTimeNotFound),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.authTimeNotFound]
    },
    maxAgeTranspired: {
        code: (0, _clientAuthErrorCodesMjs.maxAgeTranspired),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.maxAgeTranspired]
    },
    multipleMatchingTokens: {
        code: (0, _clientAuthErrorCodesMjs.multipleMatchingTokens),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.multipleMatchingTokens]
    },
    multipleMatchingAccounts: {
        code: (0, _clientAuthErrorCodesMjs.multipleMatchingAccounts),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.multipleMatchingAccounts]
    },
    multipleMatchingAppMetadata: {
        code: (0, _clientAuthErrorCodesMjs.multipleMatchingAppMetadata),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.multipleMatchingAppMetadata]
    },
    tokenRequestCannotBeMade: {
        code: (0, _clientAuthErrorCodesMjs.requestCannotBeMade),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.requestCannotBeMade]
    },
    removeEmptyScopeError: {
        code: (0, _clientAuthErrorCodesMjs.cannotRemoveEmptyScope),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.cannotRemoveEmptyScope]
    },
    appendScopeSetError: {
        code: (0, _clientAuthErrorCodesMjs.cannotAppendScopeSet),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.cannotAppendScopeSet]
    },
    emptyInputScopeSetError: {
        code: (0, _clientAuthErrorCodesMjs.emptyInputScopeSet),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.emptyInputScopeSet]
    },
    DeviceCodePollingCancelled: {
        code: (0, _clientAuthErrorCodesMjs.deviceCodePollingCancelled),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.deviceCodePollingCancelled]
    },
    DeviceCodeExpired: {
        code: (0, _clientAuthErrorCodesMjs.deviceCodeExpired),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.deviceCodeExpired]
    },
    DeviceCodeUnknownError: {
        code: (0, _clientAuthErrorCodesMjs.deviceCodeUnknownError),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.deviceCodeUnknownError]
    },
    NoAccountInSilentRequest: {
        code: (0, _clientAuthErrorCodesMjs.noAccountInSilentRequest),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.noAccountInSilentRequest]
    },
    invalidCacheRecord: {
        code: (0, _clientAuthErrorCodesMjs.invalidCacheRecord),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.invalidCacheRecord]
    },
    invalidCacheEnvironment: {
        code: (0, _clientAuthErrorCodesMjs.invalidCacheEnvironment),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.invalidCacheEnvironment]
    },
    noAccountFound: {
        code: (0, _clientAuthErrorCodesMjs.noAccountFound),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.noAccountFound]
    },
    noCryptoObj: {
        code: (0, _clientAuthErrorCodesMjs.noCryptoObject),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.noCryptoObject]
    },
    unexpectedCredentialType: {
        code: (0, _clientAuthErrorCodesMjs.unexpectedCredentialType),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.unexpectedCredentialType]
    },
    invalidAssertion: {
        code: (0, _clientAuthErrorCodesMjs.invalidAssertion),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.invalidAssertion]
    },
    invalidClientCredential: {
        code: (0, _clientAuthErrorCodesMjs.invalidClientCredential),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.invalidClientCredential]
    },
    tokenRefreshRequired: {
        code: (0, _clientAuthErrorCodesMjs.tokenRefreshRequired),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.tokenRefreshRequired]
    },
    userTimeoutReached: {
        code: (0, _clientAuthErrorCodesMjs.userTimeoutReached),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.userTimeoutReached]
    },
    tokenClaimsRequired: {
        code: (0, _clientAuthErrorCodesMjs.tokenClaimsCnfRequiredForSignedJwt),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.tokenClaimsCnfRequiredForSignedJwt]
    },
    noAuthorizationCodeFromServer: {
        code: (0, _clientAuthErrorCodesMjs.authorizationCodeMissingFromServerResponse),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.authorizationCodeMissingFromServerResponse]
    },
    bindingKeyNotRemovedError: {
        code: (0, _clientAuthErrorCodesMjs.bindingKeyNotRemoved),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.bindingKeyNotRemoved]
    },
    logoutNotSupported: {
        code: (0, _clientAuthErrorCodesMjs.endSessionEndpointNotSupported),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.endSessionEndpointNotSupported]
    },
    keyIdMissing: {
        code: (0, _clientAuthErrorCodesMjs.keyIdMissing),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.keyIdMissing]
    },
    noNetworkConnectivity: {
        code: (0, _clientAuthErrorCodesMjs.noNetworkConnectivity),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.noNetworkConnectivity]
    },
    userCanceledError: {
        code: (0, _clientAuthErrorCodesMjs.userCanceled),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.userCanceled]
    },
    missingTenantIdError: {
        code: (0, _clientAuthErrorCodesMjs.missingTenantIdError),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.missingTenantIdError]
    },
    nestedAppAuthBridgeDisabled: {
        code: (0, _clientAuthErrorCodesMjs.nestedAppAuthBridgeDisabled),
        desc: ClientAuthErrorMessages[0, _clientAuthErrorCodesMjs.nestedAppAuthBridgeDisabled]
    }
};
/**
 * Error thrown when there is an error in the client code running on the browser.
 */ class ClientAuthError extends (0, _authErrorMjs.AuthError) {
    constructor(errorCode, additionalMessage){
        super(errorCode, additionalMessage ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}` : ClientAuthErrorMessages[errorCode]);
        this.name = "ClientAuthError";
        Object.setPrototypeOf(this, ClientAuthError.prototype);
    }
}
function createClientAuthError(errorCode, additionalMessage) {
    return new ClientAuthError(errorCode, additionalMessage);
}

},{"./AuthError.mjs":"jXpbF","./ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jXpbF":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthErrorCodes", ()=>_authErrorCodesMjs);
parcelHelpers.export(exports, "AuthError", ()=>AuthError);
parcelHelpers.export(exports, "AuthErrorMessage", ()=>AuthErrorMessage);
parcelHelpers.export(exports, "AuthErrorMessages", ()=>AuthErrorMessages);
parcelHelpers.export(exports, "createAuthError", ()=>createAuthError);
var _constantsMjs = require("../utils/Constants.mjs");
var _authErrorCodesMjs = require("./AuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const AuthErrorMessages = {
    [(0, _authErrorCodesMjs.unexpectedError)]: "Unexpected error in authentication.",
    [(0, _authErrorCodesMjs.postRequestFailed)]: "Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details."
};
/**
 * AuthErrorMessage class containing string constants used by error codes and messages.
 * @deprecated Use AuthErrorCodes instead
 */ const AuthErrorMessage = {
    unexpectedError: {
        code: (0, _authErrorCodesMjs.unexpectedError),
        desc: AuthErrorMessages[0, _authErrorCodesMjs.unexpectedError]
    },
    postRequestFailed: {
        code: (0, _authErrorCodesMjs.postRequestFailed),
        desc: AuthErrorMessages[0, _authErrorCodesMjs.postRequestFailed]
    }
};
/**
 * General error class thrown by the MSAL.js library.
 */ class AuthError extends Error {
    constructor(errorCode, errorMessage, suberror){
        const errorString = errorMessage ? `${errorCode}: ${errorMessage}` : errorCode;
        super(errorString);
        Object.setPrototypeOf(this, AuthError.prototype);
        this.errorCode = errorCode || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.errorMessage = errorMessage || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.subError = suberror || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.name = "AuthError";
    }
    setCorrelationId(correlationId) {
        this.correlationId = correlationId;
    }
}
function createAuthError(code, additionalMessage) {
    return new AuthError(code, additionalMessage ? `${AuthErrorMessages[code]} ${additionalMessage}` : AuthErrorMessages[code]);
}

},{"../utils/Constants.mjs":"81leO","./AuthErrorCodes.mjs":"1SsYn","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"81leO":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AADAuthorityConstants", ()=>AADAuthorityConstants);
parcelHelpers.export(exports, "APP_METADATA", ()=>APP_METADATA);
parcelHelpers.export(exports, "AUTHORITY_METADATA_CONSTANTS", ()=>AUTHORITY_METADATA_CONSTANTS);
parcelHelpers.export(exports, "AuthenticationScheme", ()=>AuthenticationScheme);
parcelHelpers.export(exports, "AuthorityMetadataSource", ()=>AuthorityMetadataSource);
parcelHelpers.export(exports, "CLIENT_INFO", ()=>CLIENT_INFO);
parcelHelpers.export(exports, "CacheAccountType", ()=>CacheAccountType);
parcelHelpers.export(exports, "CacheOutcome", ()=>CacheOutcome);
parcelHelpers.export(exports, "CacheType", ()=>CacheType);
parcelHelpers.export(exports, "ClaimsRequestKeys", ()=>ClaimsRequestKeys);
parcelHelpers.export(exports, "CodeChallengeMethodValues", ()=>CodeChallengeMethodValues);
parcelHelpers.export(exports, "Constants", ()=>Constants);
parcelHelpers.export(exports, "CredentialType", ()=>CredentialType);
parcelHelpers.export(exports, "DEFAULT_TOKEN_RENEWAL_OFFSET_SEC", ()=>DEFAULT_TOKEN_RENEWAL_OFFSET_SEC);
parcelHelpers.export(exports, "EncodingTypes", ()=>EncodingTypes);
parcelHelpers.export(exports, "Errors", ()=>Errors);
parcelHelpers.export(exports, "GrantType", ()=>GrantType);
parcelHelpers.export(exports, "HeaderNames", ()=>HeaderNames);
parcelHelpers.export(exports, "HttpMethod", ()=>HttpMethod);
parcelHelpers.export(exports, "HttpStatus", ()=>HttpStatus);
parcelHelpers.export(exports, "JsonWebTokenTypes", ()=>JsonWebTokenTypes);
parcelHelpers.export(exports, "OAuthResponseType", ()=>OAuthResponseType);
parcelHelpers.export(exports, "OIDC_DEFAULT_SCOPES", ()=>OIDC_DEFAULT_SCOPES);
parcelHelpers.export(exports, "OIDC_SCOPES", ()=>OIDC_SCOPES);
parcelHelpers.export(exports, "ONE_DAY_IN_MS", ()=>ONE_DAY_IN_MS);
parcelHelpers.export(exports, "PasswordGrantConstants", ()=>PasswordGrantConstants);
parcelHelpers.export(exports, "PersistentCacheKeys", ()=>PersistentCacheKeys);
parcelHelpers.export(exports, "PromptValue", ()=>PromptValue);
parcelHelpers.export(exports, "RegionDiscoveryOutcomes", ()=>RegionDiscoveryOutcomes);
parcelHelpers.export(exports, "RegionDiscoverySources", ()=>RegionDiscoverySources);
parcelHelpers.export(exports, "ResponseMode", ()=>ResponseMode);
parcelHelpers.export(exports, "SERVER_TELEM_CONSTANTS", ()=>SERVER_TELEM_CONSTANTS);
parcelHelpers.export(exports, "Separators", ()=>Separators);
parcelHelpers.export(exports, "ServerResponseType", ()=>ServerResponseType);
parcelHelpers.export(exports, "THE_FAMILY_ID", ()=>THE_FAMILY_ID);
parcelHelpers.export(exports, "ThrottlingConstants", ()=>ThrottlingConstants);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const Constants = {
    LIBRARY_NAME: "MSAL.JS",
    SKU: "msal.js.common",
    // default authority
    DEFAULT_AUTHORITY: "https://login.microsoftonline.com/common/",
    DEFAULT_AUTHORITY_HOST: "login.microsoftonline.com",
    DEFAULT_COMMON_TENANT: "common",
    // ADFS String
    ADFS: "adfs",
    DSTS: "dstsv2",
    // Default AAD Instance Discovery Endpoint
    AAD_INSTANCE_DISCOVERY_ENDPT: "https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=",
    // CIAM URL
    CIAM_AUTH_URL: ".ciamlogin.com",
    AAD_TENANT_DOMAIN_SUFFIX: ".onmicrosoft.com",
    // Resource delimiter - used for certain cache entries
    RESOURCE_DELIM: "|",
    // Placeholder for non-existent account ids/objects
    NO_ACCOUNT: "NO_ACCOUNT",
    // Claims
    CLAIMS: "claims",
    // Consumer UTID
    CONSUMER_UTID: "9188040d-6c67-4c5b-b112-36a304b66dad",
    // Default scopes
    OPENID_SCOPE: "openid",
    PROFILE_SCOPE: "profile",
    OFFLINE_ACCESS_SCOPE: "offline_access",
    EMAIL_SCOPE: "email",
    CODE_GRANT_TYPE: "authorization_code",
    RT_GRANT_TYPE: "refresh_token",
    S256_CODE_CHALLENGE_METHOD: "S256",
    URL_FORM_CONTENT_TYPE: "application/x-www-form-urlencoded;charset=utf-8",
    AUTHORIZATION_PENDING: "authorization_pending",
    NOT_DEFINED: "not_defined",
    EMPTY_STRING: "",
    NOT_APPLICABLE: "N/A",
    NOT_AVAILABLE: "Not Available",
    FORWARD_SLASH: "/",
    IMDS_ENDPOINT: "http://169.254.169.254/metadata/instance/compute/location",
    IMDS_VERSION: "2020-06-01",
    IMDS_TIMEOUT: 2000,
    AZURE_REGION_AUTO_DISCOVER_FLAG: "TryAutoDetect",
    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: "login.microsoft.com",
    KNOWN_PUBLIC_CLOUDS: [
        "login.microsoftonline.com",
        "login.windows.net",
        "login.microsoft.com",
        "sts.windows.net"
    ],
    SHR_NONCE_VALIDITY: 240,
    INVALID_INSTANCE: "invalid_instance"
};
const HttpStatus = {
    SUCCESS: 200,
    SUCCESS_RANGE_START: 200,
    SUCCESS_RANGE_END: 299,
    REDIRECT: 302,
    CLIENT_ERROR: 400,
    CLIENT_ERROR_RANGE_START: 400,
    BAD_REQUEST: 400,
    UNAUTHORIZED: 401,
    NOT_FOUND: 404,
    REQUEST_TIMEOUT: 408,
    GONE: 410,
    TOO_MANY_REQUESTS: 429,
    CLIENT_ERROR_RANGE_END: 499,
    SERVER_ERROR: 500,
    SERVER_ERROR_RANGE_START: 500,
    SERVICE_UNAVAILABLE: 503,
    GATEWAY_TIMEOUT: 504,
    SERVER_ERROR_RANGE_END: 599,
    MULTI_SIDED_ERROR: 600
};
const HttpMethod = {
    GET: "GET",
    POST: "POST"
};
const OIDC_DEFAULT_SCOPES = [
    Constants.OPENID_SCOPE,
    Constants.PROFILE_SCOPE,
    Constants.OFFLINE_ACCESS_SCOPE
];
const OIDC_SCOPES = [
    ...OIDC_DEFAULT_SCOPES,
    Constants.EMAIL_SCOPE
];
/**
 * Request header names
 */ const HeaderNames = {
    CONTENT_TYPE: "Content-Type",
    CONTENT_LENGTH: "Content-Length",
    RETRY_AFTER: "Retry-After",
    CCS_HEADER: "X-AnchorMailbox",
    WWWAuthenticate: "WWW-Authenticate",
    AuthenticationInfo: "Authentication-Info",
    X_MS_REQUEST_ID: "x-ms-request-id",
    X_MS_HTTP_VERSION: "x-ms-httpver"
};
/**
 * Persistent cache keys MSAL which stay while user is logged in.
 */ const PersistentCacheKeys = {
    ACTIVE_ACCOUNT_FILTERS: "active-account-filters"
};
/**
 * String constants related to AAD Authority
 */ const AADAuthorityConstants = {
    COMMON: "common",
    ORGANIZATIONS: "organizations",
    CONSUMERS: "consumers"
};
/**
 * Claims request keys
 */ const ClaimsRequestKeys = {
    ACCESS_TOKEN: "access_token",
    XMS_CC: "xms_cc"
};
/**
 * we considered making this "enum" in the request instead of string, however it looks like the allowed list of
 * prompt values kept changing over past couple of years. There are some undocumented prompt values for some
 * internal partners too, hence the choice of generic "string" type instead of the "enum"
 */ const PromptValue = {
    LOGIN: "login",
    SELECT_ACCOUNT: "select_account",
    CONSENT: "consent",
    NONE: "none",
    CREATE: "create",
    NO_SESSION: "no_session"
};
/**
 * allowed values for codeVerifier
 */ const CodeChallengeMethodValues = {
    PLAIN: "plain",
    S256: "S256"
};
/**
 * Allowed values for response_type
 */ const OAuthResponseType = {
    CODE: "code",
    IDTOKEN_TOKEN: "id_token token",
    IDTOKEN_TOKEN_REFRESHTOKEN: "id_token token refresh_token"
};
/**
 * allowed values for server response type
 * @deprecated Use ResponseMode instead
 */ const ServerResponseType = {
    QUERY: "query",
    FRAGMENT: "fragment"
};
/**
 * allowed values for response_mode
 */ const ResponseMode = {
    QUERY: "query",
    FRAGMENT: "fragment",
    FORM_POST: "form_post"
};
/**
 * allowed grant_type
 */ const GrantType = {
    IMPLICIT_GRANT: "implicit",
    AUTHORIZATION_CODE_GRANT: "authorization_code",
    CLIENT_CREDENTIALS_GRANT: "client_credentials",
    RESOURCE_OWNER_PASSWORD_GRANT: "password",
    REFRESH_TOKEN_GRANT: "refresh_token",
    DEVICE_CODE_GRANT: "device_code",
    JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
};
/**
 * Account types in Cache
 */ const CacheAccountType = {
    MSSTS_ACCOUNT_TYPE: "MSSTS",
    ADFS_ACCOUNT_TYPE: "ADFS",
    MSAV1_ACCOUNT_TYPE: "MSA",
    GENERIC_ACCOUNT_TYPE: "Generic"
};
/**
 * Separators used in cache
 */ const Separators = {
    CACHE_KEY_SEPARATOR: "-",
    CLIENT_INFO_SEPARATOR: "."
};
/**
 * Credential Type stored in the cache
 */ const CredentialType = {
    ID_TOKEN: "IdToken",
    ACCESS_TOKEN: "AccessToken",
    ACCESS_TOKEN_WITH_AUTH_SCHEME: "AccessToken_With_AuthScheme",
    REFRESH_TOKEN: "RefreshToken"
};
/**
 * Combine all cache types
 */ const CacheType = {
    ADFS: 1001,
    MSA: 1002,
    MSSTS: 1003,
    GENERIC: 1004,
    ACCESS_TOKEN: 2001,
    REFRESH_TOKEN: 2002,
    ID_TOKEN: 2003,
    APP_METADATA: 3001,
    UNDEFINED: 9999
};
/**
 * More Cache related constants
 */ const APP_METADATA = "appmetadata";
const CLIENT_INFO = "client_info";
const THE_FAMILY_ID = "1";
const AUTHORITY_METADATA_CONSTANTS = {
    CACHE_KEY: "authority-metadata",
    REFRESH_TIME_SECONDS: 86400
};
const AuthorityMetadataSource = {
    CONFIG: "config",
    CACHE: "cache",
    NETWORK: "network",
    HARDCODED_VALUES: "hardcoded_values"
};
const SERVER_TELEM_CONSTANTS = {
    SCHEMA_VERSION: 5,
    MAX_LAST_HEADER_BYTES: 330,
    MAX_CACHED_ERRORS: 50,
    CACHE_KEY: "server-telemetry",
    CATEGORY_SEPARATOR: "|",
    VALUE_SEPARATOR: ",",
    OVERFLOW_TRUE: "1",
    OVERFLOW_FALSE: "0",
    UNKNOWN_ERROR: "unknown_error"
};
/**
 * Type of the authentication request
 */ const AuthenticationScheme = {
    BEARER: "Bearer",
    POP: "pop",
    SSH: "ssh-cert"
};
/**
 * Constants related to throttling
 */ const ThrottlingConstants = {
    // Default time to throttle RequestThumbprint in seconds
    DEFAULT_THROTTLE_TIME_SECONDS: 60,
    // Default maximum time to throttle in seconds, overrides what the server sends back
    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,
    // Prefix for storing throttling entries
    THROTTLING_PREFIX: "throttling",
    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling
    X_MS_LIB_CAPABILITY_VALUE: "retry-after, h429"
};
const Errors = {
    INVALID_GRANT_ERROR: "invalid_grant",
    CLIENT_MISMATCH_ERROR: "client_mismatch"
};
/**
 * Password grant parameters
 */ const PasswordGrantConstants = {
    username: "username",
    password: "password"
};
/**
 * Region Discovery Sources
 */ const RegionDiscoverySources = {
    FAILED_AUTO_DETECTION: "1",
    INTERNAL_CACHE: "2",
    ENVIRONMENT_VARIABLE: "3",
    IMDS: "4"
};
/**
 * Region Discovery Outcomes
 */ const RegionDiscoveryOutcomes = {
    CONFIGURED_NO_AUTO_DETECTION: "2",
    AUTO_DETECTION_REQUESTED_SUCCESSFUL: "4",
    AUTO_DETECTION_REQUESTED_FAILED: "5"
};
/**
 * Specifies the reason for fetching the access token from the identity provider
 */ const CacheOutcome = {
    // When a token is found in the cache or the cache is not supposed to be hit when making the request
    NOT_APPLICABLE: "0",
    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested
    FORCE_REFRESH_OR_CLAIMS: "1",
    // When the token request goes to the identity provider because no cached access token exists
    NO_CACHED_ACCESS_TOKEN: "2",
    // When the token request goes to the identity provider because cached access token expired
    CACHED_ACCESS_TOKEN_EXPIRED: "3",
    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed
    PROACTIVELY_REFRESHED: "4"
};
const JsonWebTokenTypes = {
    Jwt: "JWT",
    Jwk: "JWK",
    Pop: "pop"
};
const ONE_DAY_IN_MS = 86400000;
// Token renewal offset default in seconds
const DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;
const EncodingTypes = {
    BASE64: "base64",
    HEX: "hex",
    UTF8: "utf-8"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"1SsYn":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "postRequestFailed", ()=>postRequestFailed);
parcelHelpers.export(exports, "unexpectedError", ()=>unexpectedError);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * AuthErrorMessage class containing string constants used by error codes and messages.
 */ const unexpectedError = "unexpected_error";
const postRequestFailed = "post_request_failed";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"dhVcy":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "authTimeNotFound", ()=>authTimeNotFound);
parcelHelpers.export(exports, "authorizationCodeMissingFromServerResponse", ()=>authorizationCodeMissingFromServerResponse);
parcelHelpers.export(exports, "bindingKeyNotRemoved", ()=>bindingKeyNotRemoved);
parcelHelpers.export(exports, "cannotAppendScopeSet", ()=>cannotAppendScopeSet);
parcelHelpers.export(exports, "cannotRemoveEmptyScope", ()=>cannotRemoveEmptyScope);
parcelHelpers.export(exports, "clientInfoDecodingError", ()=>clientInfoDecodingError);
parcelHelpers.export(exports, "clientInfoEmptyError", ()=>clientInfoEmptyError);
parcelHelpers.export(exports, "deviceCodeExpired", ()=>deviceCodeExpired);
parcelHelpers.export(exports, "deviceCodePollingCancelled", ()=>deviceCodePollingCancelled);
parcelHelpers.export(exports, "deviceCodeUnknownError", ()=>deviceCodeUnknownError);
parcelHelpers.export(exports, "emptyInputScopeSet", ()=>emptyInputScopeSet);
parcelHelpers.export(exports, "endSessionEndpointNotSupported", ()=>endSessionEndpointNotSupported);
parcelHelpers.export(exports, "endpointResolutionError", ()=>endpointResolutionError);
parcelHelpers.export(exports, "hashNotDeserialized", ()=>hashNotDeserialized);
parcelHelpers.export(exports, "invalidAssertion", ()=>invalidAssertion);
parcelHelpers.export(exports, "invalidCacheEnvironment", ()=>invalidCacheEnvironment);
parcelHelpers.export(exports, "invalidCacheRecord", ()=>invalidCacheRecord);
parcelHelpers.export(exports, "invalidClientCredential", ()=>invalidClientCredential);
parcelHelpers.export(exports, "invalidState", ()=>invalidState);
parcelHelpers.export(exports, "keyIdMissing", ()=>keyIdMissing);
parcelHelpers.export(exports, "maxAgeTranspired", ()=>maxAgeTranspired);
parcelHelpers.export(exports, "methodNotImplemented", ()=>methodNotImplemented);
parcelHelpers.export(exports, "missingTenantIdError", ()=>missingTenantIdError);
parcelHelpers.export(exports, "multipleMatchingAccounts", ()=>multipleMatchingAccounts);
parcelHelpers.export(exports, "multipleMatchingAppMetadata", ()=>multipleMatchingAppMetadata);
parcelHelpers.export(exports, "multipleMatchingTokens", ()=>multipleMatchingTokens);
parcelHelpers.export(exports, "nestedAppAuthBridgeDisabled", ()=>nestedAppAuthBridgeDisabled);
parcelHelpers.export(exports, "networkError", ()=>networkError);
parcelHelpers.export(exports, "noAccountFound", ()=>noAccountFound);
parcelHelpers.export(exports, "noAccountInSilentRequest", ()=>noAccountInSilentRequest);
parcelHelpers.export(exports, "noCryptoObject", ()=>noCryptoObject);
parcelHelpers.export(exports, "noNetworkConnectivity", ()=>noNetworkConnectivity);
parcelHelpers.export(exports, "nonceMismatch", ()=>nonceMismatch);
parcelHelpers.export(exports, "nullOrEmptyToken", ()=>nullOrEmptyToken);
parcelHelpers.export(exports, "openIdConfigError", ()=>openIdConfigError);
parcelHelpers.export(exports, "requestCannotBeMade", ()=>requestCannotBeMade);
parcelHelpers.export(exports, "stateMismatch", ()=>stateMismatch);
parcelHelpers.export(exports, "stateNotFound", ()=>stateNotFound);
parcelHelpers.export(exports, "tokenClaimsCnfRequiredForSignedJwt", ()=>tokenClaimsCnfRequiredForSignedJwt);
parcelHelpers.export(exports, "tokenParsingError", ()=>tokenParsingError);
parcelHelpers.export(exports, "tokenRefreshRequired", ()=>tokenRefreshRequired);
parcelHelpers.export(exports, "unexpectedCredentialType", ()=>unexpectedCredentialType);
parcelHelpers.export(exports, "userCanceled", ()=>userCanceled);
parcelHelpers.export(exports, "userTimeoutReached", ()=>userTimeoutReached);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const clientInfoDecodingError = "client_info_decoding_error";
const clientInfoEmptyError = "client_info_empty_error";
const tokenParsingError = "token_parsing_error";
const nullOrEmptyToken = "null_or_empty_token";
const endpointResolutionError = "endpoints_resolution_error";
const networkError = "network_error";
const openIdConfigError = "openid_config_error";
const hashNotDeserialized = "hash_not_deserialized";
const invalidState = "invalid_state";
const stateMismatch = "state_mismatch";
const stateNotFound = "state_not_found";
const nonceMismatch = "nonce_mismatch";
const authTimeNotFound = "auth_time_not_found";
const maxAgeTranspired = "max_age_transpired";
const multipleMatchingTokens = "multiple_matching_tokens";
const multipleMatchingAccounts = "multiple_matching_accounts";
const multipleMatchingAppMetadata = "multiple_matching_appMetadata";
const requestCannotBeMade = "request_cannot_be_made";
const cannotRemoveEmptyScope = "cannot_remove_empty_scope";
const cannotAppendScopeSet = "cannot_append_scopeset";
const emptyInputScopeSet = "empty_input_scopeset";
const deviceCodePollingCancelled = "device_code_polling_cancelled";
const deviceCodeExpired = "device_code_expired";
const deviceCodeUnknownError = "device_code_unknown_error";
const noAccountInSilentRequest = "no_account_in_silent_request";
const invalidCacheRecord = "invalid_cache_record";
const invalidCacheEnvironment = "invalid_cache_environment";
const noAccountFound = "no_account_found";
const noCryptoObject = "no_crypto_object";
const unexpectedCredentialType = "unexpected_credential_type";
const invalidAssertion = "invalid_assertion";
const invalidClientCredential = "invalid_client_credential";
const tokenRefreshRequired = "token_refresh_required";
const userTimeoutReached = "user_timeout_reached";
const tokenClaimsCnfRequiredForSignedJwt = "token_claims_cnf_required_for_signedjwt";
const authorizationCodeMissingFromServerResponse = "authorization_code_missing_from_server_response";
const bindingKeyNotRemoved = "binding_key_not_removed";
const endSessionEndpointNotSupported = "end_session_endpoint_not_supported";
const keyIdMissing = "key_id_missing";
const noNetworkConnectivity = "no_network_connectivity";
const userCanceled = "user_canceled";
const missingTenantIdError = "missing_tenant_id_error";
const methodNotImplemented = "method_not_implemented";
const nestedAppAuthBridgeDisabled = "nested_app_auth_bridge_disabled";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"bmFqN":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel);
parcelHelpers.export(exports, "Logger", ()=>Logger);
var _constantsMjs = require("../utils/Constants.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Log message level.
 */ var LogLevel;
(function(LogLevel) {
    LogLevel[LogLevel["Error"] = 0] = "Error";
    LogLevel[LogLevel["Warning"] = 1] = "Warning";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
    LogLevel[LogLevel["Trace"] = 4] = "Trace";
})(LogLevel || (LogLevel = {}));
/**
 * Class which facilitates logging of messages to a specific place.
 */ class Logger {
    constructor(loggerOptions, packageName, packageVersion){
        // Current log level, defaults to info.
        this.level = LogLevel.Info;
        const defaultLoggerCallback = ()=>{
            return;
        };
        const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();
        this.localCallback = setLoggerOptions.loggerCallback || defaultLoggerCallback;
        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;
        this.level = typeof setLoggerOptions.logLevel === "number" ? setLoggerOptions.logLevel : LogLevel.Info;
        this.correlationId = setLoggerOptions.correlationId || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.packageName = packageName || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.packageVersion = packageVersion || (0, _constantsMjs.Constants).EMPTY_STRING;
    }
    static createDefaultLoggerOptions() {
        return {
            loggerCallback: ()=>{
            // allow users to not set loggerCallback
            },
            piiLoggingEnabled: false,
            logLevel: LogLevel.Info
        };
    }
    /**
     * Create new Logger with existing configurations.
     */ clone(packageName, packageVersion, correlationId) {
        return new Logger({
            loggerCallback: this.localCallback,
            piiLoggingEnabled: this.piiLoggingEnabled,
            logLevel: this.level,
            correlationId: correlationId || this.correlationId
        }, packageName, packageVersion);
    }
    /**
     * Log message with required options.
     */ logMessage(logMessage, options) {
        if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) return;
        const timestamp = new Date().toUTCString();
        // Add correlationId to logs if set, correlationId provided on log messages take precedence
        const logHeader = `[${timestamp}] : [${options.correlationId || this.correlationId || ""}]`;
        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;
        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? "-Pii": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);
        this.executeCallback(options.logLevel, log, options.containsPii || false);
    }
    /**
     * Execute callback with message.
     */ executeCallback(level, message, containsPii) {
        if (this.localCallback) this.localCallback(level, message, containsPii);
    }
    /**
     * Logs error messages.
     */ error(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Error,
            containsPii: false,
            correlationId: correlationId || (0, _constantsMjs.Constants).EMPTY_STRING
        });
    }
    /**
     * Logs error messages with PII.
     */ errorPii(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Error,
            containsPii: true,
            correlationId: correlationId || (0, _constantsMjs.Constants).EMPTY_STRING
        });
    }
    /**
     * Logs warning messages.
     */ warning(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Warning,
            containsPii: false,
            correlationId: correlationId || (0, _constantsMjs.Constants).EMPTY_STRING
        });
    }
    /**
     * Logs warning messages with PII.
     */ warningPii(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Warning,
            containsPii: true,
            correlationId: correlationId || (0, _constantsMjs.Constants).EMPTY_STRING
        });
    }
    /**
     * Logs info messages.
     */ info(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Info,
            containsPii: false,
            correlationId: correlationId || (0, _constantsMjs.Constants).EMPTY_STRING
        });
    }
    /**
     * Logs info messages with PII.
     */ infoPii(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Info,
            containsPii: true,
            correlationId: correlationId || (0, _constantsMjs.Constants).EMPTY_STRING
        });
    }
    /**
     * Logs verbose messages.
     */ verbose(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Verbose,
            containsPii: false,
            correlationId: correlationId || (0, _constantsMjs.Constants).EMPTY_STRING
        });
    }
    /**
     * Logs verbose messages with PII.
     */ verbosePii(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Verbose,
            containsPii: true,
            correlationId: correlationId || (0, _constantsMjs.Constants).EMPTY_STRING
        });
    }
    /**
     * Logs trace messages.
     */ trace(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Trace,
            containsPii: false,
            correlationId: correlationId || (0, _constantsMjs.Constants).EMPTY_STRING
        });
    }
    /**
     * Logs trace messages with PII.
     */ tracePii(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Trace,
            containsPii: true,
            correlationId: correlationId || (0, _constantsMjs.Constants).EMPTY_STRING
        });
    }
    /**
     * Returns whether PII Logging is enabled or not.
     */ isPiiLoggingEnabled() {
        return this.piiLoggingEnabled || false;
    }
}

},{"../utils/Constants.mjs":"81leO","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"1CjrA":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "name", ()=>name);
parcelHelpers.export(exports, "version", ()=>version);
'use strict';
/* eslint-disable header/header */ const name = "@azure/msal-common";
const version = "15.13.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"99vBp":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AzureCloudInstance", ()=>AzureCloudInstance);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const AzureCloudInstance = {
    // AzureCloudInstance is not specified.
    None: "none",
    // Microsoft Azure public cloud
    AzurePublic: "https://login.microsoftonline.com",
    // Microsoft PPE
    AzurePpe: "https://login.windows-ppe.net",
    // Microsoft Chinese national/regional cloud
    AzureChina: "https://login.chinacloudapi.cn",
    // Microsoft German national/regional cloud ("Black Forest")
    AzureGermany: "https://login.microsoftonline.de",
    // US Government cloud
    AzureUsGovernment: "https://login.microsoftonline.us"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"eKq2M":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheManager", ()=>CacheManager);
parcelHelpers.export(exports, "DefaultStorageClass", ()=>DefaultStorageClass);
var _constantsMjs = require("../utils/Constants.mjs");
var _scopeSetMjs = require("../request/ScopeSet.mjs");
var _accountEntityMjs = require("./entities/AccountEntity.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _accountInfoMjs = require("../account/AccountInfo.mjs");
var _authTokenMjs = require("../account/AuthToken.mjs");
var _packageMetadataMjs = require("../packageMetadata.mjs");
var _authorityMetadataMjs = require("../authority/AuthorityMetadata.mjs");
var _cacheErrorMjs = require("../error/CacheError.mjs");
var _authErrorMjs = require("../error/AuthError.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.
 * @internal
 */ class CacheManager {
    constructor(clientId, cryptoImpl, logger, performanceClient, staticAuthorityOptions){
        this.clientId = clientId;
        this.cryptoImpl = cryptoImpl;
        this.commonLogger = logger.clone((0, _packageMetadataMjs.name), (0, _packageMetadataMjs.version));
        this.staticAuthorityOptions = staticAuthorityOptions;
        this.performanceClient = performanceClient;
    }
    /**
     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.
     * @param accountFilter - (Optional) filter to narrow down the accounts returned
     * @returns Array of AccountInfo objects in cache
     */ getAllAccounts(accountFilter, correlationId) {
        return this.buildTenantProfiles(this.getAccountsFilteredBy(accountFilter, correlationId), correlationId, accountFilter);
    }
    /**
     * Gets first tenanted AccountInfo object found based on provided filters
     */ getAccountInfoFilteredBy(accountFilter, correlationId) {
        if (Object.keys(accountFilter).length === 0 || Object.values(accountFilter).every((value)=>!value)) {
            this.commonLogger.warning("getAccountInfoFilteredBy: Account filter is empty or invalid, returning null");
            return null;
        }
        const allAccounts = this.getAllAccounts(accountFilter, correlationId);
        if (allAccounts.length > 1) {
            // If one or more accounts are found, prioritize accounts that have an ID token
            const sortedAccounts = allAccounts.sort((account)=>{
                return account.idTokenClaims ? -1 : 1;
            });
            return sortedAccounts[0];
        } else if (allAccounts.length === 1) // If only one account is found, return it regardless of whether a matching ID token was found
        return allAccounts[0];
        else return null;
    }
    /**
     * Returns a single matching
     * @param accountFilter
     * @returns
     */ getBaseAccountInfo(accountFilter, correlationId) {
        const accountEntities = this.getAccountsFilteredBy(accountFilter, correlationId);
        if (accountEntities.length > 0) return (0, _accountEntityMjs.AccountEntity).getAccountInfo(accountEntities[0]);
        else return null;
    }
    /**
     * Matches filtered account entities with cached ID tokens that match the tenant profile-specific account filters
     * and builds the account info objects from the matching ID token's claims
     * @param cachedAccounts
     * @param accountFilter
     * @returns Array of AccountInfo objects that match account and tenant profile filters
     */ buildTenantProfiles(cachedAccounts, correlationId, accountFilter) {
        return cachedAccounts.flatMap((accountEntity)=>{
            return this.getTenantProfilesFromAccountEntity(accountEntity, correlationId, accountFilter?.tenantId, accountFilter);
        });
    }
    getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, correlationId, tenantProfileFilter) {
        let tenantedAccountInfo = null;
        let idTokenClaims;
        if (tenantProfileFilter) {
            if (!this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter)) return null;
        }
        const idToken = this.getIdToken(accountInfo, correlationId, tokenKeys, tenantProfile.tenantId);
        if (idToken) {
            idTokenClaims = (0, _authTokenMjs.extractTokenClaims)(idToken.secret, this.cryptoImpl.base64Decode);
            if (!this.idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter)) // ID token sourced claims don't match so this tenant profile is not a match
            return null;
        }
        // Expand tenant profile into account info based on matching tenant profile and if available matching ID token claims
        tenantedAccountInfo = (0, _accountInfoMjs.updateAccountTenantProfileData)(accountInfo, tenantProfile, idTokenClaims, idToken?.secret);
        return tenantedAccountInfo;
    }
    getTenantProfilesFromAccountEntity(accountEntity, correlationId, targetTenantId, tenantProfileFilter) {
        const accountInfo = (0, _accountEntityMjs.AccountEntity).getAccountInfo(accountEntity);
        let searchTenantProfiles = accountInfo.tenantProfiles || new Map();
        const tokenKeys = this.getTokenKeys();
        // If a tenant ID was provided, only return the tenant profile for that tenant ID if it exists
        if (targetTenantId) {
            const tenantProfile = searchTenantProfiles.get(targetTenantId);
            if (tenantProfile) // Reduce search field to just this tenant profile
            searchTenantProfiles = new Map([
                [
                    targetTenantId,
                    tenantProfile
                ]
            ]);
            else // No tenant profile for search tenant ID, return empty array
            return [];
        }
        const matchingTenantProfiles = [];
        searchTenantProfiles.forEach((tenantProfile)=>{
            const tenantedAccountInfo = this.getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, correlationId, tenantProfileFilter);
            if (tenantedAccountInfo) matchingTenantProfiles.push(tenantedAccountInfo);
        });
        return matchingTenantProfiles;
    }
    tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter) {
        if (!!tenantProfileFilter.localAccountId && !this.matchLocalAccountIdFromTenantProfile(tenantProfile, tenantProfileFilter.localAccountId)) return false;
        if (!!tenantProfileFilter.name && !(tenantProfile.name === tenantProfileFilter.name)) return false;
        if (tenantProfileFilter.isHomeTenant !== undefined && !(tenantProfile.isHomeTenant === tenantProfileFilter.isHomeTenant)) return false;
        return true;
    }
    idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter) {
        // Tenant Profile filtering
        if (tenantProfileFilter) {
            if (!!tenantProfileFilter.localAccountId && !this.matchLocalAccountIdFromTokenClaims(idTokenClaims, tenantProfileFilter.localAccountId)) return false;
            if (!!tenantProfileFilter.loginHint && !this.matchLoginHintFromTokenClaims(idTokenClaims, tenantProfileFilter.loginHint)) return false;
            if (!!tenantProfileFilter.username && !this.matchUsername(idTokenClaims.preferred_username, tenantProfileFilter.username)) return false;
            if (!!tenantProfileFilter.name && !this.matchName(idTokenClaims, tenantProfileFilter.name)) return false;
            if (!!tenantProfileFilter.sid && !this.matchSid(idTokenClaims, tenantProfileFilter.sid)) return false;
        }
        return true;
    }
    /**
     * saves a cache record
     * @param cacheRecord {CacheRecord}
     * @param correlationId {?string} correlation id
     * @param kmsi - Keep Me Signed In
     * @param storeInCache {?StoreInCache}
     */ async saveCacheRecord(cacheRecord, correlationId, kmsi, storeInCache) {
        if (!cacheRecord) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.invalidCacheRecord));
        try {
            if (!!cacheRecord.account) await this.setAccount(cacheRecord.account, correlationId, kmsi);
            if (!!cacheRecord.idToken && storeInCache?.idToken !== false) await this.setIdTokenCredential(cacheRecord.idToken, correlationId, kmsi);
            if (!!cacheRecord.accessToken && storeInCache?.accessToken !== false) await this.saveAccessToken(cacheRecord.accessToken, correlationId, kmsi);
            if (!!cacheRecord.refreshToken && storeInCache?.refreshToken !== false) await this.setRefreshTokenCredential(cacheRecord.refreshToken, correlationId, kmsi);
            if (!!cacheRecord.appMetadata) this.setAppMetadata(cacheRecord.appMetadata, correlationId);
        } catch (e) {
            this.commonLogger?.error(`CacheManager.saveCacheRecord: failed`);
            if (e instanceof (0, _authErrorMjs.AuthError)) throw e;
            else throw (0, _cacheErrorMjs.createCacheError)(e);
        }
    }
    /**
     * saves access token credential
     * @param credential
     */ async saveAccessToken(credential, correlationId, kmsi) {
        const accessTokenFilter = {
            clientId: credential.clientId,
            credentialType: credential.credentialType,
            environment: credential.environment,
            homeAccountId: credential.homeAccountId,
            realm: credential.realm,
            tokenType: credential.tokenType,
            requestedClaimsHash: credential.requestedClaimsHash
        };
        const tokenKeys = this.getTokenKeys();
        const currentScopes = (0, _scopeSetMjs.ScopeSet).fromString(credential.target);
        tokenKeys.accessToken.forEach((key)=>{
            if (!this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) return;
            const tokenEntity = this.getAccessTokenCredential(key, correlationId);
            if (tokenEntity && this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {
                const tokenScopeSet = (0, _scopeSetMjs.ScopeSet).fromString(tokenEntity.target);
                if (tokenScopeSet.intersectingScopeSets(currentScopes)) this.removeAccessToken(key, correlationId);
            }
        });
        await this.setAccessTokenCredential(credential, correlationId, kmsi);
    }
    /**
     * Retrieve account entities matching all provided tenant-agnostic filters; if no filter is set, get all account entities in the cache
     * Not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
     * @param accountFilter - An object containing Account properties to filter by
     */ getAccountsFilteredBy(accountFilter, correlationId) {
        const allAccountKeys = this.getAccountKeys();
        const matchingAccounts = [];
        allAccountKeys.forEach((cacheKey)=>{
            const entity = this.getAccount(cacheKey, correlationId);
            // Match base account fields
            if (!entity) return;
            if (!!accountFilter.homeAccountId && !this.matchHomeAccountId(entity, accountFilter.homeAccountId)) return;
            if (!!accountFilter.username && !this.matchUsername(entity.username, accountFilter.username)) return;
            if (!!accountFilter.environment && !this.matchEnvironment(entity, accountFilter.environment)) return;
            if (!!accountFilter.realm && !this.matchRealm(entity, accountFilter.realm)) return;
            if (!!accountFilter.nativeAccountId && !this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) return;
            if (!!accountFilter.authorityType && !this.matchAuthorityType(entity, accountFilter.authorityType)) return;
            // If at least one tenant profile matches the tenant profile filter, add the account to the list of matching accounts
            const tenantProfileFilter = {
                localAccountId: accountFilter?.localAccountId,
                name: accountFilter?.name
            };
            const matchingTenantProfiles = entity.tenantProfiles?.filter((tenantProfile)=>{
                return this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter);
            });
            if (matchingTenantProfiles && matchingTenantProfiles.length === 0) // No tenant profile for this account matches filter, don't add to list of matching accounts
            return;
            matchingAccounts.push(entity);
        });
        return matchingAccounts;
    }
    /**
     * Returns whether or not the given credential entity matches the filter
     * @param entity
     * @param filter
     * @returns
     */ credentialMatchesFilter(entity, filter) {
        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) return false;
        if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) return false;
        /*
         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of ""
         * because we don't want a client_credential request to return a cached token that has a homeAccountId
         */ if (typeof filter.homeAccountId === "string" && !this.matchHomeAccountId(entity, filter.homeAccountId)) return false;
        if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) return false;
        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) return false;
        if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) return false;
        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) return false;
        /*
         * idTokens do not have "target", target specific refreshTokens do exist for some types of authentication
         * Resource specific refresh tokens case will be added when the support is deemed necessary
         */ if (!!filter.target && !this.matchTarget(entity, filter.target)) return false;
        // If request OR cached entity has requested Claims Hash, check if they match
        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {
            // Don't match if either is undefined or they are different
            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) return false;
        }
        // Access Token with Auth Scheme specific matching
        if (entity.credentialType === (0, _constantsMjs.CredentialType).ACCESS_TOKEN_WITH_AUTH_SCHEME) {
            if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) return false;
            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key
            if (filter.tokenType === (0, _constantsMjs.AuthenticationScheme).SSH) {
                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) return false;
            }
        }
        return true;
    }
    /**
     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata
     * @param filter
     */ getAppMetadataFilteredBy(filter) {
        const allCacheKeys = this.getKeys();
        const matchingAppMetadata = {};
        allCacheKeys.forEach((cacheKey)=>{
            // don't parse any non-appMetadata type cache entities
            if (!this.isAppMetadata(cacheKey)) return;
            // Attempt retrieval
            const entity = this.getAppMetadata(cacheKey);
            if (!entity) return;
            if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) return;
            if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) return;
            matchingAppMetadata[cacheKey] = entity;
        });
        return matchingAppMetadata;
    }
    /**
     * retrieve authorityMetadata that contains a matching alias
     * @param filter
     */ getAuthorityMetadataByAlias(host) {
        const allCacheKeys = this.getAuthorityMetadataKeys();
        let matchedEntity = null;
        allCacheKeys.forEach((cacheKey)=>{
            // don't parse any non-authorityMetadata type cache entities
            if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) return;
            // Attempt retrieval
            const entity = this.getAuthorityMetadata(cacheKey);
            if (!entity) return;
            if (entity.aliases.indexOf(host) === -1) return;
            matchedEntity = entity;
        });
        return matchedEntity;
    }
    /**
     * Removes all accounts and related tokens from cache.
     */ removeAllAccounts(correlationId) {
        const accounts = this.getAllAccounts({}, correlationId);
        accounts.forEach((account)=>{
            this.removeAccount(account, correlationId);
        });
    }
    /**
     * Removes the account and related tokens for a given account key
     * @param account
     */ removeAccount(account, correlationId) {
        this.removeAccountContext(account, correlationId);
        const accountKeys = this.getAccountKeys();
        const keyFilter = (key)=>{
            return key.includes(account.homeAccountId) && key.includes(account.environment);
        };
        accountKeys.filter(keyFilter).forEach((key)=>{
            this.removeItem(key, correlationId);
            this.performanceClient.incrementFields({
                accountsRemoved: 1
            }, correlationId);
        });
    }
    /**
     * Removes credentials associated with the provided account
     * @param account
     */ removeAccountContext(account, correlationId) {
        const allTokenKeys = this.getTokenKeys();
        const keyFilter = (key)=>{
            return key.includes(account.homeAccountId) && key.includes(account.environment);
        };
        allTokenKeys.idToken.filter(keyFilter).forEach((key)=>{
            this.removeIdToken(key, correlationId);
        });
        allTokenKeys.accessToken.filter(keyFilter).forEach((key)=>{
            this.removeAccessToken(key, correlationId);
        });
        allTokenKeys.refreshToken.filter(keyFilter).forEach((key)=>{
            this.removeRefreshToken(key, correlationId);
        });
    }
    /**
     * Removes accessToken from the cache
     * @param key
     * @param correlationId
     */ removeAccessToken(key, correlationId) {
        const credential = this.getAccessTokenCredential(key, correlationId);
        this.removeItem(key, correlationId);
        this.performanceClient.incrementFields({
            accessTokensRemoved: 1
        }, correlationId);
        if (!credential || credential.credentialType.toLowerCase() !== (0, _constantsMjs.CredentialType).ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase() || credential.tokenType !== (0, _constantsMjs.AuthenticationScheme).POP) // If the credential is not a PoP token, we can return
        return;
        // Remove Token Binding Key from key store for PoP Tokens Credentials
        const kid = credential.keyId;
        if (kid) this.cryptoImpl.removeTokenBindingKey(kid).catch(()=>{
            this.commonLogger.error(`Failed to remove token binding key ${kid}`, correlationId);
            this.performanceClient?.incrementFields({
                removeTokenBindingKeyFailure: 1
            }, correlationId);
        });
    }
    /**
     * Removes all app metadata objects from cache.
     */ removeAppMetadata(correlationId) {
        const allCacheKeys = this.getKeys();
        allCacheKeys.forEach((cacheKey)=>{
            if (this.isAppMetadata(cacheKey)) this.removeItem(cacheKey, correlationId);
        });
        return true;
    }
    /**
     * Retrieve IdTokenEntity from cache
     * @param account {AccountInfo}
     * @param tokenKeys {?TokenKeys}
     * @param targetRealm {?string}
     * @param performanceClient {?IPerformanceClient}
     * @param correlationId {?string}
     */ getIdToken(account, correlationId, tokenKeys, targetRealm, performanceClient) {
        this.commonLogger.trace("CacheManager - getIdToken called");
        const idTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: (0, _constantsMjs.CredentialType).ID_TOKEN,
            clientId: this.clientId,
            realm: targetRealm
        };
        const idTokenMap = this.getIdTokensByFilter(idTokenFilter, correlationId, tokenKeys);
        const numIdTokens = idTokenMap.size;
        if (numIdTokens < 1) {
            this.commonLogger.info("CacheManager:getIdToken - No token found");
            return null;
        } else if (numIdTokens > 1) {
            let tokensToBeRemoved = idTokenMap;
            // Multiple tenant profiles and no tenant specified, pick home account
            if (!targetRealm) {
                const homeIdTokenMap = new Map();
                idTokenMap.forEach((idToken, key)=>{
                    if (idToken.realm === account.tenantId) homeIdTokenMap.set(key, idToken);
                });
                const numHomeIdTokens = homeIdTokenMap.size;
                if (numHomeIdTokens < 1) {
                    this.commonLogger.info("CacheManager:getIdToken - Multiple ID tokens found for account but none match account entity tenant id, returning first result");
                    return idTokenMap.values().next().value;
                } else if (numHomeIdTokens === 1) {
                    this.commonLogger.info("CacheManager:getIdToken - Multiple ID tokens found for account, defaulting to home tenant profile");
                    return homeIdTokenMap.values().next().value;
                } else // Multiple ID tokens for home tenant profile, remove all and return null
                tokensToBeRemoved = homeIdTokenMap;
            }
            // Multiple tokens for a single tenant profile, remove all and return null
            this.commonLogger.info("CacheManager:getIdToken - Multiple matching ID tokens found, clearing them");
            tokensToBeRemoved.forEach((idToken, key)=>{
                this.removeIdToken(key, correlationId);
            });
            if (performanceClient && correlationId) performanceClient.addFields({
                multiMatchedID: idTokenMap.size
            }, correlationId);
            return null;
        }
        this.commonLogger.info("CacheManager:getIdToken - Returning ID token");
        return idTokenMap.values().next().value;
    }
    /**
     * Gets all idTokens matching the given filter
     * @param filter
     * @returns
     */ getIdTokensByFilter(filter, correlationId, tokenKeys) {
        const idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;
        const idTokens = new Map();
        idTokenKeys.forEach((key)=>{
            if (!this.idTokenKeyMatchesFilter(key, {
                clientId: this.clientId,
                ...filter
            })) return;
            const idToken = this.getIdTokenCredential(key, correlationId);
            if (idToken && this.credentialMatchesFilter(idToken, filter)) idTokens.set(key, idToken);
        });
        return idTokens;
    }
    /**
     * Validate the cache key against filter before retrieving and parsing cache value
     * @param key
     * @param filter
     * @returns
     */ idTokenKeyMatchesFilter(inputKey, filter) {
        const key = inputKey.toLowerCase();
        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) return false;
        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) return false;
        return true;
    }
    /**
     * Removes idToken from the cache
     * @param key
     */ removeIdToken(key, correlationId) {
        this.removeItem(key, correlationId);
    }
    /**
     * Removes refresh token from the cache
     * @param key
     */ removeRefreshToken(key, correlationId) {
        this.removeItem(key, correlationId);
    }
    /**
     * Retrieve AccessTokenEntity from cache
     * @param account {AccountInfo}
     * @param request {BaseAuthRequest}
     * @param correlationId {?string}
     * @param tokenKeys {?TokenKeys}
     * @param performanceClient {?IPerformanceClient}
     */ getAccessToken(account, request, tokenKeys, targetRealm) {
        const correlationId = request.correlationId;
        this.commonLogger.trace("CacheManager - getAccessToken called", correlationId);
        const scopes = (0, _scopeSetMjs.ScopeSet).createSearchScopes(request.scopes);
        const authScheme = request.authenticationScheme || (0, _constantsMjs.AuthenticationScheme).BEARER;
        /*
         * Distinguish between Bearer and PoP/SSH token cache types
         * Cast to lowercase to handle "bearer" from ADFS
         */ const credentialType = authScheme && authScheme.toLowerCase() !== (0, _constantsMjs.AuthenticationScheme).BEARER.toLowerCase() ? (0, _constantsMjs.CredentialType).ACCESS_TOKEN_WITH_AUTH_SCHEME : (0, _constantsMjs.CredentialType).ACCESS_TOKEN;
        const accessTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: credentialType,
            clientId: this.clientId,
            realm: targetRealm || account.tenantId,
            target: scopes,
            tokenType: authScheme,
            keyId: request.sshKid,
            requestedClaimsHash: request.requestedClaimsHash
        };
        const accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;
        const accessTokens = [];
        accessTokenKeys.forEach((key)=>{
            // Validate key
            if (this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {
                const accessToken = this.getAccessTokenCredential(key, correlationId);
                // Validate value
                if (accessToken && this.credentialMatchesFilter(accessToken, accessTokenFilter)) accessTokens.push(accessToken);
            }
        });
        const numAccessTokens = accessTokens.length;
        if (numAccessTokens < 1) {
            this.commonLogger.info("CacheManager:getAccessToken - No token found", correlationId);
            return null;
        } else if (numAccessTokens > 1) {
            this.commonLogger.info("CacheManager:getAccessToken - Multiple access tokens found, clearing them", correlationId);
            accessTokens.forEach((accessToken)=>{
                this.removeAccessToken(this.generateCredentialKey(accessToken), correlationId);
            });
            this.performanceClient.addFields({
                multiMatchedAT: accessTokens.length
            }, correlationId);
            return null;
        }
        this.commonLogger.info("CacheManager:getAccessToken - Returning access token", correlationId);
        return accessTokens[0];
    }
    /**
     * Validate the cache key against filter before retrieving and parsing cache value
     * @param key
     * @param filter
     * @param keyMustContainAllScopes
     * @returns
     */ accessTokenKeyMatchesFilter(inputKey, filter, keyMustContainAllScopes) {
        const key = inputKey.toLowerCase();
        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) return false;
        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) return false;
        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) return false;
        if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) return false;
        if (filter.target) {
            const scopes = filter.target.asArray();
            for(let i = 0; i < scopes.length; i++){
                if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) // When performing a cache lookup a missing scope would be a cache miss
                return false;
                else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) // When performing a cache write, any token with a subset of requested scopes should be replaced
                return true;
            }
        }
        return true;
    }
    /**
     * Gets all access tokens matching the filter
     * @param filter
     * @returns
     */ getAccessTokensByFilter(filter, correlationId) {
        const tokenKeys = this.getTokenKeys();
        const accessTokens = [];
        tokenKeys.accessToken.forEach((key)=>{
            if (!this.accessTokenKeyMatchesFilter(key, filter, true)) return;
            const accessToken = this.getAccessTokenCredential(key, correlationId);
            if (accessToken && this.credentialMatchesFilter(accessToken, filter)) accessTokens.push(accessToken);
        });
        return accessTokens;
    }
    /**
     * Helper to retrieve the appropriate refresh token from cache
     * @param account {AccountInfo}
     * @param familyRT {boolean}
     * @param correlationId {?string}
     * @param tokenKeys {?TokenKeys}
     * @param performanceClient {?IPerformanceClient}
     */ getRefreshToken(account, familyRT, correlationId, tokenKeys, performanceClient) {
        this.commonLogger.trace("CacheManager - getRefreshToken called");
        const id = familyRT ? (0, _constantsMjs.THE_FAMILY_ID) : undefined;
        const refreshTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: (0, _constantsMjs.CredentialType).REFRESH_TOKEN,
            clientId: this.clientId,
            familyId: id
        };
        const refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;
        const refreshTokens = [];
        refreshTokenKeys.forEach((key)=>{
            // Validate key
            if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {
                const refreshToken = this.getRefreshTokenCredential(key, correlationId);
                // Validate value
                if (refreshToken && this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) refreshTokens.push(refreshToken);
            }
        });
        const numRefreshTokens = refreshTokens.length;
        if (numRefreshTokens < 1) {
            this.commonLogger.info("CacheManager:getRefreshToken - No refresh token found.");
            return null;
        }
        // address the else case after remove functions address environment aliases
        if (numRefreshTokens > 1 && performanceClient && correlationId) performanceClient.addFields({
            multiMatchedRT: numRefreshTokens
        }, correlationId);
        this.commonLogger.info("CacheManager:getRefreshToken - returning refresh token");
        return refreshTokens[0];
    }
    /**
     * Validate the cache key against filter before retrieving and parsing cache value
     * @param key
     * @param filter
     */ refreshTokenKeyMatchesFilter(inputKey, filter) {
        const key = inputKey.toLowerCase();
        if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) return false;
        // If familyId is used, clientId is not in the key
        if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) return false;
        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) return false;
        return true;
    }
    /**
     * Retrieve AppMetadataEntity from cache
     */ readAppMetadataFromCache(environment) {
        const appMetadataFilter = {
            environment,
            clientId: this.clientId
        };
        const appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);
        const appMetadataEntries = Object.keys(appMetadata).map((key)=>appMetadata[key]);
        const numAppMetadata = appMetadataEntries.length;
        if (numAppMetadata < 1) return null;
        else if (numAppMetadata > 1) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.multipleMatchingAppMetadata));
        return appMetadataEntries[0];
    }
    /**
     * Return the family_id value associated  with FOCI
     * @param environment
     * @param clientId
     */ isAppMetadataFOCI(environment) {
        const appMetadata = this.readAppMetadataFromCache(environment);
        return !!(appMetadata && appMetadata.familyId === (0, _constantsMjs.THE_FAMILY_ID));
    }
    /**
     * helper to match account ids
     * @param value
     * @param homeAccountId
     */ matchHomeAccountId(entity, homeAccountId) {
        return !!(typeof entity.homeAccountId === "string" && homeAccountId === entity.homeAccountId);
    }
    /**
     * helper to match account ids
     * @param entity
     * @param localAccountId
     * @returns
     */ matchLocalAccountIdFromTokenClaims(tokenClaims, localAccountId) {
        const idTokenLocalAccountId = tokenClaims.oid || tokenClaims.sub;
        return localAccountId === idTokenLocalAccountId;
    }
    matchLocalAccountIdFromTenantProfile(tenantProfile, localAccountId) {
        return tenantProfile.localAccountId === localAccountId;
    }
    /**
     * helper to match names
     * @param entity
     * @param name
     * @returns true if the downcased name properties are present and match in the filter and the entity
     */ matchName(claims, name) {
        return !!(name.toLowerCase() === claims.name?.toLowerCase());
    }
    /**
     * helper to match usernames
     * @param entity
     * @param username
     * @returns
     */ matchUsername(cachedUsername, filterUsername) {
        return !!(cachedUsername && typeof cachedUsername === "string" && filterUsername?.toLowerCase() === cachedUsername.toLowerCase());
    }
    /**
     * helper to match assertion
     * @param value
     * @param oboAssertion
     */ matchUserAssertionHash(entity, userAssertionHash) {
        return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);
    }
    /**
     * helper to match environment
     * @param value
     * @param environment
     */ matchEnvironment(entity, environment) {
        // Check static authority options first for cases where authority metadata has not been resolved and cached yet
        if (this.staticAuthorityOptions) {
            const staticAliases = (0, _authorityMetadataMjs.getAliasesFromStaticSources)(this.staticAuthorityOptions, this.commonLogger);
            if (staticAliases.includes(environment) && staticAliases.includes(entity.environment)) return true;
        }
        // Query metadata cache if no static authority configuration has aliases that match enviroment
        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);
        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) return true;
        return false;
    }
    /**
     * helper to match credential type
     * @param entity
     * @param credentialType
     */ matchCredentialType(entity, credentialType) {
        return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();
    }
    /**
     * helper to match client ids
     * @param entity
     * @param clientId
     */ matchClientId(entity, clientId) {
        return !!(entity.clientId && clientId === entity.clientId);
    }
    /**
     * helper to match family ids
     * @param entity
     * @param familyId
     */ matchFamilyId(entity, familyId) {
        return !!(entity.familyId && familyId === entity.familyId);
    }
    /**
     * helper to match realm
     * @param entity
     * @param realm
     */ matchRealm(entity, realm) {
        return !!(entity.realm?.toLowerCase() === realm.toLowerCase());
    }
    /**
     * helper to match nativeAccountId
     * @param entity
     * @param nativeAccountId
     * @returns boolean indicating the match result
     */ matchNativeAccountId(entity, nativeAccountId) {
        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);
    }
    /**
     * helper to match loginHint which can be either:
     * 1. login_hint ID token claim
     * 2. username in cached account object
     * 3. upn in ID token claims
     * @param entity
     * @param loginHint
     * @returns
     */ matchLoginHintFromTokenClaims(tokenClaims, loginHint) {
        if (tokenClaims.login_hint === loginHint) return true;
        if (tokenClaims.preferred_username === loginHint) return true;
        if (tokenClaims.upn === loginHint) return true;
        return false;
    }
    /**
     * Helper to match sid
     * @param entity
     * @param sid
     * @returns true if the sid claim is present and matches the filter
     */ matchSid(idTokenClaims, sid) {
        return idTokenClaims.sid === sid;
    }
    matchAuthorityType(entity, authorityType) {
        return !!(entity.authorityType && authorityType.toLowerCase() === entity.authorityType.toLowerCase());
    }
    /**
     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.
     * @param entity
     * @param target
     */ matchTarget(entity, target) {
        const isNotAccessTokenCredential = entity.credentialType !== (0, _constantsMjs.CredentialType).ACCESS_TOKEN && entity.credentialType !== (0, _constantsMjs.CredentialType).ACCESS_TOKEN_WITH_AUTH_SCHEME;
        if (isNotAccessTokenCredential || !entity.target) return false;
        const entityScopeSet = (0, _scopeSetMjs.ScopeSet).fromString(entity.target);
        return entityScopeSet.containsScopeSet(target);
    }
    /**
     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise
     * @param entity
     * @param tokenType
     */ matchTokenType(entity, tokenType) {
        return !!(entity.tokenType && entity.tokenType === tokenType);
    }
    /**
     * Returns true if the credential's keyId matches the one in the request, false otherwise
     * @param entity
     * @param keyId
     */ matchKeyId(entity, keyId) {
        return !!(entity.keyId && entity.keyId === keyId);
    }
    /**
     * returns if a given cache entity is of the type appmetadata
     * @param key
     */ isAppMetadata(key) {
        return key.indexOf((0, _constantsMjs.APP_METADATA)) !== -1;
    }
    /**
     * returns if a given cache entity is of the type authoritymetadata
     * @param key
     */ isAuthorityMetadata(key) {
        return key.indexOf((0, _constantsMjs.AUTHORITY_METADATA_CONSTANTS).CACHE_KEY) !== -1;
    }
    /**
     * returns cache key used for cloud instance metadata
     */ generateAuthorityMetadataCacheKey(authority) {
        return `${(0, _constantsMjs.AUTHORITY_METADATA_CONSTANTS).CACHE_KEY}-${this.clientId}-${authority}`;
    }
    /**
     * Helper to convert serialized data to object
     * @param obj
     * @param json
     */ static toObject(obj, json) {
        for(const propertyName in json)obj[propertyName] = json[propertyName];
        return obj;
    }
}
/** @internal */ class DefaultStorageClass extends CacheManager {
    async setAccount() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getAccount() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    async setIdTokenCredential() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getIdTokenCredential() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    async setAccessTokenCredential() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getAccessTokenCredential() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    async setRefreshTokenCredential() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getRefreshTokenCredential() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    setAppMetadata() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getAppMetadata() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    setServerTelemetry() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getServerTelemetry() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    setAuthorityMetadata() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getAuthorityMetadata() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getAuthorityMetadataKeys() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    setThrottlingCache() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getThrottlingCache() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    removeItem() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getKeys() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getAccountKeys() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    getTokenKeys() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    generateCredentialKey() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
    generateAccountKey() {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented));
    }
}

},{"../utils/Constants.mjs":"81leO","../request/ScopeSet.mjs":"hiTkN","./entities/AccountEntity.mjs":"4Vb6c","../error/ClientAuthError.mjs":"dZZgC","../account/AccountInfo.mjs":"1dIYU","../account/AuthToken.mjs":"cbmml","../packageMetadata.mjs":"1CjrA","../authority/AuthorityMetadata.mjs":"jaz9Y","../error/CacheError.mjs":"37jD6","../error/AuthError.mjs":"jXpbF","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"hiTkN":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ScopeSet", ()=>ScopeSet);
var _clientConfigurationErrorMjs = require("../error/ClientConfigurationError.mjs");
var _stringUtilsMjs = require("../utils/StringUtils.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _clientConfigurationErrorCodesMjs = require("../error/ClientConfigurationErrorCodes.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes
 * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions
 * to ensure uniqueness of strings.
 */ class ScopeSet {
    constructor(inputScopes){
        // Filter empty string and null/undefined array items
        const scopeArr = inputScopes ? (0, _stringUtilsMjs.StringUtils).trimArrayEntries([
            ...inputScopes
        ]) : [];
        const filteredInput = scopeArr ? (0, _stringUtilsMjs.StringUtils).removeEmptyStringsFromArray(scopeArr) : [];
        // Check if scopes array has at least one member
        if (!filteredInput || !filteredInput.length) throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.emptyInputScopesError));
        this.scopes = new Set(); // Iterator in constructor not supported by IE11
        filteredInput.forEach((scope)=>this.scopes.add(scope));
    }
    /**
     * Factory method to create ScopeSet from space-delimited string
     * @param inputScopeString
     * @param appClientId
     * @param scopesRequired
     */ static fromString(inputScopeString) {
        const scopeString = inputScopeString || (0, _constantsMjs.Constants).EMPTY_STRING;
        const inputScopes = scopeString.split(" ");
        return new ScopeSet(inputScopes);
    }
    /**
     * Creates the set of scopes to search for in cache lookups
     * @param inputScopeString
     * @returns
     */ static createSearchScopes(inputScopeString) {
        // Handle empty scopes by using default OIDC scopes for cache lookup
        const scopesToUse = inputScopeString && inputScopeString.length > 0 ? inputScopeString : [
            ...(0, _constantsMjs.OIDC_DEFAULT_SCOPES)
        ];
        const scopeSet = new ScopeSet(scopesToUse);
        if (!scopeSet.containsOnlyOIDCScopes()) scopeSet.removeOIDCScopes();
        else scopeSet.removeScope((0, _constantsMjs.Constants).OFFLINE_ACCESS_SCOPE);
        return scopeSet;
    }
    /**
     * Check if a given scope is present in this set of scopes.
     * @param scope
     */ containsScope(scope) {
        const lowerCaseScopes = this.printScopesLowerCase().split(" ");
        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);
        // compare lowercase scopes
        return scope ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;
    }
    /**
     * Check if a set of scopes is present in this set of scopes.
     * @param scopeSet
     */ containsScopeSet(scopeSet) {
        if (!scopeSet || scopeSet.scopes.size <= 0) return false;
        return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every((scope)=>this.containsScope(scope));
    }
    /**
     * Check if set of scopes contains only the defaults
     */ containsOnlyOIDCScopes() {
        let defaultScopeCount = 0;
        (0, _constantsMjs.OIDC_SCOPES).forEach((defaultScope)=>{
            if (this.containsScope(defaultScope)) defaultScopeCount += 1;
        });
        return this.scopes.size === defaultScopeCount;
    }
    /**
     * Appends single scope if passed
     * @param newScope
     */ appendScope(newScope) {
        if (newScope) this.scopes.add(newScope.trim());
    }
    /**
     * Appends multiple scopes if passed
     * @param newScopes
     */ appendScopes(newScopes) {
        try {
            newScopes.forEach((newScope)=>this.appendScope(newScope));
        } catch (e) {
            throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.cannotAppendScopeSet));
        }
    }
    /**
     * Removes element from set of scopes.
     * @param scope
     */ removeScope(scope) {
        if (!scope) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.cannotRemoveEmptyScope));
        this.scopes.delete(scope.trim());
    }
    /**
     * Removes default scopes from set of scopes
     * Primarily used to prevent cache misses if the default scopes are not returned from the server
     */ removeOIDCScopes() {
        (0, _constantsMjs.OIDC_SCOPES).forEach((defaultScope)=>{
            this.scopes.delete(defaultScope);
        });
    }
    /**
     * Combines an array of scopes with the current set of scopes.
     * @param otherScopes
     */ unionScopeSets(otherScopes) {
        if (!otherScopes) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.emptyInputScopeSet));
        const unionScopes = new Set(); // Iterator in constructor not supported in IE11
        otherScopes.scopes.forEach((scope)=>unionScopes.add(scope.toLowerCase()));
        this.scopes.forEach((scope)=>unionScopes.add(scope.toLowerCase()));
        return unionScopes;
    }
    /**
     * Check if scopes intersect between this set and another.
     * @param otherScopes
     */ intersectingScopeSets(otherScopes) {
        if (!otherScopes) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.emptyInputScopeSet));
        // Do not allow OIDC scopes to be the only intersecting scopes
        if (!otherScopes.containsOnlyOIDCScopes()) otherScopes.removeOIDCScopes();
        const unionScopes = this.unionScopeSets(otherScopes);
        const sizeOtherScopes = otherScopes.getScopeCount();
        const sizeThisScopes = this.getScopeCount();
        const sizeUnionScopes = unionScopes.size;
        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;
    }
    /**
     * Returns size of set of scopes.
     */ getScopeCount() {
        return this.scopes.size;
    }
    /**
     * Returns the scopes as an array of string values
     */ asArray() {
        const array = [];
        this.scopes.forEach((val)=>array.push(val));
        return array;
    }
    /**
     * Prints scopes into a space-delimited string
     */ printScopes() {
        if (this.scopes) {
            const scopeArr = this.asArray();
            return scopeArr.join(" ");
        }
        return (0, _constantsMjs.Constants).EMPTY_STRING;
    }
    /**
     * Prints scopes into a space-delimited lower-case string (used for caching)
     */ printScopesLowerCase() {
        return this.printScopes().toLowerCase();
    }
}

},{"../error/ClientConfigurationError.mjs":"byrV8","../utils/StringUtils.mjs":"7KUNp","../error/ClientAuthError.mjs":"dZZgC","../utils/Constants.mjs":"81leO","../error/ClientConfigurationErrorCodes.mjs":"7O3No","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"byrV8":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientConfigurationErrorCodes", ()=>_clientConfigurationErrorCodesMjs);
parcelHelpers.export(exports, "ClientConfigurationError", ()=>ClientConfigurationError);
parcelHelpers.export(exports, "ClientConfigurationErrorMessage", ()=>ClientConfigurationErrorMessage);
parcelHelpers.export(exports, "ClientConfigurationErrorMessages", ()=>ClientConfigurationErrorMessages);
parcelHelpers.export(exports, "createClientConfigurationError", ()=>createClientConfigurationError);
var _authErrorMjs = require("./AuthError.mjs");
var _clientConfigurationErrorCodesMjs = require("./ClientConfigurationErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const ClientConfigurationErrorMessages = {
    [(0, _clientConfigurationErrorCodesMjs.redirectUriEmpty)]: "A redirect URI is required for all calls, and none has been set.",
    [(0, _clientConfigurationErrorCodesMjs.claimsRequestParsingError)]: "Could not parse the given claims request object.",
    [(0, _clientConfigurationErrorCodesMjs.authorityUriInsecure)]: "Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options",
    [(0, _clientConfigurationErrorCodesMjs.urlParseError)]: "URL could not be parsed into appropriate segments.",
    [(0, _clientConfigurationErrorCodesMjs.urlEmptyError)]: "URL was empty or null.",
    [(0, _clientConfigurationErrorCodesMjs.emptyInputScopesError)]: "Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.",
    [(0, _clientConfigurationErrorCodesMjs.invalidClaims)]: "Given claims parameter must be a stringified JSON object.",
    [(0, _clientConfigurationErrorCodesMjs.tokenRequestEmpty)]: "Token request was empty and not found in cache.",
    [(0, _clientConfigurationErrorCodesMjs.logoutRequestEmpty)]: "The logout request was null or undefined.",
    [(0, _clientConfigurationErrorCodesMjs.invalidCodeChallengeMethod)]: 'code_challenge_method passed is invalid. Valid values are "plain" and "S256".',
    [(0, _clientConfigurationErrorCodesMjs.pkceParamsMissing)]: "Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request",
    [(0, _clientConfigurationErrorCodesMjs.invalidCloudDiscoveryMetadata)]: "Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields",
    [(0, _clientConfigurationErrorCodesMjs.invalidAuthorityMetadata)]: "Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.",
    [(0, _clientConfigurationErrorCodesMjs.untrustedAuthority)]: "The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.",
    [(0, _clientConfigurationErrorCodesMjs.missingSshJwk)]: "Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.",
    [(0, _clientConfigurationErrorCodesMjs.missingSshKid)]: "Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.",
    [(0, _clientConfigurationErrorCodesMjs.missingNonceAuthenticationHeader)]: "Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.",
    [(0, _clientConfigurationErrorCodesMjs.invalidAuthenticationHeader)]: "Invalid authentication header provided",
    [(0, _clientConfigurationErrorCodesMjs.cannotSetOIDCOptions)]: "Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.",
    [(0, _clientConfigurationErrorCodesMjs.cannotAllowPlatformBroker)]: "Cannot set allowPlatformBroker parameter to true when not in AAD protocol mode.",
    [(0, _clientConfigurationErrorCodesMjs.authorityMismatch)]: "Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.",
    [(0, _clientConfigurationErrorCodesMjs.invalidAuthorizePostBodyParameters)]: "Invalid authorize post body parameters provided. If you are using authorizePostBodyParameters, the request method must be POST. Please check the request method and parameters.",
    [(0, _clientConfigurationErrorCodesMjs.invalidRequestMethodForEAR)]: "Invalid request method for EAR protocol mode. The request method cannot be GET when using EAR protocol mode. Please change the request method to POST."
};
/**
 * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.
 * @deprecated Use ClientConfigurationErrorCodes instead
 */ const ClientConfigurationErrorMessage = {
    redirectUriNotSet: {
        code: (0, _clientConfigurationErrorCodesMjs.redirectUriEmpty),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.redirectUriEmpty]
    },
    claimsRequestParsingError: {
        code: (0, _clientConfigurationErrorCodesMjs.claimsRequestParsingError),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.claimsRequestParsingError]
    },
    authorityUriInsecure: {
        code: (0, _clientConfigurationErrorCodesMjs.authorityUriInsecure),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.authorityUriInsecure]
    },
    urlParseError: {
        code: (0, _clientConfigurationErrorCodesMjs.urlParseError),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.urlParseError]
    },
    urlEmptyError: {
        code: (0, _clientConfigurationErrorCodesMjs.urlEmptyError),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.urlEmptyError]
    },
    emptyScopesError: {
        code: (0, _clientConfigurationErrorCodesMjs.emptyInputScopesError),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.emptyInputScopesError]
    },
    invalidClaimsRequest: {
        code: (0, _clientConfigurationErrorCodesMjs.invalidClaims),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.invalidClaims]
    },
    tokenRequestEmptyError: {
        code: (0, _clientConfigurationErrorCodesMjs.tokenRequestEmpty),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.tokenRequestEmpty]
    },
    logoutRequestEmptyError: {
        code: (0, _clientConfigurationErrorCodesMjs.logoutRequestEmpty),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.logoutRequestEmpty]
    },
    invalidCodeChallengeMethod: {
        code: (0, _clientConfigurationErrorCodesMjs.invalidCodeChallengeMethod),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.invalidCodeChallengeMethod]
    },
    invalidCodeChallengeParams: {
        code: (0, _clientConfigurationErrorCodesMjs.pkceParamsMissing),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.pkceParamsMissing]
    },
    invalidCloudDiscoveryMetadata: {
        code: (0, _clientConfigurationErrorCodesMjs.invalidCloudDiscoveryMetadata),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.invalidCloudDiscoveryMetadata]
    },
    invalidAuthorityMetadata: {
        code: (0, _clientConfigurationErrorCodesMjs.invalidAuthorityMetadata),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.invalidAuthorityMetadata]
    },
    untrustedAuthority: {
        code: (0, _clientConfigurationErrorCodesMjs.untrustedAuthority),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.untrustedAuthority]
    },
    missingSshJwk: {
        code: (0, _clientConfigurationErrorCodesMjs.missingSshJwk),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.missingSshJwk]
    },
    missingSshKid: {
        code: (0, _clientConfigurationErrorCodesMjs.missingSshKid),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.missingSshKid]
    },
    missingNonceAuthenticationHeader: {
        code: (0, _clientConfigurationErrorCodesMjs.missingNonceAuthenticationHeader),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.missingNonceAuthenticationHeader]
    },
    invalidAuthenticationHeader: {
        code: (0, _clientConfigurationErrorCodesMjs.invalidAuthenticationHeader),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.invalidAuthenticationHeader]
    },
    cannotSetOIDCOptions: {
        code: (0, _clientConfigurationErrorCodesMjs.cannotSetOIDCOptions),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.cannotSetOIDCOptions]
    },
    cannotAllowPlatformBroker: {
        code: (0, _clientConfigurationErrorCodesMjs.cannotAllowPlatformBroker),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.cannotAllowPlatformBroker]
    },
    authorityMismatch: {
        code: (0, _clientConfigurationErrorCodesMjs.authorityMismatch),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.authorityMismatch]
    },
    invalidAuthorizePostBodyParameters: {
        code: (0, _clientConfigurationErrorCodesMjs.invalidAuthorizePostBodyParameters),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.invalidAuthorizePostBodyParameters]
    },
    invalidRequestMethodForEAR: {
        code: (0, _clientConfigurationErrorCodesMjs.invalidRequestMethodForEAR),
        desc: ClientConfigurationErrorMessages[0, _clientConfigurationErrorCodesMjs.invalidRequestMethodForEAR]
    }
};
/**
 * Error thrown when there is an error in configuration of the MSAL.js library.
 */ class ClientConfigurationError extends (0, _authErrorMjs.AuthError) {
    constructor(errorCode){
        super(errorCode, ClientConfigurationErrorMessages[errorCode]);
        this.name = "ClientConfigurationError";
        Object.setPrototypeOf(this, ClientConfigurationError.prototype);
    }
}
function createClientConfigurationError(errorCode) {
    return new ClientConfigurationError(errorCode);
}

},{"./AuthError.mjs":"jXpbF","./ClientConfigurationErrorCodes.mjs":"7O3No","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7O3No":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "authorityMismatch", ()=>authorityMismatch);
parcelHelpers.export(exports, "authorityUriInsecure", ()=>authorityUriInsecure);
parcelHelpers.export(exports, "cannotAllowPlatformBroker", ()=>cannotAllowPlatformBroker);
parcelHelpers.export(exports, "cannotSetOIDCOptions", ()=>cannotSetOIDCOptions);
parcelHelpers.export(exports, "claimsRequestParsingError", ()=>claimsRequestParsingError);
parcelHelpers.export(exports, "emptyInputScopesError", ()=>emptyInputScopesError);
parcelHelpers.export(exports, "invalidAuthenticationHeader", ()=>invalidAuthenticationHeader);
parcelHelpers.export(exports, "invalidAuthorityMetadata", ()=>invalidAuthorityMetadata);
parcelHelpers.export(exports, "invalidAuthorizePostBodyParameters", ()=>invalidAuthorizePostBodyParameters);
parcelHelpers.export(exports, "invalidClaims", ()=>invalidClaims);
parcelHelpers.export(exports, "invalidCloudDiscoveryMetadata", ()=>invalidCloudDiscoveryMetadata);
parcelHelpers.export(exports, "invalidCodeChallengeMethod", ()=>invalidCodeChallengeMethod);
parcelHelpers.export(exports, "invalidRequestMethodForEAR", ()=>invalidRequestMethodForEAR);
parcelHelpers.export(exports, "logoutRequestEmpty", ()=>logoutRequestEmpty);
parcelHelpers.export(exports, "missingNonceAuthenticationHeader", ()=>missingNonceAuthenticationHeader);
parcelHelpers.export(exports, "missingSshJwk", ()=>missingSshJwk);
parcelHelpers.export(exports, "missingSshKid", ()=>missingSshKid);
parcelHelpers.export(exports, "pkceParamsMissing", ()=>pkceParamsMissing);
parcelHelpers.export(exports, "redirectUriEmpty", ()=>redirectUriEmpty);
parcelHelpers.export(exports, "tokenRequestEmpty", ()=>tokenRequestEmpty);
parcelHelpers.export(exports, "untrustedAuthority", ()=>untrustedAuthority);
parcelHelpers.export(exports, "urlEmptyError", ()=>urlEmptyError);
parcelHelpers.export(exports, "urlParseError", ()=>urlParseError);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const redirectUriEmpty = "redirect_uri_empty";
const claimsRequestParsingError = "claims_request_parsing_error";
const authorityUriInsecure = "authority_uri_insecure";
const urlParseError = "url_parse_error";
const urlEmptyError = "empty_url_error";
const emptyInputScopesError = "empty_input_scopes_error";
const invalidClaims = "invalid_claims";
const tokenRequestEmpty = "token_request_empty";
const logoutRequestEmpty = "logout_request_empty";
const invalidCodeChallengeMethod = "invalid_code_challenge_method";
const pkceParamsMissing = "pkce_params_missing";
const invalidCloudDiscoveryMetadata = "invalid_cloud_discovery_metadata";
const invalidAuthorityMetadata = "invalid_authority_metadata";
const untrustedAuthority = "untrusted_authority";
const missingSshJwk = "missing_ssh_jwk";
const missingSshKid = "missing_ssh_kid";
const missingNonceAuthenticationHeader = "missing_nonce_authentication_header";
const invalidAuthenticationHeader = "invalid_authentication_header";
const cannotSetOIDCOptions = "cannot_set_OIDCOptions";
const cannotAllowPlatformBroker = "cannot_allow_platform_broker";
const authorityMismatch = "authority_mismatch";
const invalidRequestMethodForEAR = "invalid_request_method_for_EAR";
const invalidAuthorizePostBodyParameters = "invalid_authorize_post_body_parameters";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7KUNp":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringUtils", ()=>StringUtils);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * @hidden
 */ class StringUtils {
    /**
     * Check if stringified object is empty
     * @param strObj
     */ static isEmptyObj(strObj) {
        if (strObj) try {
            const obj = JSON.parse(strObj);
            return Object.keys(obj).length === 0;
        } catch (e) {}
        return true;
    }
    static startsWith(str, search) {
        return str.indexOf(search) === 0;
    }
    static endsWith(str, search) {
        return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;
    }
    /**
     * Parses string into an object.
     *
     * @param query
     */ static queryStringToObject(query) {
        const obj = {};
        const params = query.split("&");
        const decode = (s)=>decodeURIComponent(s.replace(/\+/g, " "));
        params.forEach((pair)=>{
            if (pair.trim()) {
                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character
                if (key && value) obj[decode(key)] = decode(value);
            }
        });
        return obj;
    }
    /**
     * Trims entries in an array.
     *
     * @param arr
     */ static trimArrayEntries(arr) {
        return arr.map((entry)=>entry.trim());
    }
    /**
     * Removes empty strings from array
     * @param arr
     */ static removeEmptyStringsFromArray(arr) {
        return arr.filter((entry)=>{
            return !!entry;
        });
    }
    /**
     * Attempts to parse a string into JSON
     * @param str
     */ static jsonParseHelper(str) {
        try {
            return JSON.parse(str);
        } catch (e) {
            return null;
        }
    }
    /**
     * Tests if a given string matches a given pattern, with support for wildcards and queries.
     * @param pattern Wildcard pattern to string match. Supports "*" for wildcards and "?" for queries
     * @param input String to match against
     */ static matchPattern(pattern, input) {
        /**
         * Wildcard support: https://stackoverflow.com/a/3117248/4888559
         * Queries: replaces "?" in string with escaped "\?" for regex test
         */ // eslint-disable-next-line security/detect-non-literal-regexp
        const regex = new RegExp(pattern.replace(/\\/g, "\\\\").replace(/\*/g, "[^ ]*").replace(/\?/g, "\\?"));
        return regex.test(input);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4Vb6c":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AccountEntity", ()=>AccountEntity);
var _constantsMjs = require("../../utils/Constants.mjs");
var _clientInfoMjs = require("../../account/ClientInfo.mjs");
var _accountInfoMjs = require("../../account/AccountInfo.mjs");
var _clientAuthErrorMjs = require("../../error/ClientAuthError.mjs");
var _authorityTypeMjs = require("../../authority/AuthorityType.mjs");
var _tokenClaimsMjs = require("../../account/TokenClaims.mjs");
var _protocolModeMjs = require("../../authority/ProtocolMode.mjs");
var _clientAuthErrorCodesMjs = require("../../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).
 *
 * Key : Value Schema
 *
 * Key: <home_account_id>-<environment>-<realm*>
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      localAccountId: Original tenant-specific accountID, usually used for legacy cases
 *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt
 *      authorityType: Accounts authority type as a string
 *      name: Full name for the account, including given name and family name,
 *      lastModificationTime: last time this entity was modified in the cache
 *      lastModificationApp:
 *      nativeAccountId: Account identifier on the native device
 *      tenantProfiles: Array of tenant profile objects for each tenant that the account has authenticated with in the browser
 * }
 * @internal
 */ class AccountEntity {
    /**
     * Returns the AccountInfo interface for this account.
     */ static getAccountInfo(accountEntity) {
        return {
            homeAccountId: accountEntity.homeAccountId,
            environment: accountEntity.environment,
            tenantId: accountEntity.realm,
            username: accountEntity.username,
            localAccountId: accountEntity.localAccountId,
            loginHint: accountEntity.loginHint,
            name: accountEntity.name,
            nativeAccountId: accountEntity.nativeAccountId,
            authorityType: accountEntity.authorityType,
            // Deserialize tenant profiles array into a Map
            tenantProfiles: new Map((accountEntity.tenantProfiles || []).map((tenantProfile)=>{
                return [
                    tenantProfile.tenantId,
                    tenantProfile
                ];
            })),
            dataBoundary: accountEntity.dataBoundary
        };
    }
    /**
     * Returns true if the account entity is in single tenant format (outdated), false otherwise
     */ isSingleTenant() {
        return !this.tenantProfiles;
    }
    /**
     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.
     * @param accountDetails
     */ static createAccount(accountDetails, authority, base64Decode) {
        const account = new AccountEntity();
        if (authority.authorityType === (0, _authorityTypeMjs.AuthorityType).Adfs) account.authorityType = (0, _constantsMjs.CacheAccountType).ADFS_ACCOUNT_TYPE;
        else if (authority.protocolMode === (0, _protocolModeMjs.ProtocolMode).OIDC) account.authorityType = (0, _constantsMjs.CacheAccountType).GENERIC_ACCOUNT_TYPE;
        else account.authorityType = (0, _constantsMjs.CacheAccountType).MSSTS_ACCOUNT_TYPE;
        let clientInfo;
        if (accountDetails.clientInfo && base64Decode) {
            clientInfo = (0, _clientInfoMjs.buildClientInfo)(accountDetails.clientInfo, base64Decode);
            if (clientInfo.xms_tdbr) account.dataBoundary = clientInfo.xms_tdbr === "EU" ? "EU" : "None";
        }
        account.clientInfo = accountDetails.clientInfo;
        account.homeAccountId = accountDetails.homeAccountId;
        account.nativeAccountId = accountDetails.nativeAccountId;
        const env = accountDetails.environment || authority && authority.getPreferredCache();
        if (!env) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.invalidCacheEnvironment));
        account.environment = env;
        // non AAD scenarios can have empty realm
        account.realm = clientInfo?.utid || (0, _tokenClaimsMjs.getTenantIdFromIdTokenClaims)(accountDetails.idTokenClaims) || "";
        // How do you account for MSA CID here?
        account.localAccountId = clientInfo?.uid || accountDetails.idTokenClaims?.oid || accountDetails.idTokenClaims?.sub || "";
        /*
         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.
         * In most cases it will contain a single email. This field should not be relied upon if a custom
         * policy is configured to return more than 1 email.
         */ const preferredUsername = accountDetails.idTokenClaims?.preferred_username || accountDetails.idTokenClaims?.upn;
        const email = accountDetails.idTokenClaims?.emails ? accountDetails.idTokenClaims.emails[0] : null;
        account.username = preferredUsername || email || "";
        account.loginHint = accountDetails.idTokenClaims?.login_hint;
        account.name = accountDetails.idTokenClaims?.name || "";
        account.cloudGraphHostName = accountDetails.cloudGraphHostName;
        account.msGraphHost = accountDetails.msGraphHost;
        if (accountDetails.tenantProfiles) account.tenantProfiles = accountDetails.tenantProfiles;
        else {
            const tenantProfile = (0, _accountInfoMjs.buildTenantProfile)(accountDetails.homeAccountId, account.localAccountId, account.realm, accountDetails.idTokenClaims);
            account.tenantProfiles = [
                tenantProfile
            ];
        }
        return account;
    }
    /**
     * Creates an AccountEntity object from AccountInfo
     * @param accountInfo
     * @param cloudGraphHostName
     * @param msGraphHost
     * @returns
     */ static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {
        const account = new AccountEntity();
        account.authorityType = accountInfo.authorityType || (0, _constantsMjs.CacheAccountType).GENERIC_ACCOUNT_TYPE;
        account.homeAccountId = accountInfo.homeAccountId;
        account.localAccountId = accountInfo.localAccountId;
        account.nativeAccountId = accountInfo.nativeAccountId;
        account.realm = accountInfo.tenantId;
        account.environment = accountInfo.environment;
        account.username = accountInfo.username;
        account.name = accountInfo.name;
        account.loginHint = accountInfo.loginHint;
        account.cloudGraphHostName = cloudGraphHostName;
        account.msGraphHost = msGraphHost;
        // Serialize tenant profiles map into an array
        account.tenantProfiles = Array.from(accountInfo.tenantProfiles?.values() || []);
        account.dataBoundary = accountInfo.dataBoundary;
        return account;
    }
    /**
     * Generate HomeAccountId from server response
     * @param serverClientInfo
     * @param authType
     */ static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {
        // since ADFS/DSTS do not have tid and does not set client_info
        if (!(authType === (0, _authorityTypeMjs.AuthorityType).Adfs || authType === (0, _authorityTypeMjs.AuthorityType).Dsts)) {
            // for cases where there is clientInfo
            if (serverClientInfo) try {
                const clientInfo = (0, _clientInfoMjs.buildClientInfo)(serverClientInfo, cryptoObj.base64Decode);
                if (clientInfo.uid && clientInfo.utid) return `${clientInfo.uid}.${clientInfo.utid}`;
            } catch (e) {}
            logger.warning("No client info in response");
        }
        // default to "sub" claim
        return idTokenClaims?.sub || "";
    }
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */ static isAccountEntity(entity) {
        if (!entity) return false;
        return entity.hasOwnProperty("homeAccountId") && entity.hasOwnProperty("environment") && entity.hasOwnProperty("realm") && entity.hasOwnProperty("localAccountId") && entity.hasOwnProperty("username") && entity.hasOwnProperty("authorityType");
    }
    /**
     * Helper function to determine whether 2 accountInfo objects represent the same account
     * @param accountA
     * @param accountB
     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality
     */ static accountInfoIsEqual(accountA, accountB, compareClaims) {
        if (!accountA || !accountB) return false;
        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false
        if (compareClaims) {
            const accountAClaims = accountA.idTokenClaims || {};
            const accountBClaims = accountB.idTokenClaims || {};
            // issued at timestamp and nonce are expected to change each time a new id token is acquired
            claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;
        }
        return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.loginHint === accountB.loginHint && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;
    }
}

},{"../../utils/Constants.mjs":"81leO","../../account/ClientInfo.mjs":"2DIEg","../../account/AccountInfo.mjs":"1dIYU","../../error/ClientAuthError.mjs":"dZZgC","../../authority/AuthorityType.mjs":"kfz6w","../../account/TokenClaims.mjs":"67kUI","../../authority/ProtocolMode.mjs":"c6YAB","../../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"2DIEg":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildClientInfo", ()=>buildClientInfo);
parcelHelpers.export(exports, "buildClientInfoFromHomeAccountId", ()=>buildClientInfoFromHomeAccountId);
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Function to build a client info object from server clientInfo string
 * @param rawClientInfo
 * @param crypto
 */ function buildClientInfo(rawClientInfo, base64Decode) {
    if (!rawClientInfo) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.clientInfoEmptyError));
    try {
        const decodedClientInfo = base64Decode(rawClientInfo);
        return JSON.parse(decodedClientInfo);
    } catch (e) {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.clientInfoDecodingError));
    }
}
/**
 * Function to build a client info object from cached homeAccountId string
 * @param homeAccountId
 */ function buildClientInfoFromHomeAccountId(homeAccountId) {
    if (!homeAccountId) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.clientInfoDecodingError));
    const clientInfoParts = homeAccountId.split((0, _constantsMjs.Separators).CLIENT_INFO_SEPARATOR, 2);
    return {
        uid: clientInfoParts[0],
        utid: clientInfoParts.length < 2 ? (0, _constantsMjs.Constants).EMPTY_STRING : clientInfoParts[1]
    };
}

},{"../error/ClientAuthError.mjs":"dZZgC","../utils/Constants.mjs":"81leO","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"1dIYU":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildTenantProfile", ()=>buildTenantProfile);
parcelHelpers.export(exports, "tenantIdMatchesHomeTenant", ()=>tenantIdMatchesHomeTenant);
parcelHelpers.export(exports, "updateAccountTenantProfileData", ()=>updateAccountTenantProfileData);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Returns true if tenantId matches the utid portion of homeAccountId
 * @param tenantId
 * @param homeAccountId
 * @returns
 */ function tenantIdMatchesHomeTenant(tenantId, homeAccountId) {
    return !!tenantId && !!homeAccountId && tenantId === homeAccountId.split(".")[1];
}
/**
 * Build tenant profile
 * @param homeAccountId - Home account identifier for this account object
 * @param localAccountId - Local account identifer for this account object
 * @param tenantId - Full tenant or organizational id that this account belongs to
 * @param idTokenClaims - Claims from the ID token
 * @returns
 */ function buildTenantProfile(homeAccountId, localAccountId, tenantId, idTokenClaims) {
    if (idTokenClaims) {
        const { oid, sub, tid, name, tfp, acr, preferred_username, upn, login_hint } = idTokenClaims;
        /**
         * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:
         * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.
         * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.
         * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.
         */ const tenantId = tid || tfp || acr || "";
        return {
            tenantId: tenantId,
            localAccountId: oid || sub || "",
            name: name,
            username: preferred_username || upn || "",
            loginHint: login_hint,
            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)
        };
    } else return {
        tenantId,
        localAccountId,
        username: "",
        isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)
    };
}
/**
 * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info
 * @param baseAccountInfo
 * @param idTokenClaims
 * @returns
 */ function updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims, idTokenSecret) {
    let updatedAccountInfo = baseAccountInfo;
    // Tenant Profile overrides passed in account info
    if (tenantProfile) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;
        updatedAccountInfo = {
            ...baseAccountInfo,
            ...tenantProfileOverride
        };
    }
    // ID token claims override passed in account info and tenant profile
    if (idTokenClaims) {
        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { isHomeTenant, ...claimsSourcedTenantProfile } = buildTenantProfile(baseAccountInfo.homeAccountId, baseAccountInfo.localAccountId, baseAccountInfo.tenantId, idTokenClaims);
        updatedAccountInfo = {
            ...updatedAccountInfo,
            ...claimsSourcedTenantProfile,
            idTokenClaims: idTokenClaims,
            idToken: idTokenSecret
        };
        return updatedAccountInfo;
    }
    return updatedAccountInfo;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"kfz6w":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthorityType", ()=>AuthorityType);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Authority types supported by MSAL.
 */ const AuthorityType = {
    Default: 0,
    Adfs: 1,
    Dsts: 2,
    Ciam: 3
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"67kUI":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTenantIdFromIdTokenClaims", ()=>getTenantIdFromIdTokenClaims);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Gets tenantId from available ID token claims to set as credential realm with the following precedence:
 * 1. tid - if the token is acquired from an Azure AD tenant tid will be present
 * 2. tfp - if the token is acquired from a modern B2C tenant tfp should be present
 * 3. acr - if the token is acquired from a legacy B2C tenant acr should be present
 * Downcased to match the realm case-insensitive comparison requirements
 * @param idTokenClaims
 * @returns
 */ function getTenantIdFromIdTokenClaims(idTokenClaims) {
    if (idTokenClaims) {
        const tenantId = idTokenClaims.tid || idTokenClaims.tfp || idTokenClaims.acr;
        return tenantId || null;
    }
    return null;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"c6YAB":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProtocolMode", ()=>ProtocolMode);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Protocol modes supported by MSAL.
 */ const ProtocolMode = {
    /**
     * Auth Code + PKCE with Entra ID (formerly AAD) specific optimizations and features
     */ AAD: "AAD",
    /**
     * Auth Code + PKCE without Entra ID specific optimizations and features. For use only with non-Microsoft owned authorities.
     * Support is limited for this mode.
     */ OIDC: "OIDC",
    /**
     * Encrypted Authorize Response (EAR) with Entra ID specific optimizations and features
     */ EAR: "EAR"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"cbmml":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkMaxAge", ()=>checkMaxAge);
parcelHelpers.export(exports, "extractTokenClaims", ()=>extractTokenClaims);
parcelHelpers.export(exports, "getJWSPayload", ()=>getJWSPayload);
parcelHelpers.export(exports, "isKmsi", ()=>isKmsi);
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Extract token by decoding the rawToken
 *
 * @param encodedToken
 */ function extractTokenClaims(encodedToken, base64Decode) {
    const jswPayload = getJWSPayload(encodedToken);
    // token will be decoded to get the username
    try {
        // base64Decode() should throw an error if there is an issue
        const base64Decoded = base64Decode(jswPayload);
        return JSON.parse(base64Decoded);
    } catch (err) {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.tokenParsingError));
    }
}
/**
 * Check if the signin_state claim contains "kmsi"
 * @param idTokenClaims
 * @returns
 */ function isKmsi(idTokenClaims) {
    if (!idTokenClaims.signin_state) return false;
    /**
     * Signin_state claim known values:
     * dvc_mngd - device is managed
     * dvc_dmjd - device is domain joined
     * kmsi - user opted to "keep me signed in"
     * inknownntwk - Request made inside a known network. Don't use this, use CAE instead.
     */ const kmsiClaims = [
        "kmsi",
        "dvc_dmjd"
    ]; // There are some cases where kmsi may not be returned but persistent storage is still OK - allow dvc_dmjd as well
    const kmsi = idTokenClaims.signin_state.some((value)=>kmsiClaims.includes(value.trim().toLowerCase()));
    return kmsi;
}
/**
 * decode a JWT
 *
 * @param authToken
 */ function getJWSPayload(authToken) {
    if (!authToken) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.nullOrEmptyToken));
    const tokenPartsRegex = /^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/;
    const matches = tokenPartsRegex.exec(authToken);
    if (!matches || matches.length < 4) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.tokenParsingError));
    /**
     * const crackedToken = {
     *  header: matches[1],
     *  JWSPayload: matches[2],
     *  JWSSig: matches[3],
     * };
     */ return matches[2];
}
/**
 * Determine if the token's max_age has transpired
 */ function checkMaxAge(authTime, maxAge) {
    /*
     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,
     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.
     */ const fiveMinuteSkew = 300000; // five minutes in milliseconds
    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.maxAgeTranspired));
}

},{"../error/ClientAuthError.mjs":"dZZgC","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jaz9Y":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EndpointMetadata", ()=>EndpointMetadata);
parcelHelpers.export(exports, "InstanceDiscoveryMetadata", ()=>InstanceDiscoveryMetadata);
parcelHelpers.export(exports, "InstanceDiscoveryMetadataAliases", ()=>InstanceDiscoveryMetadataAliases);
parcelHelpers.export(exports, "getAliasesFromMetadata", ()=>getAliasesFromMetadata);
parcelHelpers.export(exports, "getAliasesFromStaticSources", ()=>getAliasesFromStaticSources);
parcelHelpers.export(exports, "getCloudDiscoveryMetadataFromHardcodedValues", ()=>getCloudDiscoveryMetadataFromHardcodedValues);
parcelHelpers.export(exports, "getCloudDiscoveryMetadataFromNetworkResponse", ()=>getCloudDiscoveryMetadataFromNetworkResponse);
parcelHelpers.export(exports, "rawMetdataJSON", ()=>rawMetdataJSON);
var _urlStringMjs = require("../url/UrlString.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const rawMetdataJSON = {
    endpointMetadata: {
        "login.microsoftonline.com": {
            token_endpoint: "https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token",
            jwks_uri: "https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys",
            issuer: "https://login.microsoftonline.com/{tenantid}/v2.0",
            authorization_endpoint: "https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize",
            end_session_endpoint: "https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout"
        },
        "login.chinacloudapi.cn": {
            token_endpoint: "https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token",
            jwks_uri: "https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys",
            issuer: "https://login.partner.microsoftonline.cn/{tenantid}/v2.0",
            authorization_endpoint: "https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize",
            end_session_endpoint: "https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout"
        },
        "login.microsoftonline.us": {
            token_endpoint: "https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token",
            jwks_uri: "https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys",
            issuer: "https://login.microsoftonline.us/{tenantid}/v2.0",
            authorization_endpoint: "https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize",
            end_session_endpoint: "https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout"
        }
    },
    instanceDiscoveryMetadata: {
        metadata: [
            {
                preferred_network: "login.microsoftonline.com",
                preferred_cache: "login.windows.net",
                aliases: [
                    "login.microsoftonline.com",
                    "login.windows.net",
                    "login.microsoft.com",
                    "sts.windows.net"
                ]
            },
            {
                preferred_network: "login.partner.microsoftonline.cn",
                preferred_cache: "login.partner.microsoftonline.cn",
                aliases: [
                    "login.partner.microsoftonline.cn",
                    "login.chinacloudapi.cn"
                ]
            },
            {
                preferred_network: "login.microsoftonline.de",
                preferred_cache: "login.microsoftonline.de",
                aliases: [
                    "login.microsoftonline.de"
                ]
            },
            {
                preferred_network: "login.microsoftonline.us",
                preferred_cache: "login.microsoftonline.us",
                aliases: [
                    "login.microsoftonline.us",
                    "login.usgovcloudapi.net"
                ]
            },
            {
                preferred_network: "login-us.microsoftonline.com",
                preferred_cache: "login-us.microsoftonline.com",
                aliases: [
                    "login-us.microsoftonline.com"
                ]
            }
        ]
    }
};
const EndpointMetadata = rawMetdataJSON.endpointMetadata;
const InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;
const InstanceDiscoveryMetadataAliases = new Set();
InstanceDiscoveryMetadata.metadata.forEach((metadataEntry)=>{
    metadataEntry.aliases.forEach((alias)=>{
        InstanceDiscoveryMetadataAliases.add(alias);
    });
});
/**
 * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host
 * @param staticAuthorityOptions
 * @param logger
 * @returns
 */ function getAliasesFromStaticSources(staticAuthorityOptions, logger) {
    let staticAliases;
    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;
    if (canonicalAuthority) {
        const authorityHost = new (0, _urlStringMjs.UrlString)(canonicalAuthority).getUrlComponents().HostNameAndPort;
        staticAliases = getAliasesFromMetadata(authorityHost, staticAuthorityOptions.cloudDiscoveryMetadata?.metadata, (0, _constantsMjs.AuthorityMetadataSource).CONFIG, logger) || getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, (0, _constantsMjs.AuthorityMetadataSource).HARDCODED_VALUES, logger) || staticAuthorityOptions.knownAuthorities;
    }
    return staticAliases || [];
}
/**
 * Returns aliases for from the raw cloud discovery metadata passed in
 * @param authorityHost
 * @param rawCloudDiscoveryMetadata
 * @returns
 */ function getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {
    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);
    if (authorityHost && cloudDiscoveryMetadata) {
        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);
        if (metadata) {
            logger?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`);
            return metadata.aliases;
        } else logger?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`);
    }
    return null;
}
/**
 * Get cloud discovery metadata for common authorities
 */ function getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {
    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);
    return metadata;
}
/**
 * Searches instance discovery network response for the entry that contains the host in the aliases list
 * @param response
 * @param authority
 */ function getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {
    for(let i = 0; i < response.length; i++){
        const metadata = response[i];
        if (metadata.aliases.includes(authorityHost)) return metadata;
    }
    return null;
}

},{"../url/UrlString.mjs":"53sIq","../utils/Constants.mjs":"81leO","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"53sIq":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UrlString", ()=>UrlString);
var _clientConfigurationErrorMjs = require("../error/ClientConfigurationError.mjs");
var _stringUtilsMjs = require("../utils/StringUtils.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _urlUtilsMjs = require("../utils/UrlUtils.mjs");
var _clientConfigurationErrorCodesMjs = require("../error/ClientConfigurationErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Url object class which can perform various transformations on url strings.
 */ class UrlString {
    get urlString() {
        return this._urlString;
    }
    constructor(url){
        this._urlString = url;
        if (!this._urlString) // Throws error if url is empty
        throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.urlEmptyError));
        if (!url.includes("#")) this._urlString = UrlString.canonicalizeUri(url);
    }
    /**
     * Ensure urls are lower case and end with a / character.
     * @param url
     */ static canonicalizeUri(url) {
        if (url) {
            let lowerCaseUrl = url.toLowerCase();
            if ((0, _stringUtilsMjs.StringUtils).endsWith(lowerCaseUrl, "?")) lowerCaseUrl = lowerCaseUrl.slice(0, -1);
            else if ((0, _stringUtilsMjs.StringUtils).endsWith(lowerCaseUrl, "?/")) lowerCaseUrl = lowerCaseUrl.slice(0, -2);
            if (!(0, _stringUtilsMjs.StringUtils).endsWith(lowerCaseUrl, "/")) lowerCaseUrl += "/";
            return lowerCaseUrl;
        }
        return url;
    }
    /**
     * Throws if urlString passed is not a valid authority URI string.
     */ validateAsUri() {
        // Attempts to parse url for uri components
        let components;
        try {
            components = this.getUrlComponents();
        } catch (e) {
            throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.urlParseError));
        }
        // Throw error if URI or path segments are not parseable.
        if (!components.HostNameAndPort || !components.PathSegments) throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.urlParseError));
        // Throw error if uri is insecure.
        if (!components.Protocol || components.Protocol.toLowerCase() !== "https:") throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.authorityUriInsecure));
    }
    /**
     * Given a url and a query string return the url with provided query string appended
     * @param url
     * @param queryString
     */ static appendQueryString(url, queryString) {
        if (!queryString) return url;
        return url.indexOf("?") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;
    }
    /**
     * Returns a url with the hash removed
     * @param url
     */ static removeHashFromUrl(url) {
        return UrlString.canonicalizeUri(url.split("#")[0]);
    }
    /**
     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d
     * @param href The url
     * @param tenantId The tenant id to replace
     */ replaceTenantPath(tenantId) {
        const urlObject = this.getUrlComponents();
        const pathArray = urlObject.PathSegments;
        if (tenantId && pathArray.length !== 0 && (pathArray[0] === (0, _constantsMjs.AADAuthorityConstants).COMMON || pathArray[0] === (0, _constantsMjs.AADAuthorityConstants).ORGANIZATIONS)) pathArray[0] = tenantId;
        return UrlString.constructAuthorityUriFromObject(urlObject);
    }
    /**
     * Parses out the components from a url string.
     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.
     */ getUrlComponents() {
        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0
        const regEx = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
        // If url string does not match regEx, we throw an error
        const match = this.urlString.match(regEx);
        if (!match) throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.urlParseError));
        // Url component object
        const urlComponents = {
            Protocol: match[1],
            HostNameAndPort: match[4],
            AbsolutePath: match[5],
            QueryString: match[7]
        };
        let pathSegments = urlComponents.AbsolutePath.split("/");
        pathSegments = pathSegments.filter((val)=>val && val.length > 0); // remove empty elements
        urlComponents.PathSegments = pathSegments;
        if (urlComponents.QueryString && urlComponents.QueryString.endsWith("/")) urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);
        return urlComponents;
    }
    static getDomainFromUrl(url) {
        const regEx = RegExp("^([^:/?#]+://)?([^/?#]*)");
        const match = url.match(regEx);
        if (!match) throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.urlParseError));
        return match[2];
    }
    static getAbsoluteUrl(relativeUrl, baseUrl) {
        if (relativeUrl[0] === (0, _constantsMjs.Constants).FORWARD_SLASH) {
            const url = new UrlString(baseUrl);
            const baseComponents = url.getUrlComponents();
            return baseComponents.Protocol + "//" + baseComponents.HostNameAndPort + relativeUrl;
        }
        return relativeUrl;
    }
    static constructAuthorityUriFromObject(urlObject) {
        return new UrlString(urlObject.Protocol + "//" + urlObject.HostNameAndPort + "/" + urlObject.PathSegments.join("/"));
    }
    /**
     * Check if the hash of the URL string contains known properties
     * @deprecated This API will be removed in a future version
     */ static hashContainsKnownProperties(response) {
        return !!(0, _urlUtilsMjs.getDeserializedResponse)(response);
    }
}

},{"../error/ClientConfigurationError.mjs":"byrV8","../utils/StringUtils.mjs":"7KUNp","../utils/Constants.mjs":"81leO","../utils/UrlUtils.mjs":"cbBNR","../error/ClientConfigurationErrorCodes.mjs":"7O3No","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"cbBNR":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDeserializedResponse", ()=>getDeserializedResponse);
parcelHelpers.export(exports, "mapToQueryString", ()=>mapToQueryString);
parcelHelpers.export(exports, "normalizeUrlForComparison", ()=>normalizeUrlForComparison);
parcelHelpers.export(exports, "stripLeadingHashOrQuery", ()=>stripLeadingHashOrQuery);
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _stringUtilsMjs = require("./StringUtils.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Canonicalizes a URL by making it lowercase and ensuring it ends with /
 * Inlined version of UrlString.canonicalizeUri to avoid circular dependency
 * @param url - URL to canonicalize
 * @returns Canonicalized URL
 */ function canonicalizeUrl(url) {
    if (!url) return url;
    let lowerCaseUrl = url.toLowerCase();
    if ((0, _stringUtilsMjs.StringUtils).endsWith(lowerCaseUrl, "?")) lowerCaseUrl = lowerCaseUrl.slice(0, -1);
    else if ((0, _stringUtilsMjs.StringUtils).endsWith(lowerCaseUrl, "?/")) lowerCaseUrl = lowerCaseUrl.slice(0, -2);
    if (!(0, _stringUtilsMjs.StringUtils).endsWith(lowerCaseUrl, "/")) lowerCaseUrl += "/";
    return lowerCaseUrl;
}
/**
 * Parses hash string from given string. Returns empty string if no hash symbol is found.
 * @param hashString
 */ function stripLeadingHashOrQuery(responseString) {
    if (responseString.startsWith("#/")) return responseString.substring(2);
    else if (responseString.startsWith("#") || responseString.startsWith("?")) return responseString.substring(1);
    return responseString;
}
/**
 * Returns URL hash as server auth code response object.
 */ function getDeserializedResponse(responseString) {
    // Check if given hash is empty
    if (!responseString || responseString.indexOf("=") < 0) return null;
    try {
        // Strip the # or ? symbol if present
        const normalizedResponse = stripLeadingHashOrQuery(responseString);
        // If # symbol was not present, above will return empty string, so give original hash value
        const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));
        // Check for known response properties
        if (deserializedHash.code || deserializedHash.ear_jwe || deserializedHash.error || deserializedHash.error_description || deserializedHash.state) return deserializedHash;
    } catch (e) {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.hashNotDeserialized));
    }
    return null;
}
/**
 * Utility to create a URL from the params map
 */ function mapToQueryString(parameters, encodeExtraParams = true, extraQueryParameters) {
    const queryParameterArray = new Array();
    parameters.forEach((value, key)=>{
        if (!encodeExtraParams && extraQueryParameters && key in extraQueryParameters) queryParameterArray.push(`${key}=${value}`);
        else queryParameterArray.push(`${key}=${encodeURIComponent(value)}`);
    });
    return queryParameterArray.join("&");
}
/**
 * Normalizes URLs for comparison by removing hash, canonicalizing,
 * and ensuring consistent URL encoding in query parameters.
 * This fixes redirect loops when URLs contain encoded characters like apostrophes (%27).
 * @param url - URL to normalize
 * @returns Normalized URL string for comparison
 */ function normalizeUrlForComparison(url) {
    if (!url) return url;
    // Remove hash first
    const urlWithoutHash = url.split("#")[0];
    try {
        // Parse the URL to handle encoding consistently
        const urlObj = new URL(urlWithoutHash);
        /*
         * Reconstruct the URL with properly decoded query parameters
         * This ensures that %27 and ' are treated as equivalent
         */ const normalizedUrl = urlObj.origin + urlObj.pathname + urlObj.search;
        // Apply canonicalization logic inline to avoid circular dependency
        return canonicalizeUrl(normalizedUrl);
    } catch (e) {
        // Fallback to original logic if URL parsing fails
        return canonicalizeUrl(urlWithoutHash);
    }
}

},{"../error/ClientAuthError.mjs":"dZZgC","./StringUtils.mjs":"7KUNp","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"37jD6":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheErrorCodes", ()=>_cacheErrorCodesMjs);
parcelHelpers.export(exports, "CacheError", ()=>CacheError);
parcelHelpers.export(exports, "CacheErrorMessages", ()=>CacheErrorMessages);
parcelHelpers.export(exports, "createCacheError", ()=>createCacheError);
var _authErrorMjs = require("./AuthError.mjs");
var _cacheErrorCodesMjs = require("./CacheErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const CacheErrorMessages = {
    [(0, _cacheErrorCodesMjs.cacheQuotaExceeded)]: "Exceeded cache storage capacity.",
    [(0, _cacheErrorCodesMjs.cacheErrorUnknown)]: "Unexpected error occurred when using cache storage."
};
/**
 * Error thrown when there is an error with the cache
 */ class CacheError extends (0, _authErrorMjs.AuthError) {
    constructor(errorCode, errorMessage){
        const message = errorMessage || (CacheErrorMessages[errorCode] ? CacheErrorMessages[errorCode] : CacheErrorMessages[0, _cacheErrorCodesMjs.cacheErrorUnknown]);
        super(`${errorCode}: ${message}`);
        Object.setPrototypeOf(this, CacheError.prototype);
        this.name = "CacheError";
        this.errorCode = errorCode;
        this.errorMessage = message;
    }
}
/**
 * Helper function to wrap browser errors in a CacheError object
 * @param e
 * @returns
 */ function createCacheError(e) {
    if (!(e instanceof Error)) return new CacheError((0, _cacheErrorCodesMjs.cacheErrorUnknown));
    if (e.name === "QuotaExceededError" || e.name === "NS_ERROR_DOM_QUOTA_REACHED" || e.message.includes("exceeded the quota")) return new CacheError((0, _cacheErrorCodesMjs.cacheQuotaExceeded));
    else return new CacheError(e.name, e.message);
}

},{"./AuthError.mjs":"jXpbF","./CacheErrorCodes.mjs":"ixPvB","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"ixPvB":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cacheErrorUnknown", ()=>cacheErrorUnknown);
parcelHelpers.export(exports, "cacheQuotaExceeded", ()=>cacheQuotaExceeded);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const cacheQuotaExceeded = "cache_quota_exceeded";
const cacheErrorUnknown = "cache_error_unknown";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"lzGPv":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StubPerformanceClient", ()=>StubPerformanceClient);
parcelHelpers.export(exports, "StubPerformanceMeasurement", ()=>StubPerformanceMeasurement);
var _performanceEventMjs = require("./PerformanceEvent.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class StubPerformanceMeasurement {
    startMeasurement() {
        return;
    }
    endMeasurement() {
        return;
    }
    flushMeasurement() {
        return null;
    }
}
class StubPerformanceClient {
    generateId() {
        return "callback-id";
    }
    startMeasurement(measureName, correlationId) {
        return {
            end: ()=>null,
            discard: ()=>{},
            add: ()=>{},
            increment: ()=>{},
            event: {
                eventId: this.generateId(),
                status: (0, _performanceEventMjs.PerformanceEventStatus).InProgress,
                authority: "",
                libraryName: "",
                libraryVersion: "",
                clientId: "",
                name: measureName,
                startTimeMs: Date.now(),
                correlationId: correlationId || ""
            },
            measurement: new StubPerformanceMeasurement()
        };
    }
    startPerformanceMeasurement() {
        return new StubPerformanceMeasurement();
    }
    calculateQueuedTime() {
        return 0;
    }
    addQueueMeasurement() {
        return;
    }
    setPreQueueTime() {
        return;
    }
    endMeasurement() {
        return null;
    }
    discardMeasurements() {
        return;
    }
    removePerformanceCallback() {
        return true;
    }
    addPerformanceCallback() {
        return "";
    }
    emitEvents() {
        return;
    }
    addFields() {
        return;
    }
    incrementFields() {
        return;
    }
    cacheEventByCorrelationId() {
        return;
    }
}

},{"./PerformanceEvent.mjs":"dxcJF","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"dxcJF":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IntFields", ()=>IntFields);
parcelHelpers.export(exports, "PerformanceEventAbbreviations", ()=>PerformanceEventAbbreviations);
parcelHelpers.export(exports, "PerformanceEventStatus", ()=>PerformanceEventStatus);
parcelHelpers.export(exports, "PerformanceEvents", ()=>PerformanceEvents);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.
 *
 * @export
 * @enum {number}
 */ const PerformanceEvents = {
    /**
     * acquireTokenByCode API (msal-browser and msal-node).
     * Used to acquire tokens by trading an authorization code against the token endpoint.
     */ AcquireTokenByCode: "acquireTokenByCode",
    /**
     * acquireTokenByRefreshToken API (msal-browser and msal-node).
     * Used to renew an access token using a refresh token against the token endpoint.
     */ AcquireTokenByRefreshToken: "acquireTokenByRefreshToken",
    /**
     * acquireTokenSilent API (msal-browser and msal-node).
     * Used to silently acquire a new access token (from the cache or the network).
     */ AcquireTokenSilent: "acquireTokenSilent",
    /**
     * acquireTokenSilentAsync (msal-browser).
     * Internal API for acquireTokenSilent.
     */ AcquireTokenSilentAsync: "acquireTokenSilentAsync",
    /**
     * acquireTokenPopup (msal-browser).
     * Used to acquire a new access token interactively through pop ups
     */ AcquireTokenPopup: "acquireTokenPopup",
    /**
     * acquireTokenPreRedirect (msal-browser).
     * First part of the redirect flow.
     * Used to acquire a new access token interactively through redirects.
     */ AcquireTokenPreRedirect: "acquireTokenPreRedirect",
    /**
     * acquireTokenRedirect (msal-browser).
     * Second part of the redirect flow.
     * Used to acquire a new access token interactively through redirects.
     */ AcquireTokenRedirect: "acquireTokenRedirect",
    /**
     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).
     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.
     */ CryptoOptsGetPublicKeyThumbprint: "cryptoOptsGetPublicKeyThumbprint",
    /**
     * signJwt API in CryptoOpts class (msal-browser).
     * Used to signed a pop token.
     */ CryptoOptsSignJwt: "cryptoOptsSignJwt",
    /**
     * acquireToken API in the SilentCacheClient class (msal-browser).
     * Used to read access tokens from the cache.
     */ SilentCacheClientAcquireToken: "silentCacheClientAcquireToken",
    /**
     * acquireToken API in the SilentIframeClient class (msal-browser).
     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.
     */ SilentIframeClientAcquireToken: "silentIframeClientAcquireToken",
    AwaitConcurrentIframe: "awaitConcurrentIframe",
    /**
     * acquireToken API in SilentRereshClient (msal-browser).
     * Used to acquire a new set of tokens from the token endpoint using a refresh token.
     */ SilentRefreshClientAcquireToken: "silentRefreshClientAcquireToken",
    /**
     * ssoSilent API (msal-browser).
     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.
     */ SsoSilent: "ssoSilent",
    /**
     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).
     * Used to load authority metadata for a request.
     */ StandardInteractionClientGetDiscoveredAuthority: "standardInteractionClientGetDiscoveredAuthority",
    /**
     * acquireToken APIs in msal-browser.
     * Used to make an /authorize endpoint call with native brokering enabled.
     */ FetchAccountIdWithNativeBroker: "fetchAccountIdWithNativeBroker",
    /**
     * acquireToken API in NativeInteractionClient class (msal-browser).
     * Used to acquire a token from Native component when native brokering is enabled.
     */ NativeInteractionClientAcquireToken: "nativeInteractionClientAcquireToken",
    /**
     * Time spent creating default headers for requests to token endpoint
     */ BaseClientCreateTokenRequestHeaders: "baseClientCreateTokenRequestHeaders",
    /**
     * Time spent sending/waiting for the response of a request to the token endpoint
     */ NetworkClientSendPostRequestAsync: "networkClientSendPostRequestAsync",
    RefreshTokenClientExecutePostToTokenEndpoint: "refreshTokenClientExecutePostToTokenEndpoint",
    AuthorizationCodeClientExecutePostToTokenEndpoint: "authorizationCodeClientExecutePostToTokenEndpoint",
    /**
     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).
     */ BrokerHandhshake: "brokerHandshake",
    /**
     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .
     */ AcquireTokenByRefreshTokenInBroker: "acquireTokenByRefreshTokenInBroker",
    /**
     * Time taken for token acquisition by broker
     */ AcquireTokenByBroker: "acquireTokenByBroker",
    /**
     * Time spent on the network for refresh token acquisition
     */ RefreshTokenClientExecuteTokenRequest: "refreshTokenClientExecuteTokenRequest",
    /**
     * Time taken for acquiring refresh token , records RT size
     */ RefreshTokenClientAcquireToken: "refreshTokenClientAcquireToken",
    /**
     * Time taken for acquiring cached refresh token
     */ RefreshTokenClientAcquireTokenWithCachedRefreshToken: "refreshTokenClientAcquireTokenWithCachedRefreshToken",
    /**
     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).
     */ RefreshTokenClientAcquireTokenByRefreshToken: "refreshTokenClientAcquireTokenByRefreshToken",
    /**
     * Helper function to create token request body in RefreshTokenClient (msal-common).
     */ RefreshTokenClientCreateTokenRequestBody: "refreshTokenClientCreateTokenRequestBody",
    /**
     * acquireTokenFromCache (msal-browser).
     * Internal API for acquiring token from cache
     */ AcquireTokenFromCache: "acquireTokenFromCache",
    SilentFlowClientAcquireCachedToken: "silentFlowClientAcquireCachedToken",
    SilentFlowClientGenerateResultFromCacheRecord: "silentFlowClientGenerateResultFromCacheRecord",
    /**
     * acquireTokenBySilentIframe (msal-browser).
     * Internal API for acquiring token by silent Iframe
     */ AcquireTokenBySilentIframe: "acquireTokenBySilentIframe",
    /**
     * Internal API for initializing base request in BaseInteractionClient (msal-browser)
     */ InitializeBaseRequest: "initializeBaseRequest",
    /**
     * Internal API for initializing silent request in SilentCacheClient (msal-browser)
     */ InitializeSilentRequest: "initializeSilentRequest",
    InitializeClientApplication: "initializeClientApplication",
    InitializeCache: "initializeCache",
    /**
     * Helper function in SilentIframeClient class (msal-browser).
     */ SilentIframeClientTokenHelper: "silentIframeClientTokenHelper",
    /**
     * SilentHandler
     */ SilentHandlerInitiateAuthRequest: "silentHandlerInitiateAuthRequest",
    SilentHandlerMonitorIframeForHash: "silentHandlerMonitorIframeForHash",
    SilentHandlerLoadFrame: "silentHandlerLoadFrame",
    SilentHandlerLoadFrameSync: "silentHandlerLoadFrameSync",
    /**
     * Helper functions in StandardInteractionClient class (msal-browser)
     */ StandardInteractionClientCreateAuthCodeClient: "standardInteractionClientCreateAuthCodeClient",
    StandardInteractionClientGetClientConfiguration: "standardInteractionClientGetClientConfiguration",
    StandardInteractionClientInitializeAuthorizationRequest: "standardInteractionClientInitializeAuthorizationRequest",
    /**
     * getAuthCodeUrl API (msal-browser and msal-node).
     */ GetAuthCodeUrl: "getAuthCodeUrl",
    GetStandardParams: "getStandardParams",
    /**
     * Functions from InteractionHandler (msal-browser)
     */ HandleCodeResponseFromServer: "handleCodeResponseFromServer",
    HandleCodeResponse: "handleCodeResponse",
    HandleResponseEar: "handleResponseEar",
    HandleResponsePlatformBroker: "handleResponsePlatformBroker",
    HandleResponseCode: "handleResponseCode",
    UpdateTokenEndpointAuthority: "updateTokenEndpointAuthority",
    /**
     * APIs in Authorization Code Client (msal-common)
     */ AuthClientAcquireToken: "authClientAcquireToken",
    AuthClientExecuteTokenRequest: "authClientExecuteTokenRequest",
    AuthClientCreateTokenRequestBody: "authClientCreateTokenRequestBody",
    /**
     * Generate functions in PopTokenGenerator (msal-common)
     */ PopTokenGenerateCnf: "popTokenGenerateCnf",
    PopTokenGenerateKid: "popTokenGenerateKid",
    /**
     * handleServerTokenResponse API in ResponseHandler (msal-common)
     */ HandleServerTokenResponse: "handleServerTokenResponse",
    DeserializeResponse: "deserializeResponse",
    /**
     * Authority functions
     */ AuthorityFactoryCreateDiscoveredInstance: "authorityFactoryCreateDiscoveredInstance",
    AuthorityResolveEndpointsAsync: "authorityResolveEndpointsAsync",
    AuthorityResolveEndpointsFromLocalSources: "authorityResolveEndpointsFromLocalSources",
    AuthorityGetCloudDiscoveryMetadataFromNetwork: "authorityGetCloudDiscoveryMetadataFromNetwork",
    AuthorityUpdateCloudDiscoveryMetadata: "authorityUpdateCloudDiscoveryMetadata",
    AuthorityGetEndpointMetadataFromNetwork: "authorityGetEndpointMetadataFromNetwork",
    AuthorityUpdateEndpointMetadata: "authorityUpdateEndpointMetadata",
    AuthorityUpdateMetadataWithRegionalInformation: "authorityUpdateMetadataWithRegionalInformation",
    /**
     * Region Discovery functions
     */ RegionDiscoveryDetectRegion: "regionDiscoveryDetectRegion",
    RegionDiscoveryGetRegionFromIMDS: "regionDiscoveryGetRegionFromIMDS",
    RegionDiscoveryGetCurrentVersion: "regionDiscoveryGetCurrentVersion",
    AcquireTokenByCodeAsync: "acquireTokenByCodeAsync",
    GetEndpointMetadataFromNetwork: "getEndpointMetadataFromNetwork",
    GetCloudDiscoveryMetadataFromNetworkMeasurement: "getCloudDiscoveryMetadataFromNetworkMeasurement",
    HandleRedirectPromiseMeasurement: "handleRedirectPromise",
    HandleNativeRedirectPromiseMeasurement: "handleNativeRedirectPromise",
    UpdateCloudDiscoveryMetadataMeasurement: "updateCloudDiscoveryMetadataMeasurement",
    UsernamePasswordClientAcquireToken: "usernamePasswordClientAcquireToken",
    NativeMessageHandlerHandshake: "nativeMessageHandlerHandshake",
    NativeGenerateAuthResult: "nativeGenerateAuthResult",
    RemoveHiddenIframe: "removeHiddenIframe",
    /**
     * Cache operations
     */ ClearTokensAndKeysWithClaims: "clearTokensAndKeysWithClaims",
    CacheManagerGetRefreshToken: "cacheManagerGetRefreshToken",
    ImportExistingCache: "importExistingCache",
    SetUserData: "setUserData",
    LocalStorageUpdated: "localStorageUpdated",
    /**
     * Crypto Operations
     */ GeneratePkceCodes: "generatePkceCodes",
    GenerateCodeVerifier: "generateCodeVerifier",
    GenerateCodeChallengeFromVerifier: "generateCodeChallengeFromVerifier",
    Sha256Digest: "sha256Digest",
    GetRandomValues: "getRandomValues",
    GenerateHKDF: "generateHKDF",
    GenerateBaseKey: "generateBaseKey",
    Base64Decode: "base64Decode",
    UrlEncodeArr: "urlEncodeArr",
    Encrypt: "encrypt",
    Decrypt: "decrypt",
    GenerateEarKey: "generateEarKey",
    DecryptEarResponse: "decryptEarResponse"
};
const PerformanceEventAbbreviations = new Map([
    [
        PerformanceEvents.AcquireTokenByCode,
        "ATByCode"
    ],
    [
        PerformanceEvents.AcquireTokenByRefreshToken,
        "ATByRT"
    ],
    [
        PerformanceEvents.AcquireTokenSilent,
        "ATS"
    ],
    [
        PerformanceEvents.AcquireTokenSilentAsync,
        "ATSAsync"
    ],
    [
        PerformanceEvents.AcquireTokenPopup,
        "ATPopup"
    ],
    [
        PerformanceEvents.AcquireTokenRedirect,
        "ATRedirect"
    ],
    [
        PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,
        "CryptoGetPKThumb"
    ],
    [
        PerformanceEvents.CryptoOptsSignJwt,
        "CryptoSignJwt"
    ],
    [
        PerformanceEvents.SilentCacheClientAcquireToken,
        "SltCacheClientAT"
    ],
    [
        PerformanceEvents.SilentIframeClientAcquireToken,
        "SltIframeClientAT"
    ],
    [
        PerformanceEvents.SilentRefreshClientAcquireToken,
        "SltRClientAT"
    ],
    [
        PerformanceEvents.SsoSilent,
        "SsoSlt"
    ],
    [
        PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,
        "StdIntClientGetDiscAuth"
    ],
    [
        PerformanceEvents.FetchAccountIdWithNativeBroker,
        "FetchAccIdWithNtvBroker"
    ],
    [
        PerformanceEvents.NativeInteractionClientAcquireToken,
        "NtvIntClientAT"
    ],
    [
        PerformanceEvents.BaseClientCreateTokenRequestHeaders,
        "BaseClientCreateTReqHead"
    ],
    [
        PerformanceEvents.NetworkClientSendPostRequestAsync,
        "NetClientSendPost"
    ],
    [
        PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,
        "RTClientExecPost"
    ],
    [
        PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,
        "AuthCodeClientExecPost"
    ],
    [
        PerformanceEvents.BrokerHandhshake,
        "BrokerHandshake"
    ],
    [
        PerformanceEvents.AcquireTokenByRefreshTokenInBroker,
        "ATByRTInBroker"
    ],
    [
        PerformanceEvents.AcquireTokenByBroker,
        "ATByBroker"
    ],
    [
        PerformanceEvents.RefreshTokenClientExecuteTokenRequest,
        "RTClientExecTReq"
    ],
    [
        PerformanceEvents.RefreshTokenClientAcquireToken,
        "RTClientAT"
    ],
    [
        PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,
        "RTClientATWithCachedRT"
    ],
    [
        PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,
        "RTClientATByRT"
    ],
    [
        PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,
        "RTClientCreateTReqBody"
    ],
    [
        PerformanceEvents.AcquireTokenFromCache,
        "ATFromCache"
    ],
    [
        PerformanceEvents.SilentFlowClientAcquireCachedToken,
        "SltFlowClientATCached"
    ],
    [
        PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,
        "SltFlowClientGenResFromCache"
    ],
    [
        PerformanceEvents.AcquireTokenBySilentIframe,
        "ATBySltIframe"
    ],
    [
        PerformanceEvents.InitializeBaseRequest,
        "InitBaseReq"
    ],
    [
        PerformanceEvents.InitializeSilentRequest,
        "InitSltReq"
    ],
    [
        PerformanceEvents.InitializeClientApplication,
        "InitClientApplication"
    ],
    [
        PerformanceEvents.InitializeCache,
        "InitCache"
    ],
    [
        PerformanceEvents.ImportExistingCache,
        "importCache"
    ],
    [
        PerformanceEvents.SetUserData,
        "setUserData"
    ],
    [
        PerformanceEvents.LocalStorageUpdated,
        "localStorageUpdated"
    ],
    [
        PerformanceEvents.SilentIframeClientTokenHelper,
        "SIClientTHelper"
    ],
    [
        PerformanceEvents.SilentHandlerInitiateAuthRequest,
        "SHandlerInitAuthReq"
    ],
    [
        PerformanceEvents.SilentHandlerMonitorIframeForHash,
        "SltHandlerMonitorIframeForHash"
    ],
    [
        PerformanceEvents.SilentHandlerLoadFrame,
        "SHandlerLoadFrame"
    ],
    [
        PerformanceEvents.SilentHandlerLoadFrameSync,
        "SHandlerLoadFrameSync"
    ],
    [
        PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,
        "StdIntClientCreateAuthCodeClient"
    ],
    [
        PerformanceEvents.StandardInteractionClientGetClientConfiguration,
        "StdIntClientGetClientConf"
    ],
    [
        PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,
        "StdIntClientInitAuthReq"
    ],
    [
        PerformanceEvents.GetAuthCodeUrl,
        "GetAuthCodeUrl"
    ],
    [
        PerformanceEvents.HandleCodeResponseFromServer,
        "HandleCodeResFromServer"
    ],
    [
        PerformanceEvents.HandleCodeResponse,
        "HandleCodeResp"
    ],
    [
        PerformanceEvents.HandleResponseEar,
        "HandleRespEar"
    ],
    [
        PerformanceEvents.HandleResponseCode,
        "HandleRespCode"
    ],
    [
        PerformanceEvents.HandleResponsePlatformBroker,
        "HandleRespPlatBroker"
    ],
    [
        PerformanceEvents.UpdateTokenEndpointAuthority,
        "UpdTEndpointAuth"
    ],
    [
        PerformanceEvents.AuthClientAcquireToken,
        "AuthClientAT"
    ],
    [
        PerformanceEvents.AuthClientExecuteTokenRequest,
        "AuthClientExecTReq"
    ],
    [
        PerformanceEvents.AuthClientCreateTokenRequestBody,
        "AuthClientCreateTReqBody"
    ],
    [
        PerformanceEvents.PopTokenGenerateCnf,
        "PopTGenCnf"
    ],
    [
        PerformanceEvents.PopTokenGenerateKid,
        "PopTGenKid"
    ],
    [
        PerformanceEvents.HandleServerTokenResponse,
        "HandleServerTRes"
    ],
    [
        PerformanceEvents.DeserializeResponse,
        "DeserializeRes"
    ],
    [
        PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,
        "AuthFactCreateDiscInst"
    ],
    [
        PerformanceEvents.AuthorityResolveEndpointsAsync,
        "AuthResolveEndpointsAsync"
    ],
    [
        PerformanceEvents.AuthorityResolveEndpointsFromLocalSources,
        "AuthResolveEndpointsFromLocal"
    ],
    [
        PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,
        "AuthGetCDMetaFromNet"
    ],
    [
        PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,
        "AuthUpdCDMeta"
    ],
    [
        PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,
        "AuthUpdCDMetaFromNet"
    ],
    [
        PerformanceEvents.AuthorityUpdateEndpointMetadata,
        "AuthUpdEndpointMeta"
    ],
    [
        PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,
        "AuthUpdMetaWithRegInfo"
    ],
    [
        PerformanceEvents.RegionDiscoveryDetectRegion,
        "RegDiscDetectReg"
    ],
    [
        PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,
        "RegDiscGetRegFromIMDS"
    ],
    [
        PerformanceEvents.RegionDiscoveryGetCurrentVersion,
        "RegDiscGetCurrentVer"
    ],
    [
        PerformanceEvents.AcquireTokenByCodeAsync,
        "ATByCodeAsync"
    ],
    [
        PerformanceEvents.GetEndpointMetadataFromNetwork,
        "GetEndpointMetaFromNet"
    ],
    [
        PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement,
        "GetCDMetaFromNet"
    ],
    [
        PerformanceEvents.HandleRedirectPromiseMeasurement,
        "HandleRedirectPromise"
    ],
    [
        PerformanceEvents.HandleNativeRedirectPromiseMeasurement,
        "HandleNtvRedirectPromise"
    ],
    [
        PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement,
        "UpdateCDMeta"
    ],
    [
        PerformanceEvents.UsernamePasswordClientAcquireToken,
        "UserPassClientAT"
    ],
    [
        PerformanceEvents.NativeMessageHandlerHandshake,
        "NtvMsgHandlerHandshake"
    ],
    [
        PerformanceEvents.NativeGenerateAuthResult,
        "NtvGenAuthRes"
    ],
    [
        PerformanceEvents.RemoveHiddenIframe,
        "RemoveHiddenIframe"
    ],
    [
        PerformanceEvents.ClearTokensAndKeysWithClaims,
        "ClearTAndKeysWithClaims"
    ],
    [
        PerformanceEvents.CacheManagerGetRefreshToken,
        "CacheManagerGetRT"
    ],
    [
        PerformanceEvents.GeneratePkceCodes,
        "GenPkceCodes"
    ],
    [
        PerformanceEvents.GenerateCodeVerifier,
        "GenCodeVerifier"
    ],
    [
        PerformanceEvents.GenerateCodeChallengeFromVerifier,
        "GenCodeChallengeFromVerifier"
    ],
    [
        PerformanceEvents.Sha256Digest,
        "Sha256Digest"
    ],
    [
        PerformanceEvents.GetRandomValues,
        "GetRandomValues"
    ],
    [
        PerformanceEvents.GenerateHKDF,
        "genHKDF"
    ],
    [
        PerformanceEvents.GenerateBaseKey,
        "genBaseKey"
    ],
    [
        PerformanceEvents.Base64Decode,
        "b64Decode"
    ],
    [
        PerformanceEvents.UrlEncodeArr,
        "urlEncArr"
    ],
    [
        PerformanceEvents.Encrypt,
        "encrypt"
    ],
    [
        PerformanceEvents.Decrypt,
        "decrypt"
    ],
    [
        PerformanceEvents.GenerateEarKey,
        "genEarKey"
    ],
    [
        PerformanceEvents.DecryptEarResponse,
        "decryptEarResp"
    ]
]);
/**
 * State of the performance event.
 *
 * @export
 * @enum {number}
 */ const PerformanceEventStatus = {
    NotStarted: 0,
    InProgress: 1,
    Completed: 2
};
const IntFields = new Set([
    "accessTokenSize",
    "durationMs",
    "idTokenSize",
    "matsSilentStatus",
    "matsHttpStatus",
    "refreshTokenSize",
    "queuedTimeMs",
    "startTimeMs",
    "status",
    "multiMatchedAT",
    "multiMatchedID",
    "multiMatchedRT",
    "unencryptedCacheCount",
    "encryptedCacheExpiredCount",
    "oldAccountCount",
    "oldAccessCount",
    "oldIdCount",
    "oldRefreshCount",
    "currAccountCount",
    "currAccessCount",
    "currIdCount",
    "currRefreshCount",
    "expiredCacheRemovedCount",
    "upgradedCacheCount"
]);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"bOumO":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CcsCredentialType", ()=>CcsCredentialType);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const CcsCredentialType = {
    HOME_ACCOUNT_ID: "home_account_id",
    UPN: "UPN"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"cR5CB":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addApplicationTelemetry", ()=>addApplicationTelemetry);
parcelHelpers.export(exports, "addAuthorizationCode", ()=>addAuthorizationCode);
parcelHelpers.export(exports, "addBrokerParameters", ()=>addBrokerParameters);
parcelHelpers.export(exports, "addCcsOid", ()=>addCcsOid);
parcelHelpers.export(exports, "addCcsUpn", ()=>addCcsUpn);
parcelHelpers.export(exports, "addClaims", ()=>addClaims);
parcelHelpers.export(exports, "addClientAssertion", ()=>addClientAssertion);
parcelHelpers.export(exports, "addClientAssertionType", ()=>addClientAssertionType);
parcelHelpers.export(exports, "addClientCapabilitiesToClaims", ()=>addClientCapabilitiesToClaims);
parcelHelpers.export(exports, "addClientId", ()=>addClientId);
parcelHelpers.export(exports, "addClientInfo", ()=>addClientInfo);
parcelHelpers.export(exports, "addClientSecret", ()=>addClientSecret);
parcelHelpers.export(exports, "addCodeChallengeParams", ()=>addCodeChallengeParams);
parcelHelpers.export(exports, "addCodeVerifier", ()=>addCodeVerifier);
parcelHelpers.export(exports, "addCorrelationId", ()=>addCorrelationId);
parcelHelpers.export(exports, "addDeviceCode", ()=>addDeviceCode);
parcelHelpers.export(exports, "addDomainHint", ()=>addDomainHint);
parcelHelpers.export(exports, "addEARParameters", ()=>addEARParameters);
parcelHelpers.export(exports, "addExtraQueryParameters", ()=>addExtraQueryParameters);
parcelHelpers.export(exports, "addGrantType", ()=>addGrantType);
parcelHelpers.export(exports, "addIdTokenHint", ()=>addIdTokenHint);
parcelHelpers.export(exports, "addInstanceAware", ()=>addInstanceAware);
parcelHelpers.export(exports, "addLibraryInfo", ()=>addLibraryInfo);
parcelHelpers.export(exports, "addLoginHint", ()=>addLoginHint);
parcelHelpers.export(exports, "addLogoutHint", ()=>addLogoutHint);
parcelHelpers.export(exports, "addNativeBroker", ()=>addNativeBroker);
parcelHelpers.export(exports, "addNonce", ()=>addNonce);
parcelHelpers.export(exports, "addOboAssertion", ()=>addOboAssertion);
parcelHelpers.export(exports, "addPassword", ()=>addPassword);
parcelHelpers.export(exports, "addPopToken", ()=>addPopToken);
parcelHelpers.export(exports, "addPostBodyParameters", ()=>addPostBodyParameters);
parcelHelpers.export(exports, "addPostLogoutRedirectUri", ()=>addPostLogoutRedirectUri);
parcelHelpers.export(exports, "addPrompt", ()=>addPrompt);
parcelHelpers.export(exports, "addRedirectUri", ()=>addRedirectUri);
parcelHelpers.export(exports, "addRefreshToken", ()=>addRefreshToken);
parcelHelpers.export(exports, "addRequestTokenUse", ()=>addRequestTokenUse);
parcelHelpers.export(exports, "addResponseMode", ()=>addResponseMode);
parcelHelpers.export(exports, "addResponseType", ()=>addResponseType);
parcelHelpers.export(exports, "addScopes", ()=>addScopes);
parcelHelpers.export(exports, "addServerTelemetry", ()=>addServerTelemetry);
parcelHelpers.export(exports, "addSid", ()=>addSid);
parcelHelpers.export(exports, "addSshJwk", ()=>addSshJwk);
parcelHelpers.export(exports, "addState", ()=>addState);
parcelHelpers.export(exports, "addThrottling", ()=>addThrottling);
parcelHelpers.export(exports, "addUsername", ()=>addUsername);
parcelHelpers.export(exports, "instrumentBrokerParams", ()=>instrumentBrokerParams);
var _constantsMjs = require("../utils/Constants.mjs");
var _aadserverParamKeysMjs = require("../constants/AADServerParamKeys.mjs");
var _scopeSetMjs = require("./ScopeSet.mjs");
var _clientConfigurationErrorMjs = require("../error/ClientConfigurationError.mjs");
var _clientConfigurationErrorCodesMjs = require("../error/ClientConfigurationErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function instrumentBrokerParams(parameters, correlationId, performanceClient) {
    if (!correlationId) return;
    const clientId = parameters.get((0, _aadserverParamKeysMjs.CLIENT_ID));
    if (clientId && parameters.has((0, _aadserverParamKeysMjs.BROKER_CLIENT_ID))) performanceClient?.addFields({
        embeddedClientId: clientId,
        embeddedRedirectUri: parameters.get((0, _aadserverParamKeysMjs.REDIRECT_URI))
    }, correlationId);
}
/**
 * Add the given response_type
 * @param parameters
 * @param responseType
 */ function addResponseType(parameters, responseType) {
    parameters.set((0, _aadserverParamKeysMjs.RESPONSE_TYPE), responseType);
}
/**
 * add response_mode. defaults to query.
 * @param responseMode
 */ function addResponseMode(parameters, responseMode) {
    parameters.set((0, _aadserverParamKeysMjs.RESPONSE_MODE), responseMode ? responseMode : (0, _constantsMjs.ResponseMode).QUERY);
}
/**
 * Add flag to indicate STS should attempt to use WAM if available
 */ function addNativeBroker(parameters) {
    parameters.set((0, _aadserverParamKeysMjs.NATIVE_BROKER), "1");
}
/**
 * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios
 * @param scopeSet
 * @param addOidcScopes
 */ function addScopes(parameters, scopes, addOidcScopes = true, defaultScopes = (0, _constantsMjs.OIDC_DEFAULT_SCOPES)) {
    // Always add openid to the scopes when adding OIDC scopes
    if (addOidcScopes && !defaultScopes.includes("openid") && !scopes.includes("openid")) defaultScopes.push("openid");
    const requestScopes = addOidcScopes ? [
        ...scopes || [],
        ...defaultScopes
    ] : scopes || [];
    const scopeSet = new (0, _scopeSetMjs.ScopeSet)(requestScopes);
    parameters.set((0, _aadserverParamKeysMjs.SCOPE), scopeSet.printScopes());
}
/**
 * add clientId
 * @param clientId
 */ function addClientId(parameters, clientId) {
    parameters.set((0, _aadserverParamKeysMjs.CLIENT_ID), clientId);
}
/**
 * add redirect_uri
 * @param redirectUri
 */ function addRedirectUri(parameters, redirectUri) {
    parameters.set((0, _aadserverParamKeysMjs.REDIRECT_URI), redirectUri);
}
/**
 * add post logout redirectUri
 * @param redirectUri
 */ function addPostLogoutRedirectUri(parameters, redirectUri) {
    parameters.set((0, _aadserverParamKeysMjs.POST_LOGOUT_URI), redirectUri);
}
/**
 * add id_token_hint to logout request
 * @param idTokenHint
 */ function addIdTokenHint(parameters, idTokenHint) {
    parameters.set((0, _aadserverParamKeysMjs.ID_TOKEN_HINT), idTokenHint);
}
/**
 * add domain_hint
 * @param domainHint
 */ function addDomainHint(parameters, domainHint) {
    parameters.set((0, _aadserverParamKeysMjs.DOMAIN_HINT), domainHint);
}
/**
 * add login_hint
 * @param loginHint
 */ function addLoginHint(parameters, loginHint) {
    parameters.set((0, _aadserverParamKeysMjs.LOGIN_HINT), loginHint);
}
/**
 * Adds the CCS (Cache Credential Service) query parameter for login_hint
 * @param loginHint
 */ function addCcsUpn(parameters, loginHint) {
    parameters.set((0, _constantsMjs.HeaderNames).CCS_HEADER, `UPN:${loginHint}`);
}
/**
 * Adds the CCS (Cache Credential Service) query parameter for account object
 * @param loginHint
 */ function addCcsOid(parameters, clientInfo) {
    parameters.set((0, _constantsMjs.HeaderNames).CCS_HEADER, `Oid:${clientInfo.uid}@${clientInfo.utid}`);
}
/**
 * add sid
 * @param sid
 */ function addSid(parameters, sid) {
    parameters.set((0, _aadserverParamKeysMjs.SID), sid);
}
/**
 * add claims
 * @param claims
 */ function addClaims(parameters, claims, clientCapabilities) {
    const mergedClaims = addClientCapabilitiesToClaims(claims, clientCapabilities);
    try {
        JSON.parse(mergedClaims);
    } catch (e) {
        throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.invalidClaims));
    }
    parameters.set((0, _aadserverParamKeysMjs.CLAIMS), mergedClaims);
}
/**
 * add correlationId
 * @param correlationId
 */ function addCorrelationId(parameters, correlationId) {
    parameters.set((0, _aadserverParamKeysMjs.CLIENT_REQUEST_ID), correlationId);
}
/**
 * add library info query params
 * @param libraryInfo
 */ function addLibraryInfo(parameters, libraryInfo) {
    // Telemetry Info
    parameters.set((0, _aadserverParamKeysMjs.X_CLIENT_SKU), libraryInfo.sku);
    parameters.set((0, _aadserverParamKeysMjs.X_CLIENT_VER), libraryInfo.version);
    if (libraryInfo.os) parameters.set((0, _aadserverParamKeysMjs.X_CLIENT_OS), libraryInfo.os);
    if (libraryInfo.cpu) parameters.set((0, _aadserverParamKeysMjs.X_CLIENT_CPU), libraryInfo.cpu);
}
/**
 * Add client telemetry parameters
 * @param appTelemetry
 */ function addApplicationTelemetry(parameters, appTelemetry) {
    if (appTelemetry?.appName) parameters.set((0, _aadserverParamKeysMjs.X_APP_NAME), appTelemetry.appName);
    if (appTelemetry?.appVersion) parameters.set((0, _aadserverParamKeysMjs.X_APP_VER), appTelemetry.appVersion);
}
/**
 * add prompt
 * @param prompt
 */ function addPrompt(parameters, prompt) {
    parameters.set((0, _aadserverParamKeysMjs.PROMPT), prompt);
}
/**
 * add state
 * @param state
 */ function addState(parameters, state) {
    if (state) parameters.set((0, _aadserverParamKeysMjs.STATE), state);
}
/**
 * add nonce
 * @param nonce
 */ function addNonce(parameters, nonce) {
    parameters.set((0, _aadserverParamKeysMjs.NONCE), nonce);
}
/**
 * add code_challenge and code_challenge_method
 * - throw if either of them are not passed
 * @param codeChallenge
 * @param codeChallengeMethod
 */ function addCodeChallengeParams(parameters, codeChallenge, codeChallengeMethod) {
    if (codeChallenge && codeChallengeMethod) {
        parameters.set((0, _aadserverParamKeysMjs.CODE_CHALLENGE), codeChallenge);
        parameters.set((0, _aadserverParamKeysMjs.CODE_CHALLENGE_METHOD), codeChallengeMethod);
    } else throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.pkceParamsMissing));
}
/**
 * add the `authorization_code` passed by the user to exchange for a token
 * @param code
 */ function addAuthorizationCode(parameters, code) {
    parameters.set((0, _aadserverParamKeysMjs.CODE), code);
}
/**
 * add the `authorization_code` passed by the user to exchange for a token
 * @param code
 */ function addDeviceCode(parameters, code) {
    parameters.set((0, _aadserverParamKeysMjs.DEVICE_CODE), code);
}
/**
 * add the `refreshToken` passed by the user
 * @param refreshToken
 */ function addRefreshToken(parameters, refreshToken) {
    parameters.set((0, _aadserverParamKeysMjs.REFRESH_TOKEN), refreshToken);
}
/**
 * add the `code_verifier` passed by the user to exchange for a token
 * @param codeVerifier
 */ function addCodeVerifier(parameters, codeVerifier) {
    parameters.set((0, _aadserverParamKeysMjs.CODE_VERIFIER), codeVerifier);
}
/**
 * add client_secret
 * @param clientSecret
 */ function addClientSecret(parameters, clientSecret) {
    parameters.set((0, _aadserverParamKeysMjs.CLIENT_SECRET), clientSecret);
}
/**
 * add clientAssertion for confidential client flows
 * @param clientAssertion
 */ function addClientAssertion(parameters, clientAssertion) {
    if (clientAssertion) parameters.set((0, _aadserverParamKeysMjs.CLIENT_ASSERTION), clientAssertion);
}
/**
 * add clientAssertionType for confidential client flows
 * @param clientAssertionType
 */ function addClientAssertionType(parameters, clientAssertionType) {
    if (clientAssertionType) parameters.set((0, _aadserverParamKeysMjs.CLIENT_ASSERTION_TYPE), clientAssertionType);
}
/**
 * add OBO assertion for confidential client flows
 * @param clientAssertion
 */ function addOboAssertion(parameters, oboAssertion) {
    parameters.set((0, _aadserverParamKeysMjs.OBO_ASSERTION), oboAssertion);
}
/**
 * add grant type
 * @param grantType
 */ function addRequestTokenUse(parameters, tokenUse) {
    parameters.set((0, _aadserverParamKeysMjs.REQUESTED_TOKEN_USE), tokenUse);
}
/**
 * add grant type
 * @param grantType
 */ function addGrantType(parameters, grantType) {
    parameters.set((0, _aadserverParamKeysMjs.GRANT_TYPE), grantType);
}
/**
 * add client info
 *
 */ function addClientInfo(parameters) {
    parameters.set((0, _constantsMjs.CLIENT_INFO), "1");
}
function addInstanceAware(parameters) {
    if (!parameters.has((0, _aadserverParamKeysMjs.INSTANCE_AWARE))) parameters.set((0, _aadserverParamKeysMjs.INSTANCE_AWARE), "true");
}
/**
 * add extraQueryParams
 * @param eQParams
 */ function addExtraQueryParameters(parameters, eQParams) {
    Object.entries(eQParams).forEach(([key, value])=>{
        if (!parameters.has(key) && value) parameters.set(key, value);
    });
}
function addClientCapabilitiesToClaims(claims, clientCapabilities) {
    let mergedClaims;
    // Parse provided claims into JSON object or initialize empty object
    if (!claims) mergedClaims = {};
    else try {
        mergedClaims = JSON.parse(claims);
    } catch (e) {
        throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.invalidClaims));
    }
    if (clientCapabilities && clientCapabilities.length > 0) {
        if (!mergedClaims.hasOwnProperty((0, _constantsMjs.ClaimsRequestKeys).ACCESS_TOKEN)) // Add access_token key to claims object
        mergedClaims[(0, _constantsMjs.ClaimsRequestKeys).ACCESS_TOKEN] = {};
        // Add xms_cc claim with provided clientCapabilities to access_token key
        mergedClaims[(0, _constantsMjs.ClaimsRequestKeys).ACCESS_TOKEN][(0, _constantsMjs.ClaimsRequestKeys).XMS_CC] = {
            values: clientCapabilities
        };
    }
    return JSON.stringify(mergedClaims);
}
/**
 * adds `username` for Password Grant flow
 * @param username
 */ function addUsername(parameters, username) {
    parameters.set((0, _constantsMjs.PasswordGrantConstants).username, username);
}
/**
 * adds `password` for Password Grant flow
 * @param password
 */ function addPassword(parameters, password) {
    parameters.set((0, _constantsMjs.PasswordGrantConstants).password, password);
}
/**
 * add pop_jwk to query params
 * @param cnfString
 */ function addPopToken(parameters, cnfString) {
    if (cnfString) {
        parameters.set((0, _aadserverParamKeysMjs.TOKEN_TYPE), (0, _constantsMjs.AuthenticationScheme).POP);
        parameters.set((0, _aadserverParamKeysMjs.REQ_CNF), cnfString);
    }
}
/**
 * add SSH JWK and key ID to query params
 */ function addSshJwk(parameters, sshJwkString) {
    if (sshJwkString) {
        parameters.set((0, _aadserverParamKeysMjs.TOKEN_TYPE), (0, _constantsMjs.AuthenticationScheme).SSH);
        parameters.set((0, _aadserverParamKeysMjs.REQ_CNF), sshJwkString);
    }
}
/**
 * add server telemetry fields
 * @param serverTelemetryManager
 */ function addServerTelemetry(parameters, serverTelemetryManager) {
    parameters.set((0, _aadserverParamKeysMjs.X_CLIENT_CURR_TELEM), serverTelemetryManager.generateCurrentRequestHeaderValue());
    parameters.set((0, _aadserverParamKeysMjs.X_CLIENT_LAST_TELEM), serverTelemetryManager.generateLastRequestHeaderValue());
}
/**
 * Adds parameter that indicates to the server that throttling is supported
 */ function addThrottling(parameters) {
    parameters.set((0, _aadserverParamKeysMjs.X_MS_LIB_CAPABILITY), (0, _constantsMjs.ThrottlingConstants).X_MS_LIB_CAPABILITY_VALUE);
}
/**
 * Adds logout_hint parameter for "silent" logout which prevent server account picker
 */ function addLogoutHint(parameters, logoutHint) {
    parameters.set((0, _aadserverParamKeysMjs.LOGOUT_HINT), logoutHint);
}
function addBrokerParameters(parameters, brokerClientId, brokerRedirectUri) {
    if (!parameters.has((0, _aadserverParamKeysMjs.BROKER_CLIENT_ID))) parameters.set((0, _aadserverParamKeysMjs.BROKER_CLIENT_ID), brokerClientId);
    if (!parameters.has((0, _aadserverParamKeysMjs.BROKER_REDIRECT_URI))) parameters.set((0, _aadserverParamKeysMjs.BROKER_REDIRECT_URI), brokerRedirectUri);
}
/**
 * Add EAR (Encrypted Authorize Response) request parameters
 * @param parameters
 * @param jwk
 */ function addEARParameters(parameters, jwk) {
    parameters.set((0, _aadserverParamKeysMjs.EAR_JWK), encodeURIComponent(jwk));
    // ear_jwe_crypto will always have value: {"alg":"dir","enc":"A256GCM"} so we can hardcode this
    const jweCryptoB64Encoded = "eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0";
    parameters.set((0, _aadserverParamKeysMjs.EAR_JWE_CRYPTO), jweCryptoB64Encoded);
}
/**
 * Adds authorize body parameters to the request parameters
 * @param parameters
 * @param bodyParameters
 */ function addPostBodyParameters(parameters, bodyParameters) {
    Object.entries(bodyParameters).forEach(([key, value])=>{
        if (value) parameters.set(key, value);
    });
}

},{"../utils/Constants.mjs":"81leO","../constants/AADServerParamKeys.mjs":"kwWCE","./ScopeSet.mjs":"hiTkN","../error/ClientConfigurationError.mjs":"byrV8","../error/ClientConfigurationErrorCodes.mjs":"7O3No","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"kwWCE":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ACCESS_TOKEN", ()=>ACCESS_TOKEN);
parcelHelpers.export(exports, "BROKER_CLIENT_ID", ()=>BROKER_CLIENT_ID);
parcelHelpers.export(exports, "BROKER_REDIRECT_URI", ()=>BROKER_REDIRECT_URI);
parcelHelpers.export(exports, "CCS_HEADER", ()=>CCS_HEADER);
parcelHelpers.export(exports, "CLAIMS", ()=>CLAIMS);
parcelHelpers.export(exports, "CLIENT_ASSERTION", ()=>CLIENT_ASSERTION);
parcelHelpers.export(exports, "CLIENT_ASSERTION_TYPE", ()=>CLIENT_ASSERTION_TYPE);
parcelHelpers.export(exports, "CLIENT_ID", ()=>CLIENT_ID);
parcelHelpers.export(exports, "CLIENT_INFO", ()=>CLIENT_INFO);
parcelHelpers.export(exports, "CLIENT_REQUEST_ID", ()=>CLIENT_REQUEST_ID);
parcelHelpers.export(exports, "CLIENT_SECRET", ()=>CLIENT_SECRET);
parcelHelpers.export(exports, "CODE", ()=>CODE);
parcelHelpers.export(exports, "CODE_CHALLENGE", ()=>CODE_CHALLENGE);
parcelHelpers.export(exports, "CODE_CHALLENGE_METHOD", ()=>CODE_CHALLENGE_METHOD);
parcelHelpers.export(exports, "CODE_VERIFIER", ()=>CODE_VERIFIER);
parcelHelpers.export(exports, "DEVICE_CODE", ()=>DEVICE_CODE);
parcelHelpers.export(exports, "DOMAIN_HINT", ()=>DOMAIN_HINT);
parcelHelpers.export(exports, "EAR_JWE_CRYPTO", ()=>EAR_JWE_CRYPTO);
parcelHelpers.export(exports, "EAR_JWK", ()=>EAR_JWK);
parcelHelpers.export(exports, "ERROR", ()=>ERROR);
parcelHelpers.export(exports, "ERROR_DESCRIPTION", ()=>ERROR_DESCRIPTION);
parcelHelpers.export(exports, "EXPIRES_IN", ()=>EXPIRES_IN);
parcelHelpers.export(exports, "FOCI", ()=>FOCI);
parcelHelpers.export(exports, "GRANT_TYPE", ()=>GRANT_TYPE);
parcelHelpers.export(exports, "ID_TOKEN", ()=>ID_TOKEN);
parcelHelpers.export(exports, "ID_TOKEN_HINT", ()=>ID_TOKEN_HINT);
parcelHelpers.export(exports, "INSTANCE_AWARE", ()=>INSTANCE_AWARE);
parcelHelpers.export(exports, "LOGIN_HINT", ()=>LOGIN_HINT);
parcelHelpers.export(exports, "LOGOUT_HINT", ()=>LOGOUT_HINT);
parcelHelpers.export(exports, "NATIVE_BROKER", ()=>NATIVE_BROKER);
parcelHelpers.export(exports, "NONCE", ()=>NONCE);
parcelHelpers.export(exports, "OBO_ASSERTION", ()=>OBO_ASSERTION);
parcelHelpers.export(exports, "ON_BEHALF_OF", ()=>ON_BEHALF_OF);
parcelHelpers.export(exports, "POST_LOGOUT_URI", ()=>POST_LOGOUT_URI);
parcelHelpers.export(exports, "PROMPT", ()=>PROMPT);
parcelHelpers.export(exports, "REDIRECT_URI", ()=>REDIRECT_URI);
parcelHelpers.export(exports, "REFRESH_TOKEN", ()=>REFRESH_TOKEN);
parcelHelpers.export(exports, "REFRESH_TOKEN_EXPIRES_IN", ()=>REFRESH_TOKEN_EXPIRES_IN);
parcelHelpers.export(exports, "REQUESTED_TOKEN_USE", ()=>REQUESTED_TOKEN_USE);
parcelHelpers.export(exports, "REQ_CNF", ()=>REQ_CNF);
parcelHelpers.export(exports, "RESPONSE_MODE", ()=>RESPONSE_MODE);
parcelHelpers.export(exports, "RESPONSE_TYPE", ()=>RESPONSE_TYPE);
parcelHelpers.export(exports, "RETURN_SPA_CODE", ()=>RETURN_SPA_CODE);
parcelHelpers.export(exports, "SCOPE", ()=>SCOPE);
parcelHelpers.export(exports, "SESSION_STATE", ()=>SESSION_STATE);
parcelHelpers.export(exports, "SID", ()=>SID);
parcelHelpers.export(exports, "STATE", ()=>STATE);
parcelHelpers.export(exports, "TOKEN_TYPE", ()=>TOKEN_TYPE);
parcelHelpers.export(exports, "X_APP_NAME", ()=>X_APP_NAME);
parcelHelpers.export(exports, "X_APP_VER", ()=>X_APP_VER);
parcelHelpers.export(exports, "X_CLIENT_CPU", ()=>X_CLIENT_CPU);
parcelHelpers.export(exports, "X_CLIENT_CURR_TELEM", ()=>X_CLIENT_CURR_TELEM);
parcelHelpers.export(exports, "X_CLIENT_EXTRA_SKU", ()=>X_CLIENT_EXTRA_SKU);
parcelHelpers.export(exports, "X_CLIENT_LAST_TELEM", ()=>X_CLIENT_LAST_TELEM);
parcelHelpers.export(exports, "X_CLIENT_OS", ()=>X_CLIENT_OS);
parcelHelpers.export(exports, "X_CLIENT_SKU", ()=>X_CLIENT_SKU);
parcelHelpers.export(exports, "X_CLIENT_VER", ()=>X_CLIENT_VER);
parcelHelpers.export(exports, "X_MS_LIB_CAPABILITY", ()=>X_MS_LIB_CAPABILITY);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const CLIENT_ID = "client_id";
const REDIRECT_URI = "redirect_uri";
const RESPONSE_TYPE = "response_type";
const RESPONSE_MODE = "response_mode";
const GRANT_TYPE = "grant_type";
const CLAIMS = "claims";
const SCOPE = "scope";
const ERROR = "error";
const ERROR_DESCRIPTION = "error_description";
const ACCESS_TOKEN = "access_token";
const ID_TOKEN = "id_token";
const REFRESH_TOKEN = "refresh_token";
const EXPIRES_IN = "expires_in";
const REFRESH_TOKEN_EXPIRES_IN = "refresh_token_expires_in";
const STATE = "state";
const NONCE = "nonce";
const PROMPT = "prompt";
const SESSION_STATE = "session_state";
const CLIENT_INFO = "client_info";
const CODE = "code";
const CODE_CHALLENGE = "code_challenge";
const CODE_CHALLENGE_METHOD = "code_challenge_method";
const CODE_VERIFIER = "code_verifier";
const CLIENT_REQUEST_ID = "client-request-id";
const X_CLIENT_SKU = "x-client-SKU";
const X_CLIENT_VER = "x-client-VER";
const X_CLIENT_OS = "x-client-OS";
const X_CLIENT_CPU = "x-client-CPU";
const X_CLIENT_CURR_TELEM = "x-client-current-telemetry";
const X_CLIENT_LAST_TELEM = "x-client-last-telemetry";
const X_MS_LIB_CAPABILITY = "x-ms-lib-capability";
const X_APP_NAME = "x-app-name";
const X_APP_VER = "x-app-ver";
const POST_LOGOUT_URI = "post_logout_redirect_uri";
const ID_TOKEN_HINT = "id_token_hint";
const DEVICE_CODE = "device_code";
const CLIENT_SECRET = "client_secret";
const CLIENT_ASSERTION = "client_assertion";
const CLIENT_ASSERTION_TYPE = "client_assertion_type";
const TOKEN_TYPE = "token_type";
const REQ_CNF = "req_cnf";
const OBO_ASSERTION = "assertion";
const REQUESTED_TOKEN_USE = "requested_token_use";
const ON_BEHALF_OF = "on_behalf_of";
const FOCI = "foci";
const CCS_HEADER = "X-AnchorMailbox";
const RETURN_SPA_CODE = "return_spa_code";
const NATIVE_BROKER = "nativebroker";
const LOGOUT_HINT = "logout_hint";
const SID = "sid";
const LOGIN_HINT = "login_hint";
const DOMAIN_HINT = "domain_hint";
const X_CLIENT_EXTRA_SKU = "x-client-xtra-sku";
const BROKER_CLIENT_ID = "brk_client_id";
const BROKER_REDIRECT_URI = "brk_redirect_uri";
const INSTANCE_AWARE = "instance_aware";
const EAR_JWK = "ear_jwk";
const EAR_JWE_CRYPTO = "ear_jwe_crypto";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"i485B":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDiscoveredInstance", ()=>createDiscoveredInstance);
var _authorityMjs = require("./Authority.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _performanceEventMjs = require("../telemetry/performance/PerformanceEvent.mjs");
var _functionWrappersMjs = require("../utils/FunctionWrappers.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Create an authority object of the correct type based on the url
 * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
 *
 * Also performs endpoint discovery.
 *
 * @param authorityUri
 * @param networkClient
 * @param protocolMode
 * @internal
 */ async function createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient) {
    performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).AuthorityFactoryCreateDiscoveredInstance, correlationId);
    const authorityUriFinal = (0, _authorityMjs.Authority).transformCIAMAuthority((0, _authorityMjs.formatAuthorityUri)(authorityUri));
    // Initialize authority and perform discovery endpoint check.
    const acquireTokenAuthority = new (0, _authorityMjs.Authority)(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient);
    try {
        await (0, _functionWrappersMjs.invokeAsync)(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), (0, _performanceEventMjs.PerformanceEvents).AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();
        return acquireTokenAuthority;
    } catch (e) {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.endpointResolutionError));
    }
}

},{"./Authority.mjs":"aupyF","../error/ClientAuthError.mjs":"dZZgC","../telemetry/performance/PerformanceEvent.mjs":"dxcJF","../utils/FunctionWrappers.mjs":"cnW9d","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"aupyF":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Authority", ()=>Authority);
parcelHelpers.export(exports, "buildStaticAuthorityOptions", ()=>buildStaticAuthorityOptions);
parcelHelpers.export(exports, "formatAuthorityUri", ()=>formatAuthorityUri);
parcelHelpers.export(exports, "getTenantFromAuthorityString", ()=>getTenantFromAuthorityString);
var _authorityTypeMjs = require("./AuthorityType.mjs");
var _openIdConfigResponseMjs = require("./OpenIdConfigResponse.mjs");
var _urlStringMjs = require("../url/UrlString.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _authorityMetadataMjs = require("./AuthorityMetadata.mjs");
var _clientConfigurationErrorMjs = require("../error/ClientConfigurationError.mjs");
var _protocolModeMjs = require("./ProtocolMode.mjs");
var _authorityOptionsMjs = require("./AuthorityOptions.mjs");
var _cloudInstanceDiscoveryResponseMjs = require("./CloudInstanceDiscoveryResponse.mjs");
var _cloudInstanceDiscoveryErrorResponseMjs = require("./CloudInstanceDiscoveryErrorResponse.mjs");
var _regionDiscoveryMjs = require("./RegionDiscovery.mjs");
var _authErrorMjs = require("../error/AuthError.mjs");
var _performanceEventMjs = require("../telemetry/performance/PerformanceEvent.mjs");
var _functionWrappersMjs = require("../utils/FunctionWrappers.mjs");
var _cacheHelpersMjs = require("../cache/utils/CacheHelpers.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
var _clientConfigurationErrorCodesMjs = require("../error/ClientConfigurationErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the
 * endpoint. It will store the pertinent config data in this object for use during token calls.
 * @internal
 */ class Authority {
    constructor(authority, networkInterface, cacheManager, authorityOptions, logger, correlationId, performanceClient, managedIdentity){
        this.canonicalAuthority = authority;
        this._canonicalAuthority.validateAsUri();
        this.networkInterface = networkInterface;
        this.cacheManager = cacheManager;
        this.authorityOptions = authorityOptions;
        this.regionDiscoveryMetadata = {
            region_used: undefined,
            region_source: undefined,
            region_outcome: undefined
        };
        this.logger = logger;
        this.performanceClient = performanceClient;
        this.correlationId = correlationId;
        this.managedIdentity = managedIdentity || false;
        this.regionDiscovery = new (0, _regionDiscoveryMjs.RegionDiscovery)(networkInterface, this.logger, this.performanceClient, this.correlationId);
    }
    /**
     * Get {@link AuthorityType}
     * @param authorityUri {@link IUri}
     * @private
     */ getAuthorityType(authorityUri) {
        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com
        if (authorityUri.HostNameAndPort.endsWith((0, _constantsMjs.Constants).CIAM_AUTH_URL)) return (0, _authorityTypeMjs.AuthorityType).Ciam;
        const pathSegments = authorityUri.PathSegments;
        if (pathSegments.length) switch(pathSegments[0].toLowerCase()){
            case (0, _constantsMjs.Constants).ADFS:
                return (0, _authorityTypeMjs.AuthorityType).Adfs;
            case (0, _constantsMjs.Constants).DSTS:
                return (0, _authorityTypeMjs.AuthorityType).Dsts;
        }
        return (0, _authorityTypeMjs.AuthorityType).Default;
    }
    // See above for AuthorityType
    get authorityType() {
        return this.getAuthorityType(this.canonicalAuthorityUrlComponents);
    }
    /**
     * ProtocolMode enum representing the way endpoints are constructed.
     */ get protocolMode() {
        return this.authorityOptions.protocolMode;
    }
    /**
     * Returns authorityOptions which can be used to reinstantiate a new authority instance
     */ get options() {
        return this.authorityOptions;
    }
    /**
     * A URL that is the authority set by the developer
     */ get canonicalAuthority() {
        return this._canonicalAuthority.urlString;
    }
    /**
     * Sets canonical authority.
     */ set canonicalAuthority(url) {
        this._canonicalAuthority = new (0, _urlStringMjs.UrlString)(url);
        this._canonicalAuthority.validateAsUri();
        this._canonicalAuthorityUrlComponents = null;
    }
    /**
     * Get authority components.
     */ get canonicalAuthorityUrlComponents() {
        if (!this._canonicalAuthorityUrlComponents) this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();
        return this._canonicalAuthorityUrlComponents;
    }
    /**
     * Get hostname and port i.e. login.microsoftonline.com
     */ get hostnameAndPort() {
        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();
    }
    /**
     * Get tenant for authority.
     */ get tenant() {
        return this.canonicalAuthorityUrlComponents.PathSegments[0];
    }
    /**
     * OAuth /authorize endpoint for requests
     */ get authorizationEndpoint() {
        if (this.discoveryComplete()) return this.replacePath(this.metadata.authorization_endpoint);
        else throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.endpointResolutionError));
    }
    /**
     * OAuth /token endpoint for requests
     */ get tokenEndpoint() {
        if (this.discoveryComplete()) return this.replacePath(this.metadata.token_endpoint);
        else throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.endpointResolutionError));
    }
    get deviceCodeEndpoint() {
        if (this.discoveryComplete()) return this.replacePath(this.metadata.token_endpoint.replace("/token", "/devicecode"));
        else throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.endpointResolutionError));
    }
    /**
     * OAuth logout endpoint for requests
     */ get endSessionEndpoint() {
        if (this.discoveryComplete()) {
            // ROPC policies may not have end_session_endpoint set
            if (!this.metadata.end_session_endpoint) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.endSessionEndpointNotSupported));
            return this.replacePath(this.metadata.end_session_endpoint);
        } else throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.endpointResolutionError));
    }
    /**
     * OAuth issuer for requests
     */ get selfSignedJwtAudience() {
        if (this.discoveryComplete()) return this.replacePath(this.metadata.issuer);
        else throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.endpointResolutionError));
    }
    /**
     * Jwks_uri for token signing keys
     */ get jwksUri() {
        if (this.discoveryComplete()) return this.replacePath(this.metadata.jwks_uri);
        else throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.endpointResolutionError));
    }
    /**
     * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}
     * @param authorityUri {@link IUri}
     * @private
     */ canReplaceTenant(authorityUri) {
        return authorityUri.PathSegments.length === 1 && !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0]) && this.getAuthorityType(authorityUri) === (0, _authorityTypeMjs.AuthorityType).Default && this.protocolMode !== (0, _protocolModeMjs.ProtocolMode).OIDC;
    }
    /**
     * Replaces tenant in url path with current tenant. Defaults to common.
     * @param urlString
     */ replaceTenant(urlString) {
        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);
    }
    /**
     * Replaces path such as tenant or policy with the current tenant or policy.
     * @param urlString
     */ replacePath(urlString) {
        let endpoint = urlString;
        const cachedAuthorityUrl = new (0, _urlStringMjs.UrlString)(this.metadata.canonical_authority);
        const cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();
        const cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;
        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;
        currentAuthorityParts.forEach((currentPart, index)=>{
            let cachedPart = cachedAuthorityParts[index];
            if (index === 0 && this.canReplaceTenant(cachedAuthorityUrlComponents)) {
                const tenantId = new (0, _urlStringMjs.UrlString)(this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];
                /**
                 * Check if AAD canonical authority contains tenant domain name, for example "testdomain.onmicrosoft.com",
                 * by comparing its first path segment to the corresponding authorization endpoint path segment, which is
                 * always resolved with tenant id by OIDC.
                 */ if (cachedPart !== tenantId) {
                    this.logger.verbose(`Replacing tenant domain name ${cachedPart} with id ${tenantId}`);
                    cachedPart = tenantId;
                }
            }
            if (currentPart !== cachedPart) endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);
        });
        return this.replaceTenant(endpoint);
    }
    /**
     * The default open id configuration endpoint for any canonical authority.
     */ get defaultOpenIdConfigurationEndpoint() {
        const canonicalAuthorityHost = this.hostnameAndPort;
        if (this.canonicalAuthority.endsWith("v2.0/") || this.authorityType === (0, _authorityTypeMjs.AuthorityType).Adfs || this.protocolMode === (0, _protocolModeMjs.ProtocolMode).OIDC && !this.isAliasOfKnownMicrosoftAuthority(canonicalAuthorityHost)) return `${this.canonicalAuthority}.well-known/openid-configuration`;
        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;
    }
    /**
     * Boolean that returns whether or not tenant discovery has been completed.
     */ discoveryComplete() {
        return !!this.metadata;
    }
    /**
     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network
     * and the /authorize, /token and logout endpoints.
     */ async resolveEndpointsAsync() {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).AuthorityResolveEndpointsAsync, this.correlationId);
        const metadataEntity = this.getCurrentMetadataEntity();
        const cloudDiscoverySource = await (0, _functionWrappersMjs.invokeAsync)(this.updateCloudDiscoveryMetadata.bind(this), (0, _performanceEventMjs.PerformanceEvents).AuthorityUpdateCloudDiscoveryMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);
        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);
        const endpointSource = await (0, _functionWrappersMjs.invokeAsync)(this.updateEndpointMetadata.bind(this), (0, _performanceEventMjs.PerformanceEvents).AuthorityUpdateEndpointMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);
        this.updateCachedMetadata(metadataEntity, cloudDiscoverySource, {
            source: endpointSource
        });
        this.performanceClient?.addFields({
            cloudDiscoverySource: cloudDiscoverySource,
            authorityEndpointSource: endpointSource
        }, this.correlationId);
    }
    /**
     * Returns metadata entity from cache if it exists, otherwiser returns a new metadata entity built
     * from the configured canonical authority
     * @returns
     */ getCurrentMetadataEntity() {
        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);
        if (!metadataEntity) metadataEntity = {
            aliases: [],
            preferred_cache: this.hostnameAndPort,
            preferred_network: this.hostnameAndPort,
            canonical_authority: this.canonicalAuthority,
            authorization_endpoint: "",
            token_endpoint: "",
            end_session_endpoint: "",
            issuer: "",
            aliasesFromNetwork: false,
            endpointsFromNetwork: false,
            expiresAt: (0, _cacheHelpersMjs.generateAuthorityMetadataExpiresAt)(),
            jwks_uri: ""
        };
        return metadataEntity;
    }
    /**
     * Updates cached metadata based on metadata source and sets the instance's metadata
     * property to the same value
     * @param metadataEntity
     * @param cloudDiscoverySource
     * @param endpointMetadataResult
     */ updateCachedMetadata(metadataEntity, cloudDiscoverySource, endpointMetadataResult) {
        if (cloudDiscoverySource !== (0, _constantsMjs.AuthorityMetadataSource).CACHE && endpointMetadataResult?.source !== (0, _constantsMjs.AuthorityMetadataSource).CACHE) {
            // Reset the expiration time unless both values came from a successful cache lookup
            metadataEntity.expiresAt = (0, _cacheHelpersMjs.generateAuthorityMetadataExpiresAt)();
            metadataEntity.canonical_authority = this.canonicalAuthority;
        }
        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);
        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);
        this.metadata = metadataEntity;
    }
    /**
     * Update AuthorityMetadataEntity with new endpoints and return where the information came from
     * @param metadataEntity
     */ async updateEndpointMetadata(metadataEntity) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).AuthorityUpdateEndpointMetadata, this.correlationId);
        const localMetadata = this.updateEndpointMetadataFromLocalSources(metadataEntity);
        // Further update may be required for hardcoded metadata if regional metadata is preferred
        if (localMetadata) {
            if (localMetadata.source === (0, _constantsMjs.AuthorityMetadataSource).HARDCODED_VALUES) {
                // If the user prefers to use an azure region replace the global endpoints with regional information.
                if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {
                    if (localMetadata.metadata) {
                        const hardcodedMetadata = await (0, _functionWrappersMjs.invokeAsync)(this.updateMetadataWithRegionalInformation.bind(this), (0, _performanceEventMjs.PerformanceEvents).AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(localMetadata.metadata);
                        (0, _cacheHelpersMjs.updateAuthorityEndpointMetadata)(metadataEntity, hardcodedMetadata, false);
                        metadataEntity.canonical_authority = this.canonicalAuthority;
                    }
                }
            }
            return localMetadata.source;
        }
        // Get metadata from network if local sources aren't available
        let metadata = await (0, _functionWrappersMjs.invokeAsync)(this.getEndpointMetadataFromNetwork.bind(this), (0, _performanceEventMjs.PerformanceEvents).AuthorityGetEndpointMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();
        if (metadata) {
            // If the user prefers to use an azure region replace the global endpoints with regional information.
            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) metadata = await (0, _functionWrappersMjs.invokeAsync)(this.updateMetadataWithRegionalInformation.bind(this), (0, _performanceEventMjs.PerformanceEvents).AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(metadata);
            (0, _cacheHelpersMjs.updateAuthorityEndpointMetadata)(metadataEntity, metadata, true);
            return (0, _constantsMjs.AuthorityMetadataSource).NETWORK;
        } else // Metadata could not be obtained from the config, cache, network or hardcoded values
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.openIdConfigError), this.defaultOpenIdConfigurationEndpoint);
    }
    /**
     * Updates endpoint metadata from local sources and returns where the information was retrieved from and the metadata config
     * response if the source is hardcoded metadata
     * @param metadataEntity
     * @returns
     */ updateEndpointMetadataFromLocalSources(metadataEntity) {
        this.logger.verbose("Attempting to get endpoint metadata from authority configuration");
        const configMetadata = this.getEndpointMetadataFromConfig();
        if (configMetadata) {
            this.logger.verbose("Found endpoint metadata in authority configuration");
            (0, _cacheHelpersMjs.updateAuthorityEndpointMetadata)(metadataEntity, configMetadata, false);
            return {
                source: (0, _constantsMjs.AuthorityMetadataSource).CONFIG
            };
        }
        this.logger.verbose("Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values.");
        // skipAuthorityMetadataCache is used to bypass hardcoded authority metadata and force a network metadata cache lookup and network metadata request if no cached response is available.
        if (this.authorityOptions.skipAuthorityMetadataCache) this.logger.verbose("Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.");
        else {
            const hardcodedMetadata = this.getEndpointMetadataFromHardcodedValues();
            if (hardcodedMetadata) {
                (0, _cacheHelpersMjs.updateAuthorityEndpointMetadata)(metadataEntity, hardcodedMetadata, false);
                return {
                    source: (0, _constantsMjs.AuthorityMetadataSource).HARDCODED_VALUES,
                    metadata: hardcodedMetadata
                };
            } else this.logger.verbose("Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.");
        }
        // Check cached metadata entity expiration status
        const metadataEntityExpired = (0, _cacheHelpersMjs.isAuthorityMetadataExpired)(metadataEntity);
        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntityExpired) {
            // No need to update
            this.logger.verbose("Found endpoint metadata in the cache.");
            return {
                source: (0, _constantsMjs.AuthorityMetadataSource).CACHE
            };
        } else if (metadataEntityExpired) this.logger.verbose("The metadata entity is expired.");
        return null;
    }
    /**
     * Compares the number of url components after the domain to determine if the cached
     * authority metadata can be used for the requested authority. Protects against same domain different
     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy
     * @param metadataEntity
     */ isAuthoritySameType(metadataEntity) {
        const cachedAuthorityUrl = new (0, _urlStringMjs.UrlString)(metadataEntity.canonical_authority);
        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;
        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;
    }
    /**
     * Parse authorityMetadata config option
     */ getEndpointMetadataFromConfig() {
        if (this.authorityOptions.authorityMetadata) try {
            return JSON.parse(this.authorityOptions.authorityMetadata);
        } catch (e) {
            throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.invalidAuthorityMetadata));
        }
        return null;
    }
    /**
     * Gets OAuth endpoints from the given OpenID configuration endpoint.
     *
     * @param hasHardcodedMetadata boolean
     */ async getEndpointMetadataFromNetwork() {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).AuthorityGetEndpointMetadataFromNetwork, this.correlationId);
        const options = {};
        /*
         * TODO: Add a timeout if the authority exists in our library's
         * hardcoded list of metadata
         */ const openIdConfigurationEndpoint = this.defaultOpenIdConfigurationEndpoint;
        this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${openIdConfigurationEndpoint}`);
        try {
            const response = await this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint, options);
            const isValidResponse = (0, _openIdConfigResponseMjs.isOpenIdConfigResponse)(response.body);
            if (isValidResponse) return response.body;
            else {
                this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration`);
                return null;
            }
        } catch (e) {
            this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: ${e}`);
            return null;
        }
    }
    /**
     * Get OAuth endpoints for common authorities.
     */ getEndpointMetadataFromHardcodedValues() {
        if (this.hostnameAndPort in (0, _authorityMetadataMjs.EndpointMetadata)) return (0, _authorityMetadataMjs.EndpointMetadata)[this.hostnameAndPort];
        return null;
    }
    /**
     * Update the retrieved metadata with regional information.
     * User selected Azure region will be used if configured.
     */ async updateMetadataWithRegionalInformation(metadata) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);
        const userConfiguredAzureRegion = this.authorityOptions.azureRegionConfiguration?.azureRegion;
        if (userConfiguredAzureRegion) {
            if (userConfiguredAzureRegion !== (0, _constantsMjs.Constants).AZURE_REGION_AUTO_DISCOVER_FLAG) {
                this.regionDiscoveryMetadata.region_outcome = (0, _constantsMjs.RegionDiscoveryOutcomes).CONFIGURED_NO_AUTO_DETECTION;
                this.regionDiscoveryMetadata.region_used = userConfiguredAzureRegion;
                return Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion);
            }
            const autodetectedRegionName = await (0, _functionWrappersMjs.invokeAsync)(this.regionDiscovery.detectRegion.bind(this.regionDiscovery), (0, _performanceEventMjs.PerformanceEvents).RegionDiscoveryDetectRegion, this.logger, this.performanceClient, this.correlationId)(this.authorityOptions.azureRegionConfiguration?.environmentRegion, this.regionDiscoveryMetadata);
            if (autodetectedRegionName) {
                this.regionDiscoveryMetadata.region_outcome = (0, _constantsMjs.RegionDiscoveryOutcomes).AUTO_DETECTION_REQUESTED_SUCCESSFUL;
                this.regionDiscoveryMetadata.region_used = autodetectedRegionName;
                return Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName);
            }
            this.regionDiscoveryMetadata.region_outcome = (0, _constantsMjs.RegionDiscoveryOutcomes).AUTO_DETECTION_REQUESTED_FAILED;
        }
        return metadata;
    }
    /**
     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache
     * and returns where the information was retrieved from
     * @param metadataEntity
     * @returns AuthorityMetadataSource
     */ async updateCloudDiscoveryMetadata(metadataEntity) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);
        const localMetadataSource = this.updateCloudDiscoveryMetadataFromLocalSources(metadataEntity);
        if (localMetadataSource) return localMetadataSource;
        // Fallback to network as metadata source
        const metadata = await (0, _functionWrappersMjs.invokeAsync)(this.getCloudDiscoveryMetadataFromNetwork.bind(this), (0, _performanceEventMjs.PerformanceEvents).AuthorityGetCloudDiscoveryMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();
        if (metadata) {
            (0, _cacheHelpersMjs.updateCloudDiscoveryMetadata)(metadataEntity, metadata, true);
            return (0, _constantsMjs.AuthorityMetadataSource).NETWORK;
        }
        // Metadata could not be obtained from the config, cache, network or hardcoded values
        throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.untrustedAuthority));
    }
    updateCloudDiscoveryMetadataFromLocalSources(metadataEntity) {
        this.logger.verbose("Attempting to get cloud discovery metadata  from authority configuration");
        this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities || (0, _constantsMjs.Constants).NOT_APPLICABLE}`);
        this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata || (0, _constantsMjs.Constants).NOT_APPLICABLE}`);
        this.logger.verbosePii(`Canonical Authority: ${metadataEntity.canonical_authority || (0, _constantsMjs.Constants).NOT_APPLICABLE}`);
        const metadata = this.getCloudDiscoveryMetadataFromConfig();
        if (metadata) {
            this.logger.verbose("Found cloud discovery metadata in authority configuration");
            (0, _cacheHelpersMjs.updateCloudDiscoveryMetadata)(metadataEntity, metadata, false);
            return (0, _constantsMjs.AuthorityMetadataSource).CONFIG;
        }
        // If the cached metadata came from config but that config was not passed to this instance, we must go to hardcoded values
        this.logger.verbose("Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values.");
        if (this.options.skipAuthorityMetadataCache) this.logger.verbose("Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.");
        else {
            const hardcodedMetadata = (0, _authorityMetadataMjs.getCloudDiscoveryMetadataFromHardcodedValues)(this.hostnameAndPort);
            if (hardcodedMetadata) {
                this.logger.verbose("Found cloud discovery metadata from hardcoded values.");
                (0, _cacheHelpersMjs.updateCloudDiscoveryMetadata)(metadataEntity, hardcodedMetadata, false);
                return (0, _constantsMjs.AuthorityMetadataSource).HARDCODED_VALUES;
            }
            this.logger.verbose("Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.");
        }
        const metadataEntityExpired = (0, _cacheHelpersMjs.isAuthorityMetadataExpired)(metadataEntity);
        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntityExpired) {
            this.logger.verbose("Found cloud discovery metadata in the cache.");
            // No need to update
            return (0, _constantsMjs.AuthorityMetadataSource).CACHE;
        } else if (metadataEntityExpired) this.logger.verbose("The metadata entity is expired.");
        return null;
    }
    /**
     * Parse cloudDiscoveryMetadata config or check knownAuthorities
     */ getCloudDiscoveryMetadataFromConfig() {
        // CIAM does not support cloud discovery metadata
        if (this.authorityType === (0, _authorityTypeMjs.AuthorityType).Ciam) {
            this.logger.verbose("CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.");
            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
        }
        // Check if network response was provided in config
        if (this.authorityOptions.cloudDiscoveryMetadata) {
            this.logger.verbose("The cloud discovery metadata has been provided as a network response, in the config.");
            try {
                this.logger.verbose("Attempting to parse the cloud discovery metadata.");
                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);
                const metadata = (0, _authorityMetadataMjs.getCloudDiscoveryMetadataFromNetworkResponse)(parsedResponse.metadata, this.hostnameAndPort);
                this.logger.verbose("Parsed the cloud discovery metadata.");
                if (metadata) {
                    this.logger.verbose("There is returnable metadata attached to the parsed cloud discovery metadata.");
                    return metadata;
                } else this.logger.verbose("There is no metadata attached to the parsed cloud discovery metadata.");
            } catch (e) {
                this.logger.verbose("Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.");
                throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.invalidCloudDiscoveryMetadata));
            }
        }
        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities
        if (this.isInKnownAuthorities()) {
            this.logger.verbose("The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.");
            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
        }
        return null;
    }
    /**
     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config
     *
     * @param hasHardcodedMetadata boolean
     */ async getCloudDiscoveryMetadataFromNetwork() {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);
        const instanceDiscoveryEndpoint = `${(0, _constantsMjs.Constants).AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;
        const options = {};
        /*
         * TODO: Add a timeout if the authority exists in our library's
         * hardcoded list of metadata
         */ let match = null;
        try {
            const response = await this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options);
            let typedResponseBody;
            let metadata;
            if ((0, _cloudInstanceDiscoveryResponseMjs.isCloudInstanceDiscoveryResponse)(response.body)) {
                typedResponseBody = response.body;
                metadata = typedResponseBody.metadata;
                this.logger.verbosePii(`tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`);
            } else if ((0, _cloudInstanceDiscoveryErrorResponseMjs.isCloudInstanceDiscoveryErrorResponse)(response.body)) {
                this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`);
                typedResponseBody = response.body;
                if (typedResponseBody.error === (0, _constantsMjs.Constants).INVALID_INSTANCE) {
                    this.logger.error("The CloudInstanceDiscoveryErrorResponse error is invalid_instance.");
                    return null;
                }
                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`);
                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`);
                this.logger.warning("Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []");
                metadata = [];
            } else {
                this.logger.error("AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse");
                return null;
            }
            this.logger.verbose("Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.");
            match = (0, _authorityMetadataMjs.getCloudDiscoveryMetadataFromNetworkResponse)(metadata, this.hostnameAndPort);
        } catch (error) {
            if (error instanceof (0, _authErrorMjs.AuthError)) this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\nError: ${error.errorCode}\nError Description: ${error.errorMessage}`);
            else {
                const typedError = error;
                this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\nError: ${typedError.name}\nError Description: ${typedError.message}`);
            }
            return null;
        }
        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded
        if (!match) {
            this.logger.warning("The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.");
            this.logger.verbose("Creating custom Authority for custom domain scenario.");
            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
        }
        return match;
    }
    /**
     * Helper function to determine if this host is included in the knownAuthorities config option
     */ isInKnownAuthorities() {
        const matches = this.authorityOptions.knownAuthorities.filter((authority)=>{
            return authority && (0, _urlStringMjs.UrlString).getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;
        });
        return matches.length > 0;
    }
    /**
     * helper function to populate the authority based on azureCloudOptions
     * @param authorityString
     * @param azureCloudOptions
     */ static generateAuthority(authorityString, azureCloudOptions) {
        let authorityAzureCloudInstance;
        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== (0, _authorityOptionsMjs.AzureCloudInstance).None) {
            const tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : (0, _constantsMjs.Constants).DEFAULT_COMMON_TENANT;
            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;
        }
        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;
    }
    /**
     * Creates cloud discovery metadata object from a given host
     * @param host
     */ static createCloudDiscoveryMetadataFromHost(host) {
        return {
            preferred_network: host,
            preferred_cache: host,
            aliases: [
                host
            ]
        };
    }
    /**
     * helper function to generate environment from authority object
     */ getPreferredCache() {
        if (this.managedIdentity) return (0, _constantsMjs.Constants).DEFAULT_AUTHORITY_HOST;
        else if (this.discoveryComplete()) return this.metadata.preferred_cache;
        else throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.endpointResolutionError));
    }
    /**
     * Returns whether or not the provided host is an alias of this authority instance
     * @param host
     */ isAlias(host) {
        return this.metadata.aliases.indexOf(host) > -1;
    }
    /**
     * Returns whether or not the provided host is an alias of a known Microsoft authority for purposes of endpoint discovery
     * @param host
     */ isAliasOfKnownMicrosoftAuthority(host) {
        return (0, _authorityMetadataMjs.InstanceDiscoveryMetadataAliases).has(host);
    }
    /**
     * Checks whether the provided host is that of a public cloud authority
     *
     * @param authority string
     * @returns bool
     */ static isPublicCloudAuthority(host) {
        return (0, _constantsMjs.Constants).KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;
    }
    /**
     * Rebuild the authority string with the region
     *
     * @param host string
     * @param region string
     */ static buildRegionalAuthorityString(host, region, queryString) {
        // Create and validate a Url string object with the initial authority string
        const authorityUrlInstance = new (0, _urlStringMjs.UrlString)(host);
        authorityUrlInstance.validateAsUri();
        const authorityUrlParts = authorityUrlInstance.getUrlComponents();
        let hostNameAndPort = `${region}.${authorityUrlParts.HostNameAndPort}`;
        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) hostNameAndPort = `${region}.${(0, _constantsMjs.Constants).REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;
        // Include the query string portion of the url
        const url = (0, _urlStringMjs.UrlString).constructAuthorityUriFromObject({
            ...authorityUrlInstance.getUrlComponents(),
            HostNameAndPort: hostNameAndPort
        }).urlString;
        // Add the query string if a query string was provided
        if (queryString) return `${url}?${queryString}`;
        return url;
    }
    /**
     * Replace the endpoints in the metadata object with their regional equivalents.
     *
     * @param metadata OpenIdConfigResponse
     * @param azureRegion string
     */ static replaceWithRegionalInformation(metadata, azureRegion) {
        const regionalMetadata = {
            ...metadata
        };
        regionalMetadata.authorization_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.authorization_endpoint, azureRegion);
        regionalMetadata.token_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.token_endpoint, azureRegion);
        if (regionalMetadata.end_session_endpoint) regionalMetadata.end_session_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.end_session_endpoint, azureRegion);
        return regionalMetadata;
    }
    /**
     * Transform CIAM_AUTHORIY as per the below rules:
     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it
     *
     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`
     * `ciamlogin.com` can also change in the future and we should accommodate the same
     *
     * @param authority
     */ static transformCIAMAuthority(authority) {
        let ciamAuthority = authority;
        const authorityUrl = new (0, _urlStringMjs.UrlString)(authority);
        const authorityUrlComponents = authorityUrl.getUrlComponents();
        // check if transformation is needed
        if (authorityUrlComponents.PathSegments.length === 0 && authorityUrlComponents.HostNameAndPort.endsWith((0, _constantsMjs.Constants).CIAM_AUTH_URL)) {
            const tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(".")[0];
            ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${(0, _constantsMjs.Constants).AAD_TENANT_DOMAIN_SUFFIX}`;
        }
        return ciamAuthority;
    }
}
// Reserved tenant domain names that will not be replaced with tenant id
Authority.reservedTenantDomains = new Set([
    "{tenant}",
    "{tenantid}",
    (0, _constantsMjs.AADAuthorityConstants).COMMON,
    (0, _constantsMjs.AADAuthorityConstants).CONSUMERS,
    (0, _constantsMjs.AADAuthorityConstants).ORGANIZATIONS
]);
/**
 * Extract tenantId from authority
 */ function getTenantFromAuthorityString(authority) {
    const authorityUrl = new (0, _urlStringMjs.UrlString)(authority);
    const authorityUrlComponents = authorityUrl.getUrlComponents();
    /**
     * For credential matching purposes, tenantId is the last path segment of the authority URL:
     *  AAD Authority - domain/tenantId -> Credentials are cached with realm = tenantId
     *  B2C Authority - domain/{tenantId}?/.../policy -> Credentials are cached with realm = policy
     *  tenantId is downcased because B2C policies can have mixed case but tfp claim is downcased
     *
     * Note that we may not have any path segments in certain OIDC scenarios.
     */ const tenantId = authorityUrlComponents.PathSegments.slice(-1)[0]?.toLowerCase();
    switch(tenantId){
        case (0, _constantsMjs.AADAuthorityConstants).COMMON:
        case (0, _constantsMjs.AADAuthorityConstants).ORGANIZATIONS:
        case (0, _constantsMjs.AADAuthorityConstants).CONSUMERS:
            return undefined;
        default:
            return tenantId;
    }
}
function formatAuthorityUri(authorityUri) {
    return authorityUri.endsWith((0, _constantsMjs.Constants).FORWARD_SLASH) ? authorityUri : `${authorityUri}${(0, _constantsMjs.Constants).FORWARD_SLASH}`;
}
function buildStaticAuthorityOptions(authOptions) {
    const rawCloudDiscoveryMetadata = authOptions.cloudDiscoveryMetadata;
    let cloudDiscoveryMetadata = undefined;
    if (rawCloudDiscoveryMetadata) try {
        cloudDiscoveryMetadata = JSON.parse(rawCloudDiscoveryMetadata);
    } catch (e) {
        throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.invalidCloudDiscoveryMetadata));
    }
    return {
        canonicalAuthority: authOptions.authority ? formatAuthorityUri(authOptions.authority) : undefined,
        knownAuthorities: authOptions.knownAuthorities,
        cloudDiscoveryMetadata: cloudDiscoveryMetadata
    };
}

},{"./AuthorityType.mjs":"kfz6w","./OpenIdConfigResponse.mjs":"2Lisn","../url/UrlString.mjs":"53sIq","../error/ClientAuthError.mjs":"dZZgC","../utils/Constants.mjs":"81leO","./AuthorityMetadata.mjs":"jaz9Y","../error/ClientConfigurationError.mjs":"byrV8","./ProtocolMode.mjs":"c6YAB","./AuthorityOptions.mjs":"99vBp","./CloudInstanceDiscoveryResponse.mjs":"1BJus","./CloudInstanceDiscoveryErrorResponse.mjs":"6dmQ9","./RegionDiscovery.mjs":"iVCla","../error/AuthError.mjs":"jXpbF","../telemetry/performance/PerformanceEvent.mjs":"dxcJF","../utils/FunctionWrappers.mjs":"cnW9d","../cache/utils/CacheHelpers.mjs":"gAz9k","../error/ClientAuthErrorCodes.mjs":"dhVcy","../error/ClientConfigurationErrorCodes.mjs":"7O3No","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"2Lisn":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isOpenIdConfigResponse", ()=>isOpenIdConfigResponse);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function isOpenIdConfigResponse(response) {
    return response.hasOwnProperty("authorization_endpoint") && response.hasOwnProperty("token_endpoint") && response.hasOwnProperty("issuer") && response.hasOwnProperty("jwks_uri");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"1BJus":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isCloudInstanceDiscoveryResponse", ()=>isCloudInstanceDiscoveryResponse);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function isCloudInstanceDiscoveryResponse(response) {
    return response.hasOwnProperty("tenant_discovery_endpoint") && response.hasOwnProperty("metadata");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"6dmQ9":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isCloudInstanceDiscoveryErrorResponse", ()=>isCloudInstanceDiscoveryErrorResponse);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function isCloudInstanceDiscoveryErrorResponse(response) {
    return response.hasOwnProperty("error") && response.hasOwnProperty("error_description");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"iVCla":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RegionDiscovery", ()=>RegionDiscovery);
var _constantsMjs = require("../utils/Constants.mjs");
var _performanceEventMjs = require("../telemetry/performance/PerformanceEvent.mjs");
var _functionWrappersMjs = require("../utils/FunctionWrappers.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class RegionDiscovery {
    constructor(networkInterface, logger, performanceClient, correlationId){
        this.networkInterface = networkInterface;
        this.logger = logger;
        this.performanceClient = performanceClient;
        this.correlationId = correlationId;
    }
    /**
     * Detect the region from the application's environment.
     *
     * @returns Promise<string | null>
     */ async detectRegion(environmentRegion, regionDiscoveryMetadata) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).RegionDiscoveryDetectRegion, this.correlationId);
        // Initialize auto detected region with the region from the envrionment
        let autodetectedRegionName = environmentRegion;
        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS
        if (!autodetectedRegionName) {
            const options = RegionDiscovery.IMDS_OPTIONS;
            try {
                const localIMDSVersionResponse = await (0, _functionWrappersMjs.invokeAsync)(this.getRegionFromIMDS.bind(this), (0, _performanceEventMjs.PerformanceEvents).RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)((0, _constantsMjs.Constants).IMDS_VERSION, options);
                if (localIMDSVersionResponse.status === (0, _constantsMjs.HttpStatus).SUCCESS) {
                    autodetectedRegionName = localIMDSVersionResponse.body;
                    regionDiscoveryMetadata.region_source = (0, _constantsMjs.RegionDiscoverySources).IMDS;
                }
                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.
                if (localIMDSVersionResponse.status === (0, _constantsMjs.HttpStatus).BAD_REQUEST) {
                    const currentIMDSVersion = await (0, _functionWrappersMjs.invokeAsync)(this.getCurrentVersion.bind(this), (0, _performanceEventMjs.PerformanceEvents).RegionDiscoveryGetCurrentVersion, this.logger, this.performanceClient, this.correlationId)(options);
                    if (!currentIMDSVersion) {
                        regionDiscoveryMetadata.region_source = (0, _constantsMjs.RegionDiscoverySources).FAILED_AUTO_DETECTION;
                        return null;
                    }
                    const currentIMDSVersionResponse = await (0, _functionWrappersMjs.invokeAsync)(this.getRegionFromIMDS.bind(this), (0, _performanceEventMjs.PerformanceEvents).RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(currentIMDSVersion, options);
                    if (currentIMDSVersionResponse.status === (0, _constantsMjs.HttpStatus).SUCCESS) {
                        autodetectedRegionName = currentIMDSVersionResponse.body;
                        regionDiscoveryMetadata.region_source = (0, _constantsMjs.RegionDiscoverySources).IMDS;
                    }
                }
            } catch (e) {
                regionDiscoveryMetadata.region_source = (0, _constantsMjs.RegionDiscoverySources).FAILED_AUTO_DETECTION;
                return null;
            }
        } else regionDiscoveryMetadata.region_source = (0, _constantsMjs.RegionDiscoverySources).ENVIRONMENT_VARIABLE;
        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION
        if (!autodetectedRegionName) regionDiscoveryMetadata.region_source = (0, _constantsMjs.RegionDiscoverySources).FAILED_AUTO_DETECTION;
        return autodetectedRegionName || null;
    }
    /**
     * Make the call to the IMDS endpoint
     *
     * @param imdsEndpointUrl
     * @returns Promise<NetworkResponse<string>>
     */ async getRegionFromIMDS(version, options) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).RegionDiscoveryGetRegionFromIMDS, this.correlationId);
        return this.networkInterface.sendGetRequestAsync(`${(0, _constantsMjs.Constants).IMDS_ENDPOINT}?api-version=${version}&format=text`, options, (0, _constantsMjs.Constants).IMDS_TIMEOUT);
    }
    /**
     * Get the most recent version of the IMDS endpoint available
     *
     * @returns Promise<string | null>
     */ async getCurrentVersion(options) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).RegionDiscoveryGetCurrentVersion, this.correlationId);
        try {
            const response = await this.networkInterface.sendGetRequestAsync(`${(0, _constantsMjs.Constants).IMDS_ENDPOINT}?format=json`, options);
            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.
            if (response.status === (0, _constantsMjs.HttpStatus).BAD_REQUEST && response.body && response.body["newest-versions"] && response.body["newest-versions"].length > 0) return response.body["newest-versions"][0];
            return null;
        } catch (e) {
            return null;
        }
    }
}
// Options for the IMDS endpoint request
RegionDiscovery.IMDS_OPTIONS = {
    headers: {
        Metadata: "true"
    }
};

},{"../utils/Constants.mjs":"81leO","../telemetry/performance/PerformanceEvent.mjs":"dxcJF","../utils/FunctionWrappers.mjs":"cnW9d","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"cnW9d":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invoke", ()=>invoke);
parcelHelpers.export(exports, "invokeAsync", ()=>invokeAsync);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Wraps a function with a performance measurement.
 * Usage: invoke(functionToCall, performanceClient, "EventName", "correlationId")(...argsToPassToFunction)
 * @param callback
 * @param eventName
 * @param logger
 * @param telemetryClient
 * @param correlationId
 * @returns
 * @internal
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
const invoke = (callback, eventName, logger, telemetryClient, correlationId)=>{
    return (...args)=>{
        logger.trace(`Executing function ${eventName}`);
        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);
        if (correlationId) {
            // Track number of times this API is called in a single request
            const eventCount = eventName + "CallCount";
            telemetryClient?.incrementFields({
                [eventCount]: 1
            }, correlationId);
        }
        try {
            const result = callback(...args);
            inProgressEvent?.end({
                success: true
            });
            logger.trace(`Returning result from ${eventName}`);
            return result;
        } catch (e) {
            logger.trace(`Error occurred in ${eventName}`);
            try {
                logger.trace(JSON.stringify(e));
            } catch (e) {
                logger.trace("Unable to print error message.");
            }
            inProgressEvent?.end({
                success: false
            }, e);
            throw e;
        }
    };
};
/**
 * Wraps an async function with a performance measurement.
 * Usage: invokeAsync(functionToCall, performanceClient, "EventName", "correlationId")(...argsToPassToFunction)
 * @param callback
 * @param eventName
 * @param logger
 * @param telemetryClient
 * @param correlationId
 * @returns
 * @internal
 *
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
const invokeAsync = (callback, eventName, logger, telemetryClient, correlationId)=>{
    return (...args)=>{
        logger.trace(`Executing function ${eventName}`);
        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);
        if (correlationId) {
            // Track number of times this API is called in a single request
            const eventCount = eventName + "CallCount";
            telemetryClient?.incrementFields({
                [eventCount]: 1
            }, correlationId);
        }
        telemetryClient?.setPreQueueTime(eventName, correlationId);
        return callback(...args).then((response)=>{
            logger.trace(`Returning result from ${eventName}`);
            inProgressEvent?.end({
                success: true
            });
            return response;
        }).catch((e)=>{
            logger.trace(`Error occurred in ${eventName}`);
            try {
                logger.trace(JSON.stringify(e));
            } catch (e) {
                logger.trace("Unable to print error message.");
            }
            inProgressEvent?.end({
                success: false
            }, e);
            throw e;
        });
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"gAz9k":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAccessTokenEntity", ()=>createAccessTokenEntity);
parcelHelpers.export(exports, "createIdTokenEntity", ()=>createIdTokenEntity);
parcelHelpers.export(exports, "createRefreshTokenEntity", ()=>createRefreshTokenEntity);
parcelHelpers.export(exports, "generateAppMetadataKey", ()=>generateAppMetadataKey);
parcelHelpers.export(exports, "generateAuthorityMetadataExpiresAt", ()=>generateAuthorityMetadataExpiresAt);
parcelHelpers.export(exports, "isAccessTokenEntity", ()=>isAccessTokenEntity);
parcelHelpers.export(exports, "isAppMetadataEntity", ()=>isAppMetadataEntity);
parcelHelpers.export(exports, "isAuthorityMetadataEntity", ()=>isAuthorityMetadataEntity);
parcelHelpers.export(exports, "isAuthorityMetadataExpired", ()=>isAuthorityMetadataExpired);
parcelHelpers.export(exports, "isCredentialEntity", ()=>isCredentialEntity);
parcelHelpers.export(exports, "isIdTokenEntity", ()=>isIdTokenEntity);
parcelHelpers.export(exports, "isRefreshTokenEntity", ()=>isRefreshTokenEntity);
parcelHelpers.export(exports, "isServerTelemetryEntity", ()=>isServerTelemetryEntity);
parcelHelpers.export(exports, "isThrottlingEntity", ()=>isThrottlingEntity);
parcelHelpers.export(exports, "updateAuthorityEndpointMetadata", ()=>updateAuthorityEndpointMetadata);
parcelHelpers.export(exports, "updateCloudDiscoveryMetadata", ()=>updateCloudDiscoveryMetadata);
var _authTokenMjs = require("../../account/AuthToken.mjs");
var _clientAuthErrorMjs = require("../../error/ClientAuthError.mjs");
var _constantsMjs = require("../../utils/Constants.mjs");
var _timeUtilsMjs = require("../../utils/TimeUtils.mjs");
var _clientAuthErrorCodesMjs = require("../../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Create IdTokenEntity
 * @param homeAccountId
 * @param authenticationResult
 * @param clientId
 * @param authority
 */ function createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {
    const idTokenEntity = {
        credentialType: (0, _constantsMjs.CredentialType).ID_TOKEN,
        homeAccountId: homeAccountId,
        environment: environment,
        clientId: clientId,
        secret: idToken,
        realm: tenantId,
        lastUpdatedAt: Date.now().toString()
    };
    return idTokenEntity;
}
/**
 * Create AccessTokenEntity
 * @param homeAccountId
 * @param environment
 * @param accessToken
 * @param clientId
 * @param tenantId
 * @param scopes
 * @param expiresOn
 * @param extExpiresOn
 */ function createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {
    const atEntity = {
        homeAccountId: homeAccountId,
        credentialType: (0, _constantsMjs.CredentialType).ACCESS_TOKEN,
        secret: accessToken,
        cachedAt: (0, _timeUtilsMjs.nowSeconds)().toString(),
        expiresOn: expiresOn.toString(),
        extendedExpiresOn: extExpiresOn.toString(),
        environment: environment,
        clientId: clientId,
        realm: tenantId,
        target: scopes,
        tokenType: tokenType || (0, _constantsMjs.AuthenticationScheme).BEARER,
        lastUpdatedAt: Date.now().toString()
    };
    if (userAssertionHash) atEntity.userAssertionHash = userAssertionHash;
    if (refreshOn) atEntity.refreshOn = refreshOn.toString();
    if (requestedClaims) {
        atEntity.requestedClaims = requestedClaims;
        atEntity.requestedClaimsHash = requestedClaimsHash;
    }
    /*
     * Create Access Token With Auth Scheme instead of regular access token
     * Cast to lower to handle "bearer" from ADFS
     */ if (atEntity.tokenType?.toLowerCase() !== (0, _constantsMjs.AuthenticationScheme).BEARER.toLowerCase()) {
        atEntity.credentialType = (0, _constantsMjs.CredentialType).ACCESS_TOKEN_WITH_AUTH_SCHEME;
        switch(atEntity.tokenType){
            case (0, _constantsMjs.AuthenticationScheme).POP:
                // Make sure keyId is present and add it to credential
                const tokenClaims = (0, _authTokenMjs.extractTokenClaims)(accessToken, base64Decode);
                if (!tokenClaims?.cnf?.kid) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.tokenClaimsCnfRequiredForSignedJwt));
                atEntity.keyId = tokenClaims.cnf.kid;
                break;
            case (0, _constantsMjs.AuthenticationScheme).SSH:
                atEntity.keyId = keyId;
        }
    }
    return atEntity;
}
/**
 * Create RefreshTokenEntity
 * @param homeAccountId
 * @param authenticationResult
 * @param clientId
 * @param authority
 */ function createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash, expiresOn) {
    const rtEntity = {
        credentialType: (0, _constantsMjs.CredentialType).REFRESH_TOKEN,
        homeAccountId: homeAccountId,
        environment: environment,
        clientId: clientId,
        secret: refreshToken,
        lastUpdatedAt: Date.now().toString()
    };
    if (userAssertionHash) rtEntity.userAssertionHash = userAssertionHash;
    if (familyId) rtEntity.familyId = familyId;
    if (expiresOn) rtEntity.expiresOn = expiresOn.toString();
    return rtEntity;
}
function isCredentialEntity(entity) {
    return entity.hasOwnProperty("homeAccountId") && entity.hasOwnProperty("environment") && entity.hasOwnProperty("credentialType") && entity.hasOwnProperty("clientId") && entity.hasOwnProperty("secret");
}
/**
 * Validates an entity: checks for all expected params
 * @param entity
 */ function isAccessTokenEntity(entity) {
    if (!entity) return false;
    return isCredentialEntity(entity) && entity.hasOwnProperty("realm") && entity.hasOwnProperty("target") && (entity["credentialType"] === (0, _constantsMjs.CredentialType).ACCESS_TOKEN || entity["credentialType"] === (0, _constantsMjs.CredentialType).ACCESS_TOKEN_WITH_AUTH_SCHEME);
}
/**
 * Validates an entity: checks for all expected params
 * @param entity
 */ function isIdTokenEntity(entity) {
    if (!entity) return false;
    return isCredentialEntity(entity) && entity.hasOwnProperty("realm") && entity["credentialType"] === (0, _constantsMjs.CredentialType).ID_TOKEN;
}
/**
 * Validates an entity: checks for all expected params
 * @param entity
 */ function isRefreshTokenEntity(entity) {
    if (!entity) return false;
    return isCredentialEntity(entity) && entity["credentialType"] === (0, _constantsMjs.CredentialType).REFRESH_TOKEN;
}
/**
 * validates if a given cache entry is "Telemetry", parses <key,value>
 * @param key
 * @param entity
 */ function isServerTelemetryEntity(key, entity) {
    const validateKey = key.indexOf((0, _constantsMjs.SERVER_TELEM_CONSTANTS).CACHE_KEY) === 0;
    let validateEntity = true;
    if (entity) validateEntity = entity.hasOwnProperty("failedRequests") && entity.hasOwnProperty("errors") && entity.hasOwnProperty("cacheHits");
    return validateKey && validateEntity;
}
/**
 * validates if a given cache entry is "Throttling", parses <key,value>
 * @param key
 * @param entity
 */ function isThrottlingEntity(key, entity) {
    let validateKey = false;
    if (key) validateKey = key.indexOf((0, _constantsMjs.ThrottlingConstants).THROTTLING_PREFIX) === 0;
    let validateEntity = true;
    if (entity) validateEntity = entity.hasOwnProperty("throttleTime");
    return validateKey && validateEntity;
}
/**
 * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>
 */ function generateAppMetadataKey({ environment, clientId }) {
    const appMetaDataKeyArray = [
        (0, _constantsMjs.APP_METADATA),
        environment,
        clientId
    ];
    return appMetaDataKeyArray.join((0, _constantsMjs.Separators).CACHE_KEY_SEPARATOR).toLowerCase();
}
/*
 * Validates an entity: checks for all expected params
 * @param entity
 */ function isAppMetadataEntity(key, entity) {
    if (!entity) return false;
    return key.indexOf((0, _constantsMjs.APP_METADATA)) === 0 && entity.hasOwnProperty("clientId") && entity.hasOwnProperty("environment");
}
/**
 * Validates an entity: checks for all expected params
 * @param entity
 */ function isAuthorityMetadataEntity(key, entity) {
    if (!entity) return false;
    return key.indexOf((0, _constantsMjs.AUTHORITY_METADATA_CONSTANTS).CACHE_KEY) === 0 && entity.hasOwnProperty("aliases") && entity.hasOwnProperty("preferred_cache") && entity.hasOwnProperty("preferred_network") && entity.hasOwnProperty("canonical_authority") && entity.hasOwnProperty("authorization_endpoint") && entity.hasOwnProperty("token_endpoint") && entity.hasOwnProperty("issuer") && entity.hasOwnProperty("aliasesFromNetwork") && entity.hasOwnProperty("endpointsFromNetwork") && entity.hasOwnProperty("expiresAt") && entity.hasOwnProperty("jwks_uri");
}
/**
 * Reset the exiresAt value
 */ function generateAuthorityMetadataExpiresAt() {
    return (0, _timeUtilsMjs.nowSeconds)() + (0, _constantsMjs.AUTHORITY_METADATA_CONSTANTS).REFRESH_TIME_SECONDS;
}
function updateAuthorityEndpointMetadata(authorityMetadata, updatedValues, fromNetwork) {
    authorityMetadata.authorization_endpoint = updatedValues.authorization_endpoint;
    authorityMetadata.token_endpoint = updatedValues.token_endpoint;
    authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;
    authorityMetadata.issuer = updatedValues.issuer;
    authorityMetadata.endpointsFromNetwork = fromNetwork;
    authorityMetadata.jwks_uri = updatedValues.jwks_uri;
}
function updateCloudDiscoveryMetadata(authorityMetadata, updatedValues, fromNetwork) {
    authorityMetadata.aliases = updatedValues.aliases;
    authorityMetadata.preferred_cache = updatedValues.preferred_cache;
    authorityMetadata.preferred_network = updatedValues.preferred_network;
    authorityMetadata.aliasesFromNetwork = fromNetwork;
}
/**
 * Returns whether or not the data needs to be refreshed
 */ function isAuthorityMetadataExpired(metadata) {
    return metadata.expiresAt <= (0, _timeUtilsMjs.nowSeconds)();
}

},{"../../account/AuthToken.mjs":"cbmml","../../error/ClientAuthError.mjs":"dZZgC","../../utils/Constants.mjs":"81leO","../../utils/TimeUtils.mjs":"8XXMp","../../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"8XXMp":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "delay", ()=>delay);
parcelHelpers.export(exports, "isCacheExpired", ()=>isCacheExpired);
parcelHelpers.export(exports, "isTokenExpired", ()=>isTokenExpired);
parcelHelpers.export(exports, "nowSeconds", ()=>nowSeconds);
parcelHelpers.export(exports, "toDateFromSeconds", ()=>toDateFromSeconds);
parcelHelpers.export(exports, "toSecondsFromDate", ()=>toSecondsFromDate);
parcelHelpers.export(exports, "wasClockTurnedBack", ()=>wasClockTurnedBack);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Utility functions for managing date and time operations.
 */ /**
 * return the current time in Unix time (seconds).
 */ function nowSeconds() {
    // Date.getTime() returns in milliseconds.
    return Math.round(new Date().getTime() / 1000.0);
}
/**
 * Converts JS Date object to seconds
 * @param date Date
 */ function toSecondsFromDate(date) {
    // Convert date to seconds
    return date.getTime() / 1000;
}
/**
 * Convert seconds to JS Date object. Seconds can be in a number or string format or undefined (will still return a date).
 * @param seconds
 */ function toDateFromSeconds(seconds) {
    if (seconds) return new Date(Number(seconds) * 1000);
    return new Date();
}
/**
 * check if a token is expired based on given UTC time in seconds.
 * @param expiresOn
 */ function isTokenExpired(expiresOn, offset) {
    // check for access token expiry
    const expirationSec = Number(expiresOn) || 0;
    const offsetCurrentTimeSec = nowSeconds() + offset;
    // If current time + offset is greater than token expiration time, then token is expired.
    return offsetCurrentTimeSec > expirationSec;
}
/**
 * Checks if a cache entry is expired based on the last updated time and cache retention days.
 * @param lastUpdatedAt
 * @param cacheRetentionDays
 * @returns
 */ function isCacheExpired(lastUpdatedAt, cacheRetentionDays) {
    const cacheExpirationTimestamp = Number(lastUpdatedAt) + cacheRetentionDays * 86400000;
    return Date.now() > cacheExpirationTimestamp;
}
/**
 * If the current time is earlier than the time that a token was cached at, we must discard the token
 * i.e. The system clock was turned back after acquiring the cached token
 * @param cachedAt
 * @param offset
 */ function wasClockTurnedBack(cachedAt) {
    const cachedAtSec = Number(cachedAt);
    return cachedAtSec > nowSeconds();
}
/**
 * Waits for t number of milliseconds
 * @param t number
 * @param value T
 */ function delay(t, value) {
    return new Promise((resolve)=>setTimeout(()=>resolve(value), t));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"ij0vz":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ThrottlingUtils", ()=>ThrottlingUtils);
var _constantsMjs = require("../utils/Constants.mjs");
var _serverErrorMjs = require("../error/ServerError.mjs");
var _requestThumbprintMjs = require("./RequestThumbprint.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /** @internal */ class ThrottlingUtils {
    /**
     * Prepares a RequestThumbprint to be stored as a key.
     * @param thumbprint
     */ static generateThrottlingStorageKey(thumbprint) {
        return `${(0, _constantsMjs.ThrottlingConstants).THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;
    }
    /**
     * Performs necessary throttling checks before a network request.
     * @param cacheManager
     * @param thumbprint
     */ static preProcess(cacheManager, thumbprint, correlationId) {
        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);
        const value = cacheManager.getThrottlingCache(key);
        if (value) {
            if (value.throttleTime < Date.now()) {
                cacheManager.removeItem(key, correlationId);
                return;
            }
            throw new (0, _serverErrorMjs.ServerError)(value.errorCodes?.join(" ") || (0, _constantsMjs.Constants).EMPTY_STRING, value.errorMessage, value.subError);
        }
    }
    /**
     * Performs necessary throttling checks after a network request.
     * @param cacheManager
     * @param thumbprint
     * @param response
     */ static postProcess(cacheManager, thumbprint, response, correlationId) {
        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {
            const thumbprintValue = {
                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[(0, _constantsMjs.HeaderNames).RETRY_AFTER])),
                error: response.body.error,
                errorCodes: response.body.error_codes,
                errorMessage: response.body.error_description,
                subError: response.body.suberror
            };
            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue, correlationId);
        }
    }
    /**
     * Checks a NetworkResponse object's status codes against 429 or 5xx
     * @param response
     */ static checkResponseStatus(response) {
        return response.status === 429 || response.status >= 500 && response.status < 600;
    }
    /**
     * Checks a NetworkResponse object's RetryAfter header
     * @param response
     */ static checkResponseForRetryAfter(response) {
        if (response.headers) return response.headers.hasOwnProperty((0, _constantsMjs.HeaderNames).RETRY_AFTER) && (response.status < 200 || response.status >= 300);
        return false;
    }
    /**
     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.
     * @param throttleTime
     */ static calculateThrottleTime(throttleTime) {
        const time = throttleTime <= 0 ? 0 : throttleTime;
        const currentSeconds = Date.now() / 1000;
        return Math.floor(Math.min(currentSeconds + (time || (0, _constantsMjs.ThrottlingConstants).DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + (0, _constantsMjs.ThrottlingConstants).DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);
    }
    static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {
        const thumbprint = (0, _requestThumbprintMjs.getRequestThumbprint)(clientId, request, homeAccountIdentifier);
        const key = this.generateThrottlingStorageKey(thumbprint);
        cacheManager.removeItem(key, request.correlationId);
    }
}

},{"../utils/Constants.mjs":"81leO","../error/ServerError.mjs":"av7Z1","./RequestThumbprint.mjs":"13rNu","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"av7Z1":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServerError", ()=>ServerError);
var _authErrorMjs = require("./AuthError.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Error thrown when there is an error with the server code, for example, unavailability.
 */ class ServerError extends (0, _authErrorMjs.AuthError) {
    constructor(errorCode, errorMessage, subError, errorNo, status){
        super(errorCode, errorMessage, subError);
        this.name = "ServerError";
        this.errorNo = errorNo;
        this.status = status;
        Object.setPrototypeOf(this, ServerError.prototype);
    }
}

},{"./AuthError.mjs":"jXpbF","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"13rNu":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRequestThumbprint", ()=>getRequestThumbprint);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function getRequestThumbprint(clientId, request, homeAccountId) {
    return {
        clientId: clientId,
        authority: request.authority,
        scopes: request.scopes,
        homeAccountIdentifier: homeAccountId,
        claims: request.claims,
        authenticationScheme: request.authenticationScheme,
        resourceRequestMethod: request.resourceRequestMethod,
        resourceRequestUri: request.resourceRequestUri,
        shrClaims: request.shrClaims,
        sshKid: request.sshKid,
        embeddedClientId: request.embeddedClientId || request.tokenBodyParameters?.clientId
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"hgdfy":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NetworkError", ()=>NetworkError);
parcelHelpers.export(exports, "createNetworkError", ()=>createNetworkError);
var _authErrorMjs = require("./AuthError.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Represents network related errors
 */ class NetworkError extends (0, _authErrorMjs.AuthError) {
    constructor(error, httpStatus, responseHeaders){
        super(error.errorCode, error.errorMessage, error.subError);
        Object.setPrototypeOf(this, NetworkError.prototype);
        this.name = "NetworkError";
        this.error = error;
        this.httpStatus = httpStatus;
        this.responseHeaders = responseHeaders;
    }
}
/**
 * Creates NetworkError object for a failed network request
 * @param error - Error to be thrown back to the caller
 * @param httpStatus - Status code of the network request
 * @param responseHeaders - Response headers of the network request, when available
 * @returns NetworkError object
 */ function createNetworkError(error, httpStatus, responseHeaders, additionalError) {
    error.errorMessage = `${error.errorMessage}, additionalErrorInfo: error.name:${additionalError?.name}, error.message:${additionalError?.message}`;
    return new NetworkError(error, httpStatus, responseHeaders);
}

},{"./AuthError.mjs":"jXpbF","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"hx3Eo":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ResponseHandler", ()=>ResponseHandler);
parcelHelpers.export(exports, "buildAccountToCache", ()=>buildAccountToCache);
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _serverErrorMjs = require("../error/ServerError.mjs");
var _scopeSetMjs = require("../request/ScopeSet.mjs");
var _accountEntityMjs = require("../cache/entities/AccountEntity.mjs");
var _interactionRequiredAuthErrorMjs = require("../error/InteractionRequiredAuthError.mjs");
var _protocolUtilsMjs = require("../utils/ProtocolUtils.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _popTokenGeneratorMjs = require("../crypto/PopTokenGenerator.mjs");
var _tokenCacheContextMjs = require("../cache/persistence/TokenCacheContext.mjs");
var _performanceEventMjs = require("../telemetry/performance/PerformanceEvent.mjs");
var _authTokenMjs = require("../account/AuthToken.mjs");
var _tokenClaimsMjs = require("../account/TokenClaims.mjs");
var _accountInfoMjs = require("../account/AccountInfo.mjs");
var _cacheHelpersMjs = require("../cache/utils/CacheHelpers.mjs");
var _timeUtilsMjs = require("../utils/TimeUtils.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Class that handles response parsing.
 * @internal
 */ class ResponseHandler {
    constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient){
        this.clientId = clientId;
        this.cacheStorage = cacheStorage;
        this.cryptoObj = cryptoObj;
        this.logger = logger;
        this.serializableCache = serializableCache;
        this.persistencePlugin = persistencePlugin;
        this.performanceClient = performanceClient;
    }
    /**
     * Function which validates server authorization token response.
     * @param serverResponse
     * @param refreshAccessToken
     */ validateTokenResponse(serverResponse, refreshAccessToken) {
        // Check for error
        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {
            const errString = `Error(s): ${serverResponse.error_codes || (0, _constantsMjs.Constants).NOT_AVAILABLE} - Timestamp: ${serverResponse.timestamp || (0, _constantsMjs.Constants).NOT_AVAILABLE} - Description: ${serverResponse.error_description || (0, _constantsMjs.Constants).NOT_AVAILABLE} - Correlation ID: ${serverResponse.correlation_id || (0, _constantsMjs.Constants).NOT_AVAILABLE} - Trace ID: ${serverResponse.trace_id || (0, _constantsMjs.Constants).NOT_AVAILABLE}`;
            const serverErrorNo = serverResponse.error_codes?.length ? serverResponse.error_codes[0] : undefined;
            const serverError = new (0, _serverErrorMjs.ServerError)(serverResponse.error, errString, serverResponse.suberror, serverErrorNo, serverResponse.status);
            // check if 500 error
            if (refreshAccessToken && serverResponse.status && serverResponse.status >= (0, _constantsMjs.HttpStatus).SERVER_ERROR_RANGE_START && serverResponse.status <= (0, _constantsMjs.HttpStatus).SERVER_ERROR_RANGE_END) {
                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\n${serverError}`);
                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed
                return;
            // check if 400 error
            } else if (refreshAccessToken && serverResponse.status && serverResponse.status >= (0, _constantsMjs.HttpStatus).CLIENT_ERROR_RANGE_START && serverResponse.status <= (0, _constantsMjs.HttpStatus).CLIENT_ERROR_RANGE_END) {
                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\n${serverError}`);
                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed
                return;
            }
            if ((0, _interactionRequiredAuthErrorMjs.isInteractionRequiredError)(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) throw new (0, _interactionRequiredAuthErrorMjs.InteractionRequiredAuthError)(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || (0, _constantsMjs.Constants).EMPTY_STRING, serverResponse.trace_id || (0, _constantsMjs.Constants).EMPTY_STRING, serverResponse.correlation_id || (0, _constantsMjs.Constants).EMPTY_STRING, serverResponse.claims || (0, _constantsMjs.Constants).EMPTY_STRING, serverErrorNo);
            throw serverError;
        }
    }
    /**
     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.
     * @param serverTokenResponse
     * @param authority
     */ async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).HandleServerTokenResponse, serverTokenResponse.correlation_id);
        // create an idToken object (not entity)
        let idTokenClaims;
        if (serverTokenResponse.id_token) {
            idTokenClaims = (0, _authTokenMjs.extractTokenClaims)(serverTokenResponse.id_token || (0, _constantsMjs.Constants).EMPTY_STRING, this.cryptoObj.base64Decode);
            // token nonce check (TODO: Add a warning if no nonce is given?)
            if (authCodePayload && authCodePayload.nonce) {
                if (idTokenClaims.nonce !== authCodePayload.nonce) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.nonceMismatch));
            }
            // token max_age check
            if (request.maxAge || request.maxAge === 0) {
                const authTime = idTokenClaims.auth_time;
                if (!authTime) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.authTimeNotFound));
                (0, _authTokenMjs.checkMaxAge)(authTime, request.maxAge);
            }
        }
        // generate homeAccountId
        this.homeAccountIdentifier = (0, _accountEntityMjs.AccountEntity).generateHomeAccountId(serverTokenResponse.client_info || (0, _constantsMjs.Constants).EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);
        // save the response tokens
        let requestStateObj;
        if (!!authCodePayload && !!authCodePayload.state) requestStateObj = (0, _protocolUtilsMjs.ProtocolUtils).parseRequestState(this.cryptoObj, authCodePayload.state);
        // Add keyId from request to serverTokenResponse if defined
        serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;
        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload);
        let cacheContext;
        try {
            if (this.persistencePlugin && this.serializableCache) {
                this.logger.verbose("Persistence enabled, calling beforeCacheAccess");
                cacheContext = new (0, _tokenCacheContextMjs.TokenCacheContext)(this.serializableCache, true);
                await this.persistencePlugin.beforeCacheAccess(cacheContext);
            }
            /*
             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.
             * If not present, we should return null, as it's the case that another application called removeAccount in between
             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by
             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.
             */ if (handlingRefreshTokenResponse && !forceCacheRefreshTokenResponse && cacheRecord.account) {
                const key = this.cacheStorage.generateAccountKey((0, _accountEntityMjs.AccountEntity).getAccountInfo(cacheRecord.account));
                const account = this.cacheStorage.getAccount(key, request.correlationId);
                if (!account) {
                    this.logger.warning("Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache");
                    return await ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, undefined, serverRequestId);
                }
            }
            await this.cacheStorage.saveCacheRecord(cacheRecord, request.correlationId, (0, _authTokenMjs.isKmsi)(idTokenClaims || {}), request.storeInCache);
        } finally{
            if (this.persistencePlugin && this.serializableCache && cacheContext) {
                this.logger.verbose("Persistence enabled, calling afterCacheAccess");
                await this.persistencePlugin.afterCacheAccess(cacheContext);
            }
        }
        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, serverTokenResponse, serverRequestId);
    }
    /**
     * Generates CacheRecord
     * @param serverTokenResponse
     * @param idTokenObj
     * @param authority
     */ generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload) {
        const env = authority.getPreferredCache();
        if (!env) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.invalidCacheEnvironment));
        const claimsTenantId = (0, _tokenClaimsMjs.getTenantIdFromIdTokenClaims)(idTokenClaims);
        // IdToken: non AAD scenarios can have empty realm
        let cachedIdToken;
        let cachedAccount;
        if (serverTokenResponse.id_token && !!idTokenClaims) {
            cachedIdToken = (0, _cacheHelpersMjs.createIdTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, claimsTenantId || "");
            cachedAccount = buildAccountToCache(this.cacheStorage, authority, this.homeAccountIdentifier, this.cryptoObj.base64Decode, request.correlationId, idTokenClaims, serverTokenResponse.client_info, env, claimsTenantId, authCodePayload, undefined, this.logger);
        }
        // AccessToken
        let cachedAccessToken = null;
        if (serverTokenResponse.access_token) {
            // If scopes not returned in server response, use request scopes
            const responseScopes = serverTokenResponse.scope ? (0, _scopeSetMjs.ScopeSet).fromString(serverTokenResponse.scope) : new (0, _scopeSetMjs.ScopeSet)(request.scopes || []);
            /*
             * Use timestamp calculated before request
             * Server may return timestamps as strings, parse to numbers if so.
             */ const expiresIn = (typeof serverTokenResponse.expires_in === "string" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;
            const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === "string" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;
            const refreshIn = (typeof serverTokenResponse.refresh_in === "string" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;
            const tokenExpirationSeconds = reqTimestamp + expiresIn;
            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;
            const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;
            // non AAD scenarios can have empty realm
            cachedAccessToken = (0, _cacheHelpersMjs.createAccessTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, claimsTenantId || authority.tenant || "", responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj.base64Decode, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);
        }
        // refreshToken
        let cachedRefreshToken = null;
        if (serverTokenResponse.refresh_token) {
            let rtExpiresOn;
            if (serverTokenResponse.refresh_token_expires_in) {
                const rtExpiresIn = typeof serverTokenResponse.refresh_token_expires_in === "string" ? parseInt(serverTokenResponse.refresh_token_expires_in, 10) : serverTokenResponse.refresh_token_expires_in;
                rtExpiresOn = reqTimestamp + rtExpiresIn;
            }
            cachedRefreshToken = (0, _cacheHelpersMjs.createRefreshTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, userAssertionHash, rtExpiresOn);
        }
        // appMetadata
        let cachedAppMetadata = null;
        if (serverTokenResponse.foci) cachedAppMetadata = {
            clientId: this.clientId,
            environment: env,
            familyId: serverTokenResponse.foci
        };
        return {
            account: cachedAccount,
            idToken: cachedIdToken,
            accessToken: cachedAccessToken,
            refreshToken: cachedRefreshToken,
            appMetadata: cachedAppMetadata
        };
    }
    /**
     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.
     *
     * Optionally takes a state string that is set as-is in the response.
     *
     * @param cacheRecord
     * @param idTokenObj
     * @param fromTokenCache
     * @param stateString
     */ static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenClaims, requestState, serverTokenResponse, requestId) {
        let accessToken = (0, _constantsMjs.Constants).EMPTY_STRING;
        let responseScopes = [];
        let expiresOn = null;
        let extExpiresOn;
        let refreshOn;
        let familyId = (0, _constantsMjs.Constants).EMPTY_STRING;
        if (cacheRecord.accessToken) {
            /*
             * if the request object has `popKid` property, `signPopToken` will be set to false and
             * the token will be returned unsigned
             */ if (cacheRecord.accessToken.tokenType === (0, _constantsMjs.AuthenticationScheme).POP && !request.popKid) {
                const popTokenGenerator = new (0, _popTokenGeneratorMjs.PopTokenGenerator)(cryptoObj);
                const { secret, keyId } = cacheRecord.accessToken;
                if (!keyId) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.keyIdMissing));
                accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);
            } else accessToken = cacheRecord.accessToken.secret;
            responseScopes = (0, _scopeSetMjs.ScopeSet).fromString(cacheRecord.accessToken.target).asArray();
            // Access token expiresOn cached in seconds, converting to Date for AuthenticationResult
            expiresOn = (0, _timeUtilsMjs.toDateFromSeconds)(cacheRecord.accessToken.expiresOn);
            extExpiresOn = (0, _timeUtilsMjs.toDateFromSeconds)(cacheRecord.accessToken.extendedExpiresOn);
            if (cacheRecord.accessToken.refreshOn) refreshOn = (0, _timeUtilsMjs.toDateFromSeconds)(cacheRecord.accessToken.refreshOn);
        }
        if (cacheRecord.appMetadata) familyId = cacheRecord.appMetadata.familyId === (0, _constantsMjs.THE_FAMILY_ID) ? (0, _constantsMjs.THE_FAMILY_ID) : "";
        const uid = idTokenClaims?.oid || idTokenClaims?.sub || "";
        const tid = idTokenClaims?.tid || "";
        // for hybrid + native bridge enablement, send back the native account Id
        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) cacheRecord.account.nativeAccountId = serverTokenResponse?.spa_accountid;
        const accountInfo = cacheRecord.account ? (0, _accountInfoMjs.updateAccountTenantProfileData)((0, _accountEntityMjs.AccountEntity).getAccountInfo(cacheRecord.account), undefined, idTokenClaims, cacheRecord.idToken?.secret) : null;
        return {
            authority: authority.canonicalAuthority,
            uniqueId: uid,
            tenantId: tid,
            scopes: responseScopes,
            account: accountInfo,
            idToken: cacheRecord?.idToken?.secret || "",
            idTokenClaims: idTokenClaims || {},
            accessToken: accessToken,
            fromCache: fromTokenCache,
            expiresOn: expiresOn,
            extExpiresOn: extExpiresOn,
            refreshOn: refreshOn,
            correlationId: request.correlationId,
            requestId: requestId || (0, _constantsMjs.Constants).EMPTY_STRING,
            familyId: familyId,
            tokenType: cacheRecord.accessToken?.tokenType || (0, _constantsMjs.Constants).EMPTY_STRING,
            state: requestState ? requestState.userRequestState : (0, _constantsMjs.Constants).EMPTY_STRING,
            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || (0, _constantsMjs.Constants).EMPTY_STRING,
            msGraphHost: cacheRecord.account?.msGraphHost || (0, _constantsMjs.Constants).EMPTY_STRING,
            code: serverTokenResponse?.spa_code,
            fromNativeBroker: false
        };
    }
}
function buildAccountToCache(cacheStorage, authority, homeAccountId, base64Decode, correlationId, idTokenClaims, clientInfo, environment, claimsTenantId, authCodePayload, nativeAccountId, logger) {
    logger?.verbose("setCachedAccount called");
    // Check if base account is already cached
    const accountKeys = cacheStorage.getAccountKeys();
    const baseAccountKey = accountKeys.find((accountKey)=>{
        return accountKey.startsWith(homeAccountId);
    });
    let cachedAccount = null;
    if (baseAccountKey) cachedAccount = cacheStorage.getAccount(baseAccountKey, correlationId);
    const baseAccount = cachedAccount || (0, _accountEntityMjs.AccountEntity).createAccount({
        homeAccountId,
        idTokenClaims,
        clientInfo,
        environment,
        cloudGraphHostName: authCodePayload?.cloud_graph_host_name,
        msGraphHost: authCodePayload?.msgraph_host,
        nativeAccountId: nativeAccountId
    }, authority, base64Decode);
    const tenantProfiles = baseAccount.tenantProfiles || [];
    const tenantId = claimsTenantId || baseAccount.realm;
    if (tenantId && !tenantProfiles.find((tenantProfile)=>{
        return tenantProfile.tenantId === tenantId;
    })) {
        const newTenantProfile = (0, _accountInfoMjs.buildTenantProfile)(homeAccountId, baseAccount.localAccountId, tenantId, idTokenClaims);
        tenantProfiles.push(newTenantProfile);
    }
    baseAccount.tenantProfiles = tenantProfiles;
    return baseAccount;
}

},{"../error/ClientAuthError.mjs":"dZZgC","../error/ServerError.mjs":"av7Z1","../request/ScopeSet.mjs":"hiTkN","../cache/entities/AccountEntity.mjs":"4Vb6c","../error/InteractionRequiredAuthError.mjs":"eIkri","../utils/ProtocolUtils.mjs":"jpqhk","../utils/Constants.mjs":"81leO","../crypto/PopTokenGenerator.mjs":"8yOzA","../cache/persistence/TokenCacheContext.mjs":"eR15O","../telemetry/performance/PerformanceEvent.mjs":"dxcJF","../account/AuthToken.mjs":"cbmml","../account/TokenClaims.mjs":"67kUI","../account/AccountInfo.mjs":"1dIYU","../cache/utils/CacheHelpers.mjs":"gAz9k","../utils/TimeUtils.mjs":"8XXMp","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"eIkri":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InteractionRequiredAuthErrorCodes", ()=>_interactionRequiredAuthErrorCodesMjs);
parcelHelpers.export(exports, "InteractionRequiredAuthError", ()=>InteractionRequiredAuthError);
parcelHelpers.export(exports, "InteractionRequiredAuthErrorMessage", ()=>InteractionRequiredAuthErrorMessage);
parcelHelpers.export(exports, "InteractionRequiredAuthSubErrorMessage", ()=>InteractionRequiredAuthSubErrorMessage);
parcelHelpers.export(exports, "InteractionRequiredServerErrorMessage", ()=>InteractionRequiredServerErrorMessage);
parcelHelpers.export(exports, "createInteractionRequiredAuthError", ()=>createInteractionRequiredAuthError);
parcelHelpers.export(exports, "isInteractionRequiredError", ()=>isInteractionRequiredError);
var _constantsMjs = require("../utils/Constants.mjs");
var _authErrorMjs = require("./AuthError.mjs");
var _interactionRequiredAuthErrorCodesMjs = require("./InteractionRequiredAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required
 */ const InteractionRequiredServerErrorMessage = [
    (0, _interactionRequiredAuthErrorCodesMjs.interactionRequired),
    (0, _interactionRequiredAuthErrorCodesMjs.consentRequired),
    (0, _interactionRequiredAuthErrorCodesMjs.loginRequired),
    (0, _interactionRequiredAuthErrorCodesMjs.badToken),
    (0, _interactionRequiredAuthErrorCodesMjs.uxNotAllowed)
];
const InteractionRequiredAuthSubErrorMessage = [
    "message_only",
    "additional_action",
    "basic_action",
    "user_password_expired",
    "consent_required",
    "bad_token"
];
const InteractionRequiredAuthErrorMessages = {
    [(0, _interactionRequiredAuthErrorCodesMjs.noTokensFound)]: "No refresh token found in the cache. Please sign-in.",
    [(0, _interactionRequiredAuthErrorCodesMjs.nativeAccountUnavailable)]: "The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.",
    [(0, _interactionRequiredAuthErrorCodesMjs.refreshTokenExpired)]: "Refresh token has expired.",
    [(0, _interactionRequiredAuthErrorCodesMjs.badToken)]: "Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.",
    [(0, _interactionRequiredAuthErrorCodesMjs.uxNotAllowed)]: "`canShowUI` flag in Edge was set to false. User interaction required on web page. Please invoke an interactive API to resolve."
};
/**
 * Interaction required errors defined by the SDK
 * @deprecated Use InteractionRequiredAuthErrorCodes instead
 */ const InteractionRequiredAuthErrorMessage = {
    noTokensFoundError: {
        code: (0, _interactionRequiredAuthErrorCodesMjs.noTokensFound),
        desc: InteractionRequiredAuthErrorMessages[0, _interactionRequiredAuthErrorCodesMjs.noTokensFound]
    },
    native_account_unavailable: {
        code: (0, _interactionRequiredAuthErrorCodesMjs.nativeAccountUnavailable),
        desc: InteractionRequiredAuthErrorMessages[0, _interactionRequiredAuthErrorCodesMjs.nativeAccountUnavailable]
    },
    bad_token: {
        code: (0, _interactionRequiredAuthErrorCodesMjs.badToken),
        desc: InteractionRequiredAuthErrorMessages[0, _interactionRequiredAuthErrorCodesMjs.badToken]
    }
};
/**
 * Error thrown when user interaction is required.
 */ class InteractionRequiredAuthError extends (0, _authErrorMjs.AuthError) {
    constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims, errorNo){
        super(errorCode, errorMessage, subError);
        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);
        this.timestamp = timestamp || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.traceId = traceId || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.correlationId = correlationId || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.claims = claims || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.name = "InteractionRequiredAuthError";
        this.errorNo = errorNo;
    }
}
/**
 * Helper function used to determine if an error thrown by the server requires interaction to resolve
 * @param errorCode
 * @param errorString
 * @param subError
 */ function isInteractionRequiredError(errorCode, errorString, subError) {
    const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;
    const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;
    const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some((irErrorCode)=>{
        return errorString.indexOf(irErrorCode) > -1;
    });
    return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;
}
/**
 * Creates an InteractionRequiredAuthError
 */ function createInteractionRequiredAuthError(errorCode) {
    return new InteractionRequiredAuthError(errorCode, InteractionRequiredAuthErrorMessages[errorCode]);
}

},{"../utils/Constants.mjs":"81leO","./AuthError.mjs":"jXpbF","./InteractionRequiredAuthErrorCodes.mjs":"7poaD","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7poaD":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "badToken", ()=>badToken);
parcelHelpers.export(exports, "consentRequired", ()=>consentRequired);
parcelHelpers.export(exports, "interactionRequired", ()=>interactionRequired);
parcelHelpers.export(exports, "loginRequired", ()=>loginRequired);
parcelHelpers.export(exports, "nativeAccountUnavailable", ()=>nativeAccountUnavailable);
parcelHelpers.export(exports, "noTokensFound", ()=>noTokensFound);
parcelHelpers.export(exports, "refreshTokenExpired", ()=>refreshTokenExpired);
parcelHelpers.export(exports, "uxNotAllowed", ()=>uxNotAllowed);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Codes defined by MSAL
const noTokensFound = "no_tokens_found";
const nativeAccountUnavailable = "native_account_unavailable";
const refreshTokenExpired = "refresh_token_expired";
const uxNotAllowed = "ux_not_allowed";
// Codes potentially returned by server
const interactionRequired = "interaction_required";
const consentRequired = "consent_required";
const loginRequired = "login_required";
const badToken = "bad_token";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jpqhk":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProtocolUtils", ()=>ProtocolUtils);
var _constantsMjs = require("./Constants.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Class which provides helpers for OAuth 2.0 protocol specific values
 */ class ProtocolUtils {
    /**
     * Appends user state with random guid, or returns random guid.
     * @param userState
     * @param randomGuid
     */ static setRequestState(cryptoObj, userState, meta) {
        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);
        return userState ? `${libraryState}${(0, _constantsMjs.Constants).RESOURCE_DELIM}${userState}` : libraryState;
    }
    /**
     * Generates the state value used by the common library.
     * @param randomGuid
     * @param cryptoObj
     */ static generateLibraryState(cryptoObj, meta) {
        if (!cryptoObj) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.noCryptoObject));
        // Create a state object containing a unique id and the timestamp of the request creation
        const stateObj = {
            id: cryptoObj.createNewGuid()
        };
        if (meta) stateObj.meta = meta;
        const stateString = JSON.stringify(stateObj);
        return cryptoObj.base64Encode(stateString);
    }
    /**
     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.
     * @param state
     * @param cryptoObj
     */ static parseRequestState(cryptoObj, state) {
        if (!cryptoObj) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.noCryptoObject));
        if (!state) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.invalidState));
        try {
            // Split the state between library state and user passed state and decode them separately
            const splitState = state.split((0, _constantsMjs.Constants).RESOURCE_DELIM);
            const libraryState = splitState[0];
            const userState = splitState.length > 1 ? splitState.slice(1).join((0, _constantsMjs.Constants).RESOURCE_DELIM) : (0, _constantsMjs.Constants).EMPTY_STRING;
            const libraryStateString = cryptoObj.base64Decode(libraryState);
            const libraryStateObj = JSON.parse(libraryStateString);
            return {
                userRequestState: userState || (0, _constantsMjs.Constants).EMPTY_STRING,
                libraryState: libraryStateObj
            };
        } catch (e) {
            throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.invalidState));
        }
    }
}

},{"./Constants.mjs":"81leO","../error/ClientAuthError.mjs":"dZZgC","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"8yOzA":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopTokenGenerator", ()=>PopTokenGenerator);
var _timeUtilsMjs = require("../utils/TimeUtils.mjs");
var _urlStringMjs = require("../url/UrlString.mjs");
var _performanceEventMjs = require("../telemetry/performance/PerformanceEvent.mjs");
var _functionWrappersMjs = require("../utils/FunctionWrappers.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const KeyLocation = {
    SW: "sw"
};
/** @internal */ class PopTokenGenerator {
    constructor(cryptoUtils, performanceClient){
        this.cryptoUtils = cryptoUtils;
        this.performanceClient = performanceClient;
    }
    /**
     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters
     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash
     * @param request
     * @returns
     */ async generateCnf(request, logger) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).PopTokenGenerateCnf, request.correlationId);
        const reqCnf = await (0, _functionWrappersMjs.invokeAsync)(this.generateKid.bind(this), (0, _performanceEventMjs.PerformanceEvents).PopTokenGenerateCnf, logger, this.performanceClient, request.correlationId)(request);
        const reqCnfString = this.cryptoUtils.base64UrlEncode(JSON.stringify(reqCnf));
        return {
            kid: reqCnf.kid,
            reqCnfString
        };
    }
    /**
     * Generates key_id for a SHR token request
     * @param request
     * @returns
     */ async generateKid(request) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).PopTokenGenerateKid, request.correlationId);
        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);
        return {
            kid: kidThumbprint,
            xms_ksl: KeyLocation.SW
        };
    }
    /**
     * Signs the POP access_token with the local generated key-pair
     * @param accessToken
     * @param request
     * @returns
     */ async signPopToken(accessToken, keyId, request) {
        return this.signPayload(accessToken, keyId, request);
    }
    /**
     * Utility function to generate the signed JWT for an access_token
     * @param payload
     * @param kid
     * @param request
     * @param claims
     * @returns
     */ async signPayload(payload, keyId, request, claims) {
        // Deconstruct request to extract SHR parameters
        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, shrOptions } = request;
        const resourceUrlString = resourceRequestUri ? new (0, _urlStringMjs.UrlString)(resourceRequestUri) : undefined;
        const resourceUrlComponents = resourceUrlString?.getUrlComponents();
        return this.cryptoUtils.signJwt({
            at: payload,
            ts: (0, _timeUtilsMjs.nowSeconds)(),
            m: resourceRequestMethod?.toUpperCase(),
            u: resourceUrlComponents?.HostNameAndPort,
            nonce: shrNonce || this.cryptoUtils.createNewGuid(),
            p: resourceUrlComponents?.AbsolutePath,
            q: resourceUrlComponents?.QueryString ? [
                [],
                resourceUrlComponents.QueryString
            ] : undefined,
            client_claims: shrClaims || undefined,
            ...claims
        }, keyId, shrOptions, request.correlationId);
    }
}

},{"../utils/TimeUtils.mjs":"8XXMp","../url/UrlString.mjs":"53sIq","../telemetry/performance/PerformanceEvent.mjs":"dxcJF","../utils/FunctionWrappers.mjs":"cnW9d","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"eR15O":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TokenCacheContext", ()=>TokenCacheContext);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class instance helps track the memory changes facilitating
 * decisions to read from and write to the persistent cache
 */ class TokenCacheContext {
    constructor(tokenCache, hasChanged){
        this.cache = tokenCache;
        this.hasChanged = hasChanged;
    }
    /**
     * boolean which indicates the changes in cache
     */ get cacheHasChanged() {
        return this.hasChanged;
    }
    /**
     * function to retrieve the token cache
     */ get tokenCache() {
        return this.cache;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"8tHBi":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getClientAssertion", ()=>getClientAssertion);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ async function getClientAssertion(clientAssertion, clientId, tokenEndpoint) {
    if (typeof clientAssertion === "string") return clientAssertion;
    else {
        const config = {
            clientId: clientId,
            tokenEndpoint: tokenEndpoint
        };
        return clientAssertion(config);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"bvDRJ":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RefreshTokenClient", ()=>RefreshTokenClient);
var _clientConfigurationMjs = require("../config/ClientConfiguration.mjs");
var _baseClientMjs = require("./BaseClient.mjs");
var _requestParameterBuilderMjs = require("../request/RequestParameterBuilder.mjs");
var _urlUtilsMjs = require("../utils/UrlUtils.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _aadserverParamKeysMjs = require("../constants/AADServerParamKeys.mjs");
var _responseHandlerMjs = require("../response/ResponseHandler.mjs");
var _popTokenGeneratorMjs = require("../crypto/PopTokenGenerator.mjs");
var _stringUtilsMjs = require("../utils/StringUtils.mjs");
var _clientConfigurationErrorMjs = require("../error/ClientConfigurationError.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _serverErrorMjs = require("../error/ServerError.mjs");
var _timeUtilsMjs = require("../utils/TimeUtils.mjs");
var _urlStringMjs = require("../url/UrlString.mjs");
var _ccsCredentialMjs = require("../account/CcsCredential.mjs");
var _clientInfoMjs = require("../account/ClientInfo.mjs");
var _interactionRequiredAuthErrorMjs = require("../error/InteractionRequiredAuthError.mjs");
var _performanceEventMjs = require("../telemetry/performance/PerformanceEvent.mjs");
var _functionWrappersMjs = require("../utils/FunctionWrappers.mjs");
var _clientAssertionUtilsMjs = require("../utils/ClientAssertionUtils.mjs");
var _requestThumbprintMjs = require("../network/RequestThumbprint.mjs");
var _interactionRequiredAuthErrorCodesMjs = require("../error/InteractionRequiredAuthErrorCodes.mjs");
var _clientConfigurationErrorCodesMjs = require("../error/ClientConfigurationErrorCodes.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes
/**
 * OAuth2.0 refresh token client
 * @internal
 */ class RefreshTokenClient extends (0, _baseClientMjs.BaseClient) {
    constructor(configuration, performanceClient){
        super(configuration, performanceClient);
    }
    async acquireToken(request) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientAcquireToken, request.correlationId);
        const reqTimestamp = (0, _timeUtilsMjs.nowSeconds)();
        const response = await (0, _functionWrappersMjs.invokeAsync)(this.executeTokenRequest.bind(this), (0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(request, this.authority);
        // Retrieve requestId from response headers
        const requestId = response.headers?.[(0, _constantsMjs.HeaderNames).X_MS_REQUEST_ID];
        const responseHandler = new (0, _responseHandlerMjs.ResponseHandler)(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
        responseHandler.validateTokenResponse(response.body);
        return (0, _functionWrappersMjs.invokeAsync)(responseHandler.handleServerTokenResponse.bind(responseHandler), (0, _performanceEventMjs.PerformanceEvents).HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);
    }
    /**
     * Gets cached refresh token and attaches to request, then calls acquireToken API
     * @param request
     */ async acquireTokenByRefreshToken(request) {
        // Cannot renew token if no request object is given.
        if (!request) throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.tokenRequestEmpty));
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);
        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
        if (!request.account) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.noAccountInSilentRequest));
        // try checking if FOCI is enabled for the given application
        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);
        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest
        if (isFOCI) try {
            return await (0, _functionWrappersMjs.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), (0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, true);
        } catch (e) {
            const noFamilyRTInCache = e instanceof (0, _interactionRequiredAuthErrorMjs.InteractionRequiredAuthError) && e.errorCode === (0, _interactionRequiredAuthErrorCodesMjs.noTokensFound);
            const clientMismatchErrorWithFamilyRT = e instanceof (0, _serverErrorMjs.ServerError) && e.errorCode === (0, _constantsMjs.Errors).INVALID_GRANT_ERROR && e.subError === (0, _constantsMjs.Errors).CLIENT_MISMATCH_ERROR;
            // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)
            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) return (0, _functionWrappersMjs.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), (0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);
            else throw e;
        }
        // fall back to application refresh token acquisition
        return (0, _functionWrappersMjs.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), (0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);
    }
    /**
     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached
     * @param request
     */ async acquireTokenWithCachedRefreshToken(request, foci) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);
        // fetches family RT or application RT based on FOCI value
        const refreshToken = (0, _functionWrappersMjs.invoke)(this.cacheManager.getRefreshToken.bind(this.cacheManager), (0, _performanceEventMjs.PerformanceEvents).CacheManagerGetRefreshToken, this.logger, this.performanceClient, request.correlationId)(request.account, foci, request.correlationId, undefined, this.performanceClient);
        if (!refreshToken) throw (0, _interactionRequiredAuthErrorMjs.createInteractionRequiredAuthError)((0, _interactionRequiredAuthErrorCodesMjs.noTokensFound));
        if (refreshToken.expiresOn && (0, _timeUtilsMjs.isTokenExpired)(refreshToken.expiresOn, request.refreshTokenExpirationOffsetSeconds || DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS)) {
            this.performanceClient?.addFields({
                rtExpiresOnMs: Number(refreshToken.expiresOn)
            }, request.correlationId);
            throw (0, _interactionRequiredAuthErrorMjs.createInteractionRequiredAuthError)((0, _interactionRequiredAuthErrorCodesMjs.refreshTokenExpired));
        }
        // attach cached RT size to the current measurement
        const refreshTokenRequest = {
            ...request,
            refreshToken: refreshToken.secret,
            authenticationScheme: request.authenticationScheme || (0, _constantsMjs.AuthenticationScheme).BEARER,
            ccsCredential: {
                credential: request.account.homeAccountId,
                type: (0, _ccsCredentialMjs.CcsCredentialType).HOME_ACCOUNT_ID
            }
        };
        try {
            return await (0, _functionWrappersMjs.invokeAsync)(this.acquireToken.bind(this), (0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(refreshTokenRequest);
        } catch (e) {
            if (e instanceof (0, _interactionRequiredAuthErrorMjs.InteractionRequiredAuthError)) {
                this.performanceClient?.addFields({
                    rtExpiresOnMs: Number(refreshToken.expiresOn)
                }, request.correlationId);
                if (e.subError === (0, _interactionRequiredAuthErrorCodesMjs.badToken)) {
                    // Remove bad refresh token from cache
                    this.logger.verbose("acquireTokenWithRefreshToken: bad refresh token, removing from cache");
                    const badRefreshTokenKey = this.cacheManager.generateCredentialKey(refreshToken);
                    this.cacheManager.removeRefreshToken(badRefreshTokenKey, request.correlationId);
                }
            }
            throw e;
        }
    }
    /**
     * Constructs the network message and makes a NW call to the underlying secure token service
     * @param request
     * @param authority
     */ async executeTokenRequest(request, authority) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientExecuteTokenRequest, request.correlationId);
        const queryParametersString = this.createTokenQueryParameters(request);
        const endpoint = (0, _urlStringMjs.UrlString).appendQueryString(authority.tokenEndpoint, queryParametersString);
        const requestBody = await (0, _functionWrappersMjs.invokeAsync)(this.createTokenRequestBody.bind(this), (0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);
        const headers = this.createTokenRequestHeaders(request.ccsCredential);
        const thumbprint = (0, _requestThumbprintMjs.getRequestThumbprint)(this.config.authOptions.clientId, request);
        return (0, _functionWrappersMjs.invokeAsync)(this.executePostToTokenEndpoint.bind(this), (0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, (0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientExecutePostToTokenEndpoint);
    }
    /**
     * Helper function to create the token request body
     * @param request
     */ async createTokenRequestBody(request) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).RefreshTokenClientCreateTokenRequestBody, request.correlationId);
        const parameters = new Map();
        (0, _requestParameterBuilderMjs.addClientId)(parameters, request.embeddedClientId || request.tokenBodyParameters?.[0, _aadserverParamKeysMjs.CLIENT_ID] || this.config.authOptions.clientId);
        if (request.redirectUri) (0, _requestParameterBuilderMjs.addRedirectUri)(parameters, request.redirectUri);
        (0, _requestParameterBuilderMjs.addScopes)(parameters, request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);
        (0, _requestParameterBuilderMjs.addGrantType)(parameters, (0, _constantsMjs.GrantType).REFRESH_TOKEN_GRANT);
        (0, _requestParameterBuilderMjs.addClientInfo)(parameters);
        (0, _requestParameterBuilderMjs.addLibraryInfo)(parameters, this.config.libraryInfo);
        (0, _requestParameterBuilderMjs.addApplicationTelemetry)(parameters, this.config.telemetry.application);
        (0, _requestParameterBuilderMjs.addThrottling)(parameters);
        if (this.serverTelemetryManager && !(0, _clientConfigurationMjs.isOidcProtocolMode)(this.config)) (0, _requestParameterBuilderMjs.addServerTelemetry)(parameters, this.serverTelemetryManager);
        (0, _requestParameterBuilderMjs.addRefreshToken)(parameters, request.refreshToken);
        if (this.config.clientCredentials.clientSecret) (0, _requestParameterBuilderMjs.addClientSecret)(parameters, this.config.clientCredentials.clientSecret);
        if (this.config.clientCredentials.clientAssertion) {
            const clientAssertion = this.config.clientCredentials.clientAssertion;
            (0, _requestParameterBuilderMjs.addClientAssertion)(parameters, await (0, _clientAssertionUtilsMjs.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));
            (0, _requestParameterBuilderMjs.addClientAssertionType)(parameters, clientAssertion.assertionType);
        }
        if (request.authenticationScheme === (0, _constantsMjs.AuthenticationScheme).POP) {
            const popTokenGenerator = new (0, _popTokenGeneratorMjs.PopTokenGenerator)(this.cryptoUtils, this.performanceClient);
            let reqCnfData;
            if (!request.popKid) {
                const generatedReqCnfData = await (0, _functionWrappersMjs.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), (0, _performanceEventMjs.PerformanceEvents).PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);
                reqCnfData = generatedReqCnfData.reqCnfString;
            } else reqCnfData = this.cryptoUtils.encodeKid(request.popKid);
            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)
            (0, _requestParameterBuilderMjs.addPopToken)(parameters, reqCnfData);
        } else if (request.authenticationScheme === (0, _constantsMjs.AuthenticationScheme).SSH) {
            if (request.sshJwk) (0, _requestParameterBuilderMjs.addSshJwk)(parameters, request.sshJwk);
            else throw (0, _clientConfigurationErrorMjs.createClientConfigurationError)((0, _clientConfigurationErrorCodesMjs.missingSshJwk));
        }
        if (!(0, _stringUtilsMjs.StringUtils).isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) (0, _requestParameterBuilderMjs.addClaims)(parameters, request.claims, this.config.authOptions.clientCapabilities);
        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) switch(request.ccsCredential.type){
            case (0, _ccsCredentialMjs.CcsCredentialType).HOME_ACCOUNT_ID:
                try {
                    const clientInfo = (0, _clientInfoMjs.buildClientInfoFromHomeAccountId)(request.ccsCredential.credential);
                    (0, _requestParameterBuilderMjs.addCcsOid)(parameters, clientInfo);
                } catch (e) {
                    this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                }
                break;
            case (0, _ccsCredentialMjs.CcsCredentialType).UPN:
                (0, _requestParameterBuilderMjs.addCcsUpn)(parameters, request.ccsCredential.credential);
                break;
        }
        if (request.embeddedClientId) (0, _requestParameterBuilderMjs.addBrokerParameters)(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);
        if (request.tokenBodyParameters) (0, _requestParameterBuilderMjs.addExtraQueryParameters)(parameters, request.tokenBodyParameters);
        (0, _requestParameterBuilderMjs.instrumentBrokerParams)(parameters, request.correlationId, this.performanceClient);
        return (0, _urlUtilsMjs.mapToQueryString)(parameters);
    }
}

},{"../config/ClientConfiguration.mjs":"gxyQP","./BaseClient.mjs":"hrViH","../request/RequestParameterBuilder.mjs":"cR5CB","../utils/UrlUtils.mjs":"cbBNR","../utils/Constants.mjs":"81leO","../constants/AADServerParamKeys.mjs":"kwWCE","../response/ResponseHandler.mjs":"hx3Eo","../crypto/PopTokenGenerator.mjs":"8yOzA","../utils/StringUtils.mjs":"7KUNp","../error/ClientConfigurationError.mjs":"byrV8","../error/ClientAuthError.mjs":"dZZgC","../error/ServerError.mjs":"av7Z1","../utils/TimeUtils.mjs":"8XXMp","../url/UrlString.mjs":"53sIq","../account/CcsCredential.mjs":"bOumO","../account/ClientInfo.mjs":"2DIEg","../error/InteractionRequiredAuthError.mjs":"eIkri","../telemetry/performance/PerformanceEvent.mjs":"dxcJF","../utils/FunctionWrappers.mjs":"cnW9d","../utils/ClientAssertionUtils.mjs":"8tHBi","../network/RequestThumbprint.mjs":"13rNu","../error/InteractionRequiredAuthErrorCodes.mjs":"7poaD","../error/ClientConfigurationErrorCodes.mjs":"7O3No","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"94ao6":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentFlowClient", ()=>SilentFlowClient);
var _baseClientMjs = require("./BaseClient.mjs");
var _timeUtilsMjs = require("../utils/TimeUtils.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _responseHandlerMjs = require("../response/ResponseHandler.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _stringUtilsMjs = require("../utils/StringUtils.mjs");
var _authTokenMjs = require("../account/AuthToken.mjs");
var _performanceEventMjs = require("../telemetry/performance/PerformanceEvent.mjs");
var _functionWrappersMjs = require("../utils/FunctionWrappers.mjs");
var _authorityMjs = require("../authority/Authority.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /** @internal */ class SilentFlowClient extends (0, _baseClientMjs.BaseClient) {
    constructor(configuration, performanceClient){
        super(configuration, performanceClient);
    }
    /**
     * Retrieves token from cache or throws an error if it must be refreshed.
     * @param request
     */ async acquireCachedToken(request) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).SilentFlowClientAcquireCachedToken, request.correlationId);
        let lastCacheOutcome = (0, _constantsMjs.CacheOutcome).NOT_APPLICABLE;
        if (request.forceRefresh || !this.config.cacheOptions.claimsBasedCachingEnabled && !(0, _stringUtilsMjs.StringUtils).isEmptyObj(request.claims)) {
            // Must refresh due to present force_refresh flag.
            this.setCacheOutcome((0, _constantsMjs.CacheOutcome).FORCE_REFRESH_OR_CLAIMS, request.correlationId);
            throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.tokenRefreshRequired));
        }
        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
        if (!request.account) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.noAccountInSilentRequest));
        const requestTenantId = request.account.tenantId || (0, _authorityMjs.getTenantFromAuthorityString)(request.authority);
        const tokenKeys = this.cacheManager.getTokenKeys();
        const cachedAccessToken = this.cacheManager.getAccessToken(request.account, request, tokenKeys, requestTenantId);
        if (!cachedAccessToken) {
            // must refresh due to non-existent access_token
            this.setCacheOutcome((0, _constantsMjs.CacheOutcome).NO_CACHED_ACCESS_TOKEN, request.correlationId);
            throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.tokenRefreshRequired));
        } else if ((0, _timeUtilsMjs.wasClockTurnedBack)(cachedAccessToken.cachedAt) || (0, _timeUtilsMjs.isTokenExpired)(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {
            // must refresh due to the expires_in value
            this.setCacheOutcome((0, _constantsMjs.CacheOutcome).CACHED_ACCESS_TOKEN_EXPIRED, request.correlationId);
            throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.tokenRefreshRequired));
        } else if (cachedAccessToken.refreshOn && (0, _timeUtilsMjs.isTokenExpired)(cachedAccessToken.refreshOn, 0)) // must refresh (in the background) due to the refresh_in value
        lastCacheOutcome = (0, _constantsMjs.CacheOutcome).PROACTIVELY_REFRESHED;
        const environment = request.authority || this.authority.getPreferredCache();
        const cacheRecord = {
            account: this.cacheManager.getAccount(this.cacheManager.generateAccountKey(request.account), request.correlationId),
            accessToken: cachedAccessToken,
            idToken: this.cacheManager.getIdToken(request.account, request.correlationId, tokenKeys, requestTenantId, this.performanceClient),
            refreshToken: null,
            appMetadata: this.cacheManager.readAppMetadataFromCache(environment)
        };
        this.setCacheOutcome(lastCacheOutcome, request.correlationId);
        if (this.config.serverTelemetryManager) this.config.serverTelemetryManager.incrementCacheHits();
        return [
            await (0, _functionWrappersMjs.invokeAsync)(this.generateResultFromCacheRecord.bind(this), (0, _performanceEventMjs.PerformanceEvents).SilentFlowClientGenerateResultFromCacheRecord, this.logger, this.performanceClient, request.correlationId)(cacheRecord, request),
            lastCacheOutcome
        ];
    }
    setCacheOutcome(cacheOutcome, correlationId) {
        this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);
        this.performanceClient?.addFields({
            cacheOutcome: cacheOutcome
        }, correlationId);
        if (cacheOutcome !== (0, _constantsMjs.CacheOutcome).NOT_APPLICABLE) this.logger.info(`Token refresh is required due to cache outcome: ${cacheOutcome}`);
    }
    /**
     * Helper function to build response object from the CacheRecord
     * @param cacheRecord
     */ async generateResultFromCacheRecord(cacheRecord, request) {
        this.performanceClient?.addQueueMeasurement((0, _performanceEventMjs.PerformanceEvents).SilentFlowClientGenerateResultFromCacheRecord, request.correlationId);
        let idTokenClaims;
        if (cacheRecord.idToken) idTokenClaims = (0, _authTokenMjs.extractTokenClaims)(cacheRecord.idToken.secret, this.config.cryptoInterface.base64Decode);
        // token max_age check
        if (request.maxAge || request.maxAge === 0) {
            const authTime = idTokenClaims?.auth_time;
            if (!authTime) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.authTimeNotFound));
            (0, _authTokenMjs.checkMaxAge)(authTime, request.maxAge);
        }
        return (0, _responseHandlerMjs.ResponseHandler).generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenClaims);
    }
}

},{"./BaseClient.mjs":"hrViH","../utils/TimeUtils.mjs":"8XXMp","../error/ClientAuthError.mjs":"dZZgC","../response/ResponseHandler.mjs":"hx3Eo","../utils/Constants.mjs":"81leO","../utils/StringUtils.mjs":"7KUNp","../account/AuthToken.mjs":"cbmml","../telemetry/performance/PerformanceEvent.mjs":"dxcJF","../utils/FunctionWrappers.mjs":"cnW9d","../authority/Authority.mjs":"aupyF","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"3XjRo":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StubbedNetworkModule", ()=>StubbedNetworkModule);
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const StubbedNetworkModule = {
    sendGetRequestAsync: ()=>{
        return Promise.reject((0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented)));
    },
    sendPostRequestAsync: ()=>{
        return Promise.reject((0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.methodNotImplemented)));
    }
};

},{"../error/ClientAuthError.mjs":"dZZgC","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"hx66D":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAuthorizationCodePayload", ()=>getAuthorizationCodePayload);
parcelHelpers.export(exports, "getAuthorizeUrl", ()=>getAuthorizeUrl);
parcelHelpers.export(exports, "getStandardAuthorizeRequestParameters", ()=>getStandardAuthorizeRequestParameters);
parcelHelpers.export(exports, "validateAuthorizationResponse", ()=>validateAuthorizationResponse);
var _requestParameterBuilderMjs = require("../request/RequestParameterBuilder.mjs");
var _aadserverParamKeysMjs = require("../constants/AADServerParamKeys.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _clientInfoMjs = require("../account/ClientInfo.mjs");
var _urlUtilsMjs = require("../utils/UrlUtils.mjs");
var _urlStringMjs = require("../url/UrlString.mjs");
var _clientAuthErrorMjs = require("../error/ClientAuthError.mjs");
var _interactionRequiredAuthErrorMjs = require("../error/InteractionRequiredAuthError.mjs");
var _serverErrorMjs = require("../error/ServerError.mjs");
var _clientAuthErrorCodesMjs = require("../error/ClientAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Returns map of parameters that are applicable to all calls to /authorize whether using PKCE or EAR
 * @param config
 * @param request
 * @param logger
 * @param performanceClient
 * @returns
 */ function getStandardAuthorizeRequestParameters(authOptions, request, logger, performanceClient) {
    // generate the correlationId if not set by the user and add
    const correlationId = request.correlationId;
    const parameters = new Map();
    (0, _requestParameterBuilderMjs.addClientId)(parameters, request.embeddedClientId || request.extraQueryParameters?.[0, _aadserverParamKeysMjs.CLIENT_ID] || authOptions.clientId);
    const requestScopes = [
        ...request.scopes || [],
        ...request.extraScopesToConsent || []
    ];
    (0, _requestParameterBuilderMjs.addScopes)(parameters, requestScopes, true, authOptions.authority.options.OIDCOptions?.defaultScopes);
    (0, _requestParameterBuilderMjs.addRedirectUri)(parameters, request.redirectUri);
    (0, _requestParameterBuilderMjs.addCorrelationId)(parameters, correlationId);
    // add response_mode. If not passed in it defaults to query.
    (0, _requestParameterBuilderMjs.addResponseMode)(parameters, request.responseMode);
    // add client_info=1
    (0, _requestParameterBuilderMjs.addClientInfo)(parameters);
    if (request.prompt) {
        (0, _requestParameterBuilderMjs.addPrompt)(parameters, request.prompt);
        performanceClient?.addFields({
            prompt: request.prompt
        }, correlationId);
    }
    if (request.domainHint) {
        (0, _requestParameterBuilderMjs.addDomainHint)(parameters, request.domainHint);
        performanceClient?.addFields({
            domainHintFromRequest: true
        }, correlationId);
    }
    // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object
    if (request.prompt !== (0, _constantsMjs.PromptValue).SELECT_ACCOUNT) {
        // AAD will throw if prompt=select_account is passed with an account hint
        if (request.sid && request.prompt === (0, _constantsMjs.PromptValue).NONE) {
            // SessionID is only used in silent calls
            logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from request");
            (0, _requestParameterBuilderMjs.addSid)(parameters, request.sid);
            performanceClient?.addFields({
                sidFromRequest: true
            }, correlationId);
        } else if (request.account) {
            const accountSid = extractAccountSid(request.account);
            let accountLoginHintClaim = extractLoginHint(request.account);
            if (accountLoginHintClaim && request.domainHint) {
                logger.warning(`AuthorizationCodeClient.createAuthCodeUrlQueryString: "domainHint" param is set, skipping opaque "login_hint" claim. Please consider not passing domainHint`);
                accountLoginHintClaim = null;
            }
            // If login_hint claim is present, use it over sid/username
            if (accountLoginHintClaim) {
                logger.verbose("createAuthCodeUrlQueryString: login_hint claim present on account");
                (0, _requestParameterBuilderMjs.addLoginHint)(parameters, accountLoginHintClaim);
                performanceClient?.addFields({
                    loginHintFromClaim: true
                }, correlationId);
                try {
                    const clientInfo = (0, _clientInfoMjs.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);
                    (0, _requestParameterBuilderMjs.addCcsOid)(parameters, clientInfo);
                } catch (e) {
                    logger.verbose("createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header");
                }
            } else if (accountSid && request.prompt === (0, _constantsMjs.PromptValue).NONE) {
                /*
                 * If account and loginHint are provided, we will check account first for sid before adding loginHint
                 * SessionId is only used in silent calls
                 */ logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from account");
                (0, _requestParameterBuilderMjs.addSid)(parameters, accountSid);
                performanceClient?.addFields({
                    sidFromClaim: true
                }, correlationId);
                try {
                    const clientInfo = (0, _clientInfoMjs.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);
                    (0, _requestParameterBuilderMjs.addCcsOid)(parameters, clientInfo);
                } catch (e) {
                    logger.verbose("createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header");
                }
            } else if (request.loginHint) {
                logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from request");
                (0, _requestParameterBuilderMjs.addLoginHint)(parameters, request.loginHint);
                (0, _requestParameterBuilderMjs.addCcsUpn)(parameters, request.loginHint);
                performanceClient?.addFields({
                    loginHintFromRequest: true
                }, correlationId);
            } else if (request.account.username) {
                // Fallback to account username if provided
                logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from account");
                (0, _requestParameterBuilderMjs.addLoginHint)(parameters, request.account.username);
                performanceClient?.addFields({
                    loginHintFromUpn: true
                }, correlationId);
                try {
                    const clientInfo = (0, _clientInfoMjs.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);
                    (0, _requestParameterBuilderMjs.addCcsOid)(parameters, clientInfo);
                } catch (e) {
                    logger.verbose("createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header");
                }
            }
        } else if (request.loginHint) {
            logger.verbose("createAuthCodeUrlQueryString: No account, adding login_hint from request");
            (0, _requestParameterBuilderMjs.addLoginHint)(parameters, request.loginHint);
            (0, _requestParameterBuilderMjs.addCcsUpn)(parameters, request.loginHint);
            performanceClient?.addFields({
                loginHintFromRequest: true
            }, correlationId);
        }
    } else logger.verbose("createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints");
    if (request.nonce) (0, _requestParameterBuilderMjs.addNonce)(parameters, request.nonce);
    if (request.state) (0, _requestParameterBuilderMjs.addState)(parameters, request.state);
    if (request.claims || authOptions.clientCapabilities && authOptions.clientCapabilities.length > 0) (0, _requestParameterBuilderMjs.addClaims)(parameters, request.claims, authOptions.clientCapabilities);
    if (request.embeddedClientId) (0, _requestParameterBuilderMjs.addBrokerParameters)(parameters, authOptions.clientId, authOptions.redirectUri);
    // If extraQueryParameters includes instance_aware its value will be added when extraQueryParameters are added
    if (authOptions.instanceAware && (!request.extraQueryParameters || !Object.keys(request.extraQueryParameters).includes((0, _aadserverParamKeysMjs.INSTANCE_AWARE)))) (0, _requestParameterBuilderMjs.addInstanceAware)(parameters);
    return parameters;
}
/**
 * Returns authorize endpoint with given request parameters in the query string
 * @param authority
 * @param requestParameters
 * @returns
 */ function getAuthorizeUrl(authority, requestParameters, encodeParams, extraQueryParameters) {
    const queryString = (0, _urlUtilsMjs.mapToQueryString)(requestParameters, encodeParams, extraQueryParameters);
    return (0, _urlStringMjs.UrlString).appendQueryString(authority.authorizationEndpoint, queryString);
}
/**
 * Handles the hash fragment response from public client code request. Returns a code response used by
 * the client to exchange for a token in acquireToken.
 * @param serverParams
 * @param cachedState
 */ function getAuthorizationCodePayload(serverParams, cachedState) {
    // Get code response
    validateAuthorizationResponse(serverParams, cachedState);
    // throw when there is no auth code in the response
    if (!serverParams.code) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.authorizationCodeMissingFromServerResponse));
    return serverParams;
}
/**
 * Function which validates server authorization code response.
 * @param serverResponseHash
 * @param requestState
 */ function validateAuthorizationResponse(serverResponse, requestState) {
    if (!serverResponse.state || !requestState) throw serverResponse.state ? (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.stateNotFound), "Cached State") : (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.stateNotFound), "Server State");
    let decodedServerResponseState;
    let decodedRequestState;
    try {
        decodedServerResponseState = decodeURIComponent(serverResponse.state);
    } catch (e) {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.invalidState), serverResponse.state);
    }
    try {
        decodedRequestState = decodeURIComponent(requestState);
    } catch (e) {
        throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.invalidState), serverResponse.state);
    }
    if (decodedServerResponseState !== decodedRequestState) throw (0, _clientAuthErrorMjs.createClientAuthError)((0, _clientAuthErrorCodesMjs.stateMismatch));
    // Check for error
    if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {
        const serverErrorNo = parseServerErrorNo(serverResponse);
        if ((0, _interactionRequiredAuthErrorMjs.isInteractionRequiredError)(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) throw new (0, _interactionRequiredAuthErrorMjs.InteractionRequiredAuthError)(serverResponse.error || "", serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || "", serverResponse.trace_id || "", serverResponse.correlation_id || "", serverResponse.claims || "", serverErrorNo);
        throw new (0, _serverErrorMjs.ServerError)(serverResponse.error || "", serverResponse.error_description, serverResponse.suberror, serverErrorNo);
    }
}
/**
 * Get server error No from the error_uri
 * @param serverResponse
 * @returns
 */ function parseServerErrorNo(serverResponse) {
    const errorCodePrefix = "code=";
    const errorCodePrefixIndex = serverResponse.error_uri?.lastIndexOf(errorCodePrefix);
    return errorCodePrefixIndex && errorCodePrefixIndex >= 0 ? serverResponse.error_uri?.substring(errorCodePrefixIndex + errorCodePrefix.length) : undefined;
}
/**
 * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.
 * @param account
 */ function extractAccountSid(account) {
    return account.idTokenClaims?.sid || null;
}
function extractLoginHint(account) {
    return account.loginHint || account.idTokenClaims?.login_hint || null;
}

},{"../request/RequestParameterBuilder.mjs":"cR5CB","../constants/AADServerParamKeys.mjs":"kwWCE","../utils/Constants.mjs":"81leO","../account/ClientInfo.mjs":"2DIEg","../utils/UrlUtils.mjs":"cbBNR","../url/UrlString.mjs":"53sIq","../error/ClientAuthError.mjs":"dZZgC","../error/InteractionRequiredAuthError.mjs":"eIkri","../error/ServerError.mjs":"av7Z1","../error/ClientAuthErrorCodes.mjs":"dhVcy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"3lsNW":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServerTelemetryManager", ()=>ServerTelemetryManager);
var _constantsMjs = require("../../utils/Constants.mjs");
var _authErrorMjs = require("../../error/AuthError.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const skuGroupSeparator = ",";
const skuValueSeparator = "|";
function makeExtraSkuString(params) {
    const { skus, libraryName, libraryVersion, extensionName, extensionVersion } = params;
    const skuMap = new Map([
        [
            0,
            [
                libraryName,
                libraryVersion
            ]
        ],
        [
            2,
            [
                extensionName,
                extensionVersion
            ]
        ]
    ]);
    let skuArr = [];
    if (skus?.length) {
        skuArr = skus.split(skuGroupSeparator);
        // Ignore invalid input sku param
        if (skuArr.length < 4) return skus;
    } else skuArr = Array.from({
        length: 4
    }, ()=>skuValueSeparator);
    skuMap.forEach((value, key)=>{
        if (value.length === 2 && value[0]?.length && value[1]?.length) setSku({
            skuArr,
            index: key,
            skuName: value[0],
            skuVersion: value[1]
        });
    });
    return skuArr.join(skuGroupSeparator);
}
function setSku(params) {
    const { skuArr, index, skuName, skuVersion } = params;
    if (index >= skuArr.length) return;
    skuArr[index] = [
        skuName,
        skuVersion
    ].join(skuValueSeparator);
}
/** @internal */ class ServerTelemetryManager {
    constructor(telemetryRequest, cacheManager){
        this.cacheOutcome = (0, _constantsMjs.CacheOutcome).NOT_APPLICABLE;
        this.cacheManager = cacheManager;
        this.apiId = telemetryRequest.apiId;
        this.correlationId = telemetryRequest.correlationId;
        this.wrapperSKU = telemetryRequest.wrapperSKU || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.wrapperVer = telemetryRequest.wrapperVer || (0, _constantsMjs.Constants).EMPTY_STRING;
        this.telemetryCacheKey = (0, _constantsMjs.SERVER_TELEM_CONSTANTS).CACHE_KEY + (0, _constantsMjs.Separators).CACHE_KEY_SEPARATOR + telemetryRequest.clientId;
    }
    /**
     * API to add MSER Telemetry to request
     */ generateCurrentRequestHeaderValue() {
        const request = `${this.apiId}${(0, _constantsMjs.SERVER_TELEM_CONSTANTS).VALUE_SEPARATOR}${this.cacheOutcome}`;
        const platformFieldsArr = [
            this.wrapperSKU,
            this.wrapperVer
        ];
        const nativeBrokerErrorCode = this.getNativeBrokerErrorCode();
        if (nativeBrokerErrorCode?.length) platformFieldsArr.push(`broker_error=${nativeBrokerErrorCode}`);
        const platformFields = platformFieldsArr.join((0, _constantsMjs.SERVER_TELEM_CONSTANTS).VALUE_SEPARATOR);
        const regionDiscoveryFields = this.getRegionDiscoveryFields();
        const requestWithRegionDiscoveryFields = [
            request,
            regionDiscoveryFields
        ].join((0, _constantsMjs.SERVER_TELEM_CONSTANTS).VALUE_SEPARATOR);
        return [
            (0, _constantsMjs.SERVER_TELEM_CONSTANTS).SCHEMA_VERSION,
            requestWithRegionDiscoveryFields,
            platformFields
        ].join((0, _constantsMjs.SERVER_TELEM_CONSTANTS).CATEGORY_SEPARATOR);
    }
    /**
     * API to add MSER Telemetry for the last failed request
     */ generateLastRequestHeaderValue() {
        const lastRequests = this.getLastRequests();
        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);
        const failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join((0, _constantsMjs.SERVER_TELEM_CONSTANTS).VALUE_SEPARATOR);
        const errors = lastRequests.errors.slice(0, maxErrors).join((0, _constantsMjs.SERVER_TELEM_CONSTANTS).VALUE_SEPARATOR);
        const errorCount = lastRequests.errors.length;
        // Indicate whether this header contains all data or partial data
        const overflow = maxErrors < errorCount ? (0, _constantsMjs.SERVER_TELEM_CONSTANTS).OVERFLOW_TRUE : (0, _constantsMjs.SERVER_TELEM_CONSTANTS).OVERFLOW_FALSE;
        const platformFields = [
            errorCount,
            overflow
        ].join((0, _constantsMjs.SERVER_TELEM_CONSTANTS).VALUE_SEPARATOR);
        return [
            (0, _constantsMjs.SERVER_TELEM_CONSTANTS).SCHEMA_VERSION,
            lastRequests.cacheHits,
            failedRequests,
            errors,
            platformFields
        ].join((0, _constantsMjs.SERVER_TELEM_CONSTANTS).CATEGORY_SEPARATOR);
    }
    /**
     * API to cache token failures for MSER data capture
     * @param error
     */ cacheFailedRequest(error) {
        const lastRequests = this.getLastRequests();
        if (lastRequests.errors.length >= (0, _constantsMjs.SERVER_TELEM_CONSTANTS).MAX_CACHED_ERRORS) {
            // Remove a cached error to make room, first in first out
            lastRequests.failedRequests.shift(); // apiId
            lastRequests.failedRequests.shift(); // correlationId
            lastRequests.errors.shift();
        }
        lastRequests.failedRequests.push(this.apiId, this.correlationId);
        if (error instanceof Error && !!error && error.toString()) {
            if (error instanceof (0, _authErrorMjs.AuthError)) {
                if (error.subError) lastRequests.errors.push(error.subError);
                else if (error.errorCode) lastRequests.errors.push(error.errorCode);
                else lastRequests.errors.push(error.toString());
            } else lastRequests.errors.push(error.toString());
        } else lastRequests.errors.push((0, _constantsMjs.SERVER_TELEM_CONSTANTS).UNKNOWN_ERROR);
        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);
        return;
    }
    /**
     * Update server telemetry cache entry by incrementing cache hit counter
     */ incrementCacheHits() {
        const lastRequests = this.getLastRequests();
        lastRequests.cacheHits += 1;
        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);
        return lastRequests.cacheHits;
    }
    /**
     * Get the server telemetry entity from cache or initialize a new one
     */ getLastRequests() {
        const initialValue = {
            failedRequests: [],
            errors: [],
            cacheHits: 0
        };
        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);
        return lastRequests || initialValue;
    }
    /**
     * Remove server telemetry cache entry
     */ clearTelemetryCache() {
        const lastRequests = this.getLastRequests();
        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);
        const errorCount = lastRequests.errors.length;
        if (numErrorsFlushed === errorCount) // All errors were sent on last request, clear Telemetry cache
        this.cacheManager.removeItem(this.telemetryCacheKey, this.correlationId);
        else {
            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed
            const serverTelemEntity = {
                failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),
                errors: lastRequests.errors.slice(numErrorsFlushed),
                cacheHits: 0
            };
            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity, this.correlationId);
        }
    }
    /**
     * Returns the maximum number of errors that can be flushed to the server in the next network request
     * @param serverTelemetryEntity
     */ static maxErrorsToSend(serverTelemetryEntity) {
        let i;
        let maxErrors = 0;
        let dataSize = 0;
        const errorCount = serverTelemetryEntity.errors.length;
        for(i = 0; i < errorCount; i++){
            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs
            const apiId = serverTelemetryEntity.failedRequests[2 * i] || (0, _constantsMjs.Constants).EMPTY_STRING;
            const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || (0, _constantsMjs.Constants).EMPTY_STRING;
            const errorCode = serverTelemetryEntity.errors[i] || (0, _constantsMjs.Constants).EMPTY_STRING;
            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators
            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;
            if (dataSize < (0, _constantsMjs.SERVER_TELEM_CONSTANTS).MAX_LAST_HEADER_BYTES) // Adding this entry to the header would still keep header size below the limit
            maxErrors += 1;
            else break;
        }
        return maxErrors;
    }
    /**
     * Get the region discovery fields
     *
     * @returns string
     */ getRegionDiscoveryFields() {
        const regionDiscoveryFields = [];
        regionDiscoveryFields.push(this.regionUsed || (0, _constantsMjs.Constants).EMPTY_STRING);
        regionDiscoveryFields.push(this.regionSource || (0, _constantsMjs.Constants).EMPTY_STRING);
        regionDiscoveryFields.push(this.regionOutcome || (0, _constantsMjs.Constants).EMPTY_STRING);
        return regionDiscoveryFields.join(",");
    }
    /**
     * Update the region discovery metadata
     *
     * @param regionDiscoveryMetadata
     * @returns void
     */ updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {
        this.regionUsed = regionDiscoveryMetadata.region_used;
        this.regionSource = regionDiscoveryMetadata.region_source;
        this.regionOutcome = regionDiscoveryMetadata.region_outcome;
    }
    /**
     * Set cache outcome
     */ setCacheOutcome(cacheOutcome) {
        this.cacheOutcome = cacheOutcome;
    }
    setNativeBrokerErrorCode(errorCode) {
        const lastRequests = this.getLastRequests();
        lastRequests.nativeBrokerErrorCode = errorCode;
        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);
    }
    getNativeBrokerErrorCode() {
        return this.getLastRequests().nativeBrokerErrorCode;
    }
    clearNativeBrokerErrorCode() {
        const lastRequests = this.getLastRequests();
        delete lastRequests.nativeBrokerErrorCode;
        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);
    }
    static makeExtraSkuString(params) {
        return makeExtraSkuString(params);
    }
}

},{"../../utils/Constants.mjs":"81leO","../../error/AuthError.mjs":"jXpbF","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"6c9ll":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JoseHeader", ()=>JoseHeader);
var _joseHeaderErrorMjs = require("../error/JoseHeaderError.mjs");
var _constantsMjs = require("../utils/Constants.mjs");
var _joseHeaderErrorCodesMjs = require("../error/JoseHeaderErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /** @internal */ class JoseHeader {
    constructor(options){
        this.typ = options.typ;
        this.alg = options.alg;
        this.kid = options.kid;
    }
    /**
     * Builds SignedHttpRequest formatted JOSE Header from the
     * JOSE Header options provided or previously set on the object and returns
     * the stringified header object.
     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.
     * @param shrHeaderOptions
     * @returns
     */ static getShrHeaderString(shrHeaderOptions) {
        // KeyID is required on the SHR header
        if (!shrHeaderOptions.kid) throw (0, _joseHeaderErrorMjs.createJoseHeaderError)((0, _joseHeaderErrorCodesMjs.missingKidError));
        // Alg is required on the SHR header
        if (!shrHeaderOptions.alg) throw (0, _joseHeaderErrorMjs.createJoseHeaderError)((0, _joseHeaderErrorCodesMjs.missingAlgError));
        const shrHeader = new JoseHeader({
            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases
            typ: shrHeaderOptions.typ || (0, _constantsMjs.JsonWebTokenTypes).Pop,
            kid: shrHeaderOptions.kid,
            alg: shrHeaderOptions.alg
        });
        return JSON.stringify(shrHeader);
    }
}

},{"../error/JoseHeaderError.mjs":"joD73","../utils/Constants.mjs":"81leO","../error/JoseHeaderErrorCodes.mjs":"lTkE9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"joD73":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JoseHeaderError", ()=>JoseHeaderError);
parcelHelpers.export(exports, "JoseHeaderErrorMessages", ()=>JoseHeaderErrorMessages);
parcelHelpers.export(exports, "createJoseHeaderError", ()=>createJoseHeaderError);
var _authErrorMjs = require("./AuthError.mjs");
var _joseHeaderErrorCodesMjs = require("./JoseHeaderErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const JoseHeaderErrorMessages = {
    [(0, _joseHeaderErrorCodesMjs.missingKidError)]: "The JOSE Header for the requested JWT, JWS or JWK object requires a keyId to be configured as the 'kid' header claim. No 'kid' value was provided.",
    [(0, _joseHeaderErrorCodesMjs.missingAlgError)]: "The JOSE Header for the requested JWT, JWS or JWK object requires an algorithm to be specified as the 'alg' header claim. No 'alg' value was provided."
};
/**
 * Error thrown when there is an error in the client code running on the browser.
 */ class JoseHeaderError extends (0, _authErrorMjs.AuthError) {
    constructor(errorCode, errorMessage){
        super(errorCode, errorMessage);
        this.name = "JoseHeaderError";
        Object.setPrototypeOf(this, JoseHeaderError.prototype);
    }
}
/** Returns JoseHeaderError object */ function createJoseHeaderError(code) {
    return new JoseHeaderError(code, JoseHeaderErrorMessages[code]);
}

},{"./AuthError.mjs":"jXpbF","./JoseHeaderErrorCodes.mjs":"lTkE9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"lTkE9":[function(require,module,exports,__globalThis) {
/*! @azure/msal-common v15.13.1 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "missingAlgError", ()=>missingAlgError);
parcelHelpers.export(exports, "missingKidError", ()=>missingKidError);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const missingKidError = "missing_kid_error";
const missingAlgError = "missing_alg_error";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"dg1Z3":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserAuthErrorCodes", ()=>_browserAuthErrorCodesMjs);
parcelHelpers.export(exports, "BrowserAuthError", ()=>BrowserAuthError);
parcelHelpers.export(exports, "BrowserAuthErrorMessage", ()=>BrowserAuthErrorMessage);
parcelHelpers.export(exports, "BrowserAuthErrorMessages", ()=>BrowserAuthErrorMessages);
parcelHelpers.export(exports, "createBrowserAuthError", ()=>createBrowserAuthError);
var _browser = require("@azure/msal-common/browser");
var _browserAuthErrorCodesMjs = require("./BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const ErrorLink = "For more visit: aka.ms/msaljs/browser-errors";
/**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 */ const BrowserAuthErrorMessages = {
    [(0, _browserAuthErrorCodesMjs.pkceNotCreated)]: "The PKCE code challenge and verifier could not be generated.",
    [(0, _browserAuthErrorCodesMjs.earJwkEmpty)]: "No EAR encryption key provided. This is unexpected.",
    [(0, _browserAuthErrorCodesMjs.earJweEmpty)]: "Server response does not contain ear_jwe property. This is unexpected.",
    [(0, _browserAuthErrorCodesMjs.cryptoNonExistent)]: "The crypto object or function is not available.",
    [(0, _browserAuthErrorCodesMjs.emptyNavigateUri)]: "Navigation URI is empty. Please check stack trace for more info.",
    [(0, _browserAuthErrorCodesMjs.hashEmptyError)]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,
    [(0, _browserAuthErrorCodesMjs.noStateInHash)]: "Hash does not contain state. Please verify that the request originated from msal.",
    [(0, _browserAuthErrorCodesMjs.hashDoesNotContainKnownProperties)]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,
    [(0, _browserAuthErrorCodesMjs.unableToParseState)]: "Unable to parse state. Please verify that the request originated from msal.",
    [(0, _browserAuthErrorCodesMjs.stateInteractionTypeMismatch)]: "Hash contains state but the interaction type does not match the caller.",
    [(0, _browserAuthErrorCodesMjs.interactionInProgress)]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,
    [(0, _browserAuthErrorCodesMjs.popupWindowError)]: "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.",
    [(0, _browserAuthErrorCodesMjs.emptyWindowError)]: "window.open returned null or undefined window object.",
    [(0, _browserAuthErrorCodesMjs.userCancelled)]: "User cancelled the flow.",
    [(0, _browserAuthErrorCodesMjs.monitorPopupTimeout)]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,
    [(0, _browserAuthErrorCodesMjs.monitorWindowTimeout)]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,
    [(0, _browserAuthErrorCodesMjs.redirectInIframe)]: "Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.",
    [(0, _browserAuthErrorCodesMjs.blockIframeReload)]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,
    [(0, _browserAuthErrorCodesMjs.blockNestedPopups)]: "Request was blocked inside a popup because MSAL detected it was running in a popup.",
    [(0, _browserAuthErrorCodesMjs.iframeClosedPrematurely)]: "The iframe being monitored was closed prematurely.",
    [(0, _browserAuthErrorCodesMjs.silentLogoutUnsupported)]: "Silent logout not supported. Please call logoutRedirect or logoutPopup instead.",
    [(0, _browserAuthErrorCodesMjs.noAccountError)]: "No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.",
    [(0, _browserAuthErrorCodesMjs.silentPromptValueError)]: "The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.",
    [(0, _browserAuthErrorCodesMjs.noTokenRequestCacheError)]: "No token request found in cache.",
    [(0, _browserAuthErrorCodesMjs.unableToParseTokenRequestCacheError)]: "The cached token request could not be parsed.",
    [(0, _browserAuthErrorCodesMjs.authRequestNotSetError)]: "Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler",
    [(0, _browserAuthErrorCodesMjs.invalidCacheType)]: "Invalid cache type",
    [(0, _browserAuthErrorCodesMjs.nonBrowserEnvironment)]: "Login and token requests are not supported in non-browser environments.",
    [(0, _browserAuthErrorCodesMjs.databaseNotOpen)]: "Database is not open!",
    [(0, _browserAuthErrorCodesMjs.noNetworkConnectivity)]: "No network connectivity. Check your internet connection.",
    [(0, _browserAuthErrorCodesMjs.postRequestFailed)]: "Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'",
    [(0, _browserAuthErrorCodesMjs.getRequestFailed)]: "Network request failed. Please check the network trace to determine root cause.",
    [(0, _browserAuthErrorCodesMjs.failedToParseResponse)]: "Failed to parse network response. Check network trace.",
    [(0, _browserAuthErrorCodesMjs.unableToLoadToken)]: "Error loading token to cache.",
    [(0, _browserAuthErrorCodesMjs.cryptoKeyNotFound)]: "Cryptographic Key or Keypair not found in browser storage.",
    [(0, _browserAuthErrorCodesMjs.authCodeRequired)]: "An authorization code must be provided (as the `code` property on the request) to this flow.",
    [(0, _browserAuthErrorCodesMjs.authCodeOrNativeAccountIdRequired)]: "An authorization code or nativeAccountId must be provided to this flow.",
    [(0, _browserAuthErrorCodesMjs.spaCodeAndNativeAccountIdPresent)]: "Request cannot contain both spa code and native account id.",
    [(0, _browserAuthErrorCodesMjs.databaseUnavailable)]: "IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.",
    [(0, _browserAuthErrorCodesMjs.unableToAcquireTokenFromNativePlatform)]: `Unable to acquire token from native platform.  ${ErrorLink}`,
    [(0, _browserAuthErrorCodesMjs.nativeHandshakeTimeout)]: "Timed out while attempting to establish connection to browser extension",
    [(0, _browserAuthErrorCodesMjs.nativeExtensionNotInstalled)]: "Native extension is not installed. If you think this is a mistake call the initialize function.",
    [(0, _browserAuthErrorCodesMjs.nativeConnectionNotEstablished)]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,
    [(0, _browserAuthErrorCodesMjs.uninitializedPublicClientApplication)]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,
    [(0, _browserAuthErrorCodesMjs.nativePromptNotSupported)]: "The provided prompt is not supported by the native platform. This request should be routed to the web based flow.",
    [(0, _browserAuthErrorCodesMjs.invalidBase64String)]: "Invalid base64 encoded string.",
    [(0, _browserAuthErrorCodesMjs.invalidPopTokenRequest)]: "Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true.",
    [(0, _browserAuthErrorCodesMjs.failedToBuildHeaders)]: "Failed to build request headers object.",
    [(0, _browserAuthErrorCodesMjs.failedToParseHeaders)]: "Failed to parse response headers",
    [(0, _browserAuthErrorCodesMjs.failedToDecryptEarResponse)]: "Failed to decrypt ear response",
    [(0, _browserAuthErrorCodesMjs.timedOut)]: "The request timed out."
};
/**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 * @deprecated Use exported BrowserAuthErrorCodes instead.
 * In your app you can do :
 * ```
 * import { BrowserAuthErrorCodes } from "@azure/msal-browser";
 * ```
 */ const BrowserAuthErrorMessage = {
    pkceNotGenerated: {
        code: (0, _browserAuthErrorCodesMjs.pkceNotCreated),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.pkceNotCreated]
    },
    cryptoDoesNotExist: {
        code: (0, _browserAuthErrorCodesMjs.cryptoNonExistent),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.cryptoNonExistent]
    },
    emptyNavigateUriError: {
        code: (0, _browserAuthErrorCodesMjs.emptyNavigateUri),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.emptyNavigateUri]
    },
    hashEmptyError: {
        code: (0, _browserAuthErrorCodesMjs.hashEmptyError),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.hashEmptyError]
    },
    hashDoesNotContainStateError: {
        code: (0, _browserAuthErrorCodesMjs.noStateInHash),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.noStateInHash]
    },
    hashDoesNotContainKnownPropertiesError: {
        code: (0, _browserAuthErrorCodesMjs.hashDoesNotContainKnownProperties),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.hashDoesNotContainKnownProperties]
    },
    unableToParseStateError: {
        code: (0, _browserAuthErrorCodesMjs.unableToParseState),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.unableToParseState]
    },
    stateInteractionTypeMismatchError: {
        code: (0, _browserAuthErrorCodesMjs.stateInteractionTypeMismatch),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.stateInteractionTypeMismatch]
    },
    interactionInProgress: {
        code: (0, _browserAuthErrorCodesMjs.interactionInProgress),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.interactionInProgress]
    },
    popupWindowError: {
        code: (0, _browserAuthErrorCodesMjs.popupWindowError),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.popupWindowError]
    },
    emptyWindowError: {
        code: (0, _browserAuthErrorCodesMjs.emptyWindowError),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.emptyWindowError]
    },
    userCancelledError: {
        code: (0, _browserAuthErrorCodesMjs.userCancelled),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.userCancelled]
    },
    monitorPopupTimeoutError: {
        code: (0, _browserAuthErrorCodesMjs.monitorPopupTimeout),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.monitorPopupTimeout]
    },
    monitorIframeTimeoutError: {
        code: (0, _browserAuthErrorCodesMjs.monitorWindowTimeout),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.monitorWindowTimeout]
    },
    redirectInIframeError: {
        code: (0, _browserAuthErrorCodesMjs.redirectInIframe),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.redirectInIframe]
    },
    blockTokenRequestsInHiddenIframeError: {
        code: (0, _browserAuthErrorCodesMjs.blockIframeReload),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.blockIframeReload]
    },
    blockAcquireTokenInPopupsError: {
        code: (0, _browserAuthErrorCodesMjs.blockNestedPopups),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.blockNestedPopups]
    },
    iframeClosedPrematurelyError: {
        code: (0, _browserAuthErrorCodesMjs.iframeClosedPrematurely),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.iframeClosedPrematurely]
    },
    silentLogoutUnsupportedError: {
        code: (0, _browserAuthErrorCodesMjs.silentLogoutUnsupported),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.silentLogoutUnsupported]
    },
    noAccountError: {
        code: (0, _browserAuthErrorCodesMjs.noAccountError),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.noAccountError]
    },
    silentPromptValueError: {
        code: (0, _browserAuthErrorCodesMjs.silentPromptValueError),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.silentPromptValueError]
    },
    noTokenRequestCacheError: {
        code: (0, _browserAuthErrorCodesMjs.noTokenRequestCacheError),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.noTokenRequestCacheError]
    },
    unableToParseTokenRequestCacheError: {
        code: (0, _browserAuthErrorCodesMjs.unableToParseTokenRequestCacheError),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.unableToParseTokenRequestCacheError]
    },
    authRequestNotSet: {
        code: (0, _browserAuthErrorCodesMjs.authRequestNotSetError),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.authRequestNotSetError]
    },
    invalidCacheType: {
        code: (0, _browserAuthErrorCodesMjs.invalidCacheType),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.invalidCacheType]
    },
    notInBrowserEnvironment: {
        code: (0, _browserAuthErrorCodesMjs.nonBrowserEnvironment),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.nonBrowserEnvironment]
    },
    databaseNotOpen: {
        code: (0, _browserAuthErrorCodesMjs.databaseNotOpen),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.databaseNotOpen]
    },
    noNetworkConnectivity: {
        code: (0, _browserAuthErrorCodesMjs.noNetworkConnectivity),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.noNetworkConnectivity]
    },
    postRequestFailed: {
        code: (0, _browserAuthErrorCodesMjs.postRequestFailed),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.postRequestFailed]
    },
    getRequestFailed: {
        code: (0, _browserAuthErrorCodesMjs.getRequestFailed),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.getRequestFailed]
    },
    failedToParseNetworkResponse: {
        code: (0, _browserAuthErrorCodesMjs.failedToParseResponse),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.failedToParseResponse]
    },
    unableToLoadTokenError: {
        code: (0, _browserAuthErrorCodesMjs.unableToLoadToken),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.unableToLoadToken]
    },
    signingKeyNotFoundInStorage: {
        code: (0, _browserAuthErrorCodesMjs.cryptoKeyNotFound),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.cryptoKeyNotFound]
    },
    authCodeRequired: {
        code: (0, _browserAuthErrorCodesMjs.authCodeRequired),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.authCodeRequired]
    },
    authCodeOrNativeAccountRequired: {
        code: (0, _browserAuthErrorCodesMjs.authCodeOrNativeAccountIdRequired),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.authCodeOrNativeAccountIdRequired]
    },
    spaCodeAndNativeAccountPresent: {
        code: (0, _browserAuthErrorCodesMjs.spaCodeAndNativeAccountIdPresent),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.spaCodeAndNativeAccountIdPresent]
    },
    databaseUnavailable: {
        code: (0, _browserAuthErrorCodesMjs.databaseUnavailable),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.databaseUnavailable]
    },
    unableToAcquireTokenFromNativePlatform: {
        code: (0, _browserAuthErrorCodesMjs.unableToAcquireTokenFromNativePlatform),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.unableToAcquireTokenFromNativePlatform]
    },
    nativeHandshakeTimeout: {
        code: (0, _browserAuthErrorCodesMjs.nativeHandshakeTimeout),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.nativeHandshakeTimeout]
    },
    nativeExtensionNotInstalled: {
        code: (0, _browserAuthErrorCodesMjs.nativeExtensionNotInstalled),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.nativeExtensionNotInstalled]
    },
    nativeConnectionNotEstablished: {
        code: (0, _browserAuthErrorCodesMjs.nativeConnectionNotEstablished),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.nativeConnectionNotEstablished]
    },
    uninitializedPublicClientApplication: {
        code: (0, _browserAuthErrorCodesMjs.uninitializedPublicClientApplication),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.uninitializedPublicClientApplication]
    },
    nativePromptNotSupported: {
        code: (0, _browserAuthErrorCodesMjs.nativePromptNotSupported),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.nativePromptNotSupported]
    },
    invalidBase64StringError: {
        code: (0, _browserAuthErrorCodesMjs.invalidBase64String),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.invalidBase64String]
    },
    invalidPopTokenRequest: {
        code: (0, _browserAuthErrorCodesMjs.invalidPopTokenRequest),
        desc: BrowserAuthErrorMessages[0, _browserAuthErrorCodesMjs.invalidPopTokenRequest]
    }
};
/**
 * Browser library error class thrown by the MSAL.js library for SPAs
 */ class BrowserAuthError extends (0, _browser.AuthError) {
    constructor(errorCode, subError){
        super(errorCode, BrowserAuthErrorMessages[errorCode], subError);
        Object.setPrototypeOf(this, BrowserAuthError.prototype);
        this.name = "BrowserAuthError";
    }
}
function createBrowserAuthError(errorCode, subError) {
    return new BrowserAuthError(errorCode, subError);
}

},{"@azure/msal-common/browser":"aaatw","./BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"dwOM5":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "authCodeOrNativeAccountIdRequired", ()=>authCodeOrNativeAccountIdRequired);
parcelHelpers.export(exports, "authCodeRequired", ()=>authCodeRequired);
parcelHelpers.export(exports, "authRequestNotSetError", ()=>authRequestNotSetError);
parcelHelpers.export(exports, "blockIframeReload", ()=>blockIframeReload);
parcelHelpers.export(exports, "blockNestedPopups", ()=>blockNestedPopups);
parcelHelpers.export(exports, "cryptoKeyNotFound", ()=>cryptoKeyNotFound);
parcelHelpers.export(exports, "cryptoNonExistent", ()=>cryptoNonExistent);
parcelHelpers.export(exports, "databaseNotOpen", ()=>databaseNotOpen);
parcelHelpers.export(exports, "databaseUnavailable", ()=>databaseUnavailable);
parcelHelpers.export(exports, "earJweEmpty", ()=>earJweEmpty);
parcelHelpers.export(exports, "earJwkEmpty", ()=>earJwkEmpty);
parcelHelpers.export(exports, "emptyNavigateUri", ()=>emptyNavigateUri);
parcelHelpers.export(exports, "emptyWindowError", ()=>emptyWindowError);
parcelHelpers.export(exports, "failedToBuildHeaders", ()=>failedToBuildHeaders);
parcelHelpers.export(exports, "failedToDecryptEarResponse", ()=>failedToDecryptEarResponse);
parcelHelpers.export(exports, "failedToParseHeaders", ()=>failedToParseHeaders);
parcelHelpers.export(exports, "failedToParseResponse", ()=>failedToParseResponse);
parcelHelpers.export(exports, "getRequestFailed", ()=>getRequestFailed);
parcelHelpers.export(exports, "hashDoesNotContainKnownProperties", ()=>hashDoesNotContainKnownProperties);
parcelHelpers.export(exports, "hashEmptyError", ()=>hashEmptyError);
parcelHelpers.export(exports, "iframeClosedPrematurely", ()=>iframeClosedPrematurely);
parcelHelpers.export(exports, "interactionInProgress", ()=>interactionInProgress);
parcelHelpers.export(exports, "invalidBase64String", ()=>invalidBase64String);
parcelHelpers.export(exports, "invalidCacheType", ()=>invalidCacheType);
parcelHelpers.export(exports, "invalidPopTokenRequest", ()=>invalidPopTokenRequest);
parcelHelpers.export(exports, "monitorPopupTimeout", ()=>monitorPopupTimeout);
parcelHelpers.export(exports, "monitorWindowTimeout", ()=>monitorWindowTimeout);
parcelHelpers.export(exports, "nativeConnectionNotEstablished", ()=>nativeConnectionNotEstablished);
parcelHelpers.export(exports, "nativeExtensionNotInstalled", ()=>nativeExtensionNotInstalled);
parcelHelpers.export(exports, "nativeHandshakeTimeout", ()=>nativeHandshakeTimeout);
parcelHelpers.export(exports, "nativePromptNotSupported", ()=>nativePromptNotSupported);
parcelHelpers.export(exports, "noAccountError", ()=>noAccountError);
parcelHelpers.export(exports, "noNetworkConnectivity", ()=>noNetworkConnectivity);
parcelHelpers.export(exports, "noStateInHash", ()=>noStateInHash);
parcelHelpers.export(exports, "noTokenRequestCacheError", ()=>noTokenRequestCacheError);
parcelHelpers.export(exports, "nonBrowserEnvironment", ()=>nonBrowserEnvironment);
parcelHelpers.export(exports, "pkceNotCreated", ()=>pkceNotCreated);
parcelHelpers.export(exports, "popupWindowError", ()=>popupWindowError);
parcelHelpers.export(exports, "postRequestFailed", ()=>postRequestFailed);
parcelHelpers.export(exports, "redirectInIframe", ()=>redirectInIframe);
parcelHelpers.export(exports, "silentLogoutUnsupported", ()=>silentLogoutUnsupported);
parcelHelpers.export(exports, "silentPromptValueError", ()=>silentPromptValueError);
parcelHelpers.export(exports, "spaCodeAndNativeAccountIdPresent", ()=>spaCodeAndNativeAccountIdPresent);
parcelHelpers.export(exports, "stateInteractionTypeMismatch", ()=>stateInteractionTypeMismatch);
parcelHelpers.export(exports, "timedOut", ()=>timedOut);
parcelHelpers.export(exports, "unableToAcquireTokenFromNativePlatform", ()=>unableToAcquireTokenFromNativePlatform);
parcelHelpers.export(exports, "unableToLoadToken", ()=>unableToLoadToken);
parcelHelpers.export(exports, "unableToParseState", ()=>unableToParseState);
parcelHelpers.export(exports, "unableToParseTokenRequestCacheError", ()=>unableToParseTokenRequestCacheError);
parcelHelpers.export(exports, "uninitializedPublicClientApplication", ()=>uninitializedPublicClientApplication);
parcelHelpers.export(exports, "userCancelled", ()=>userCancelled);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const pkceNotCreated = "pkce_not_created";
const earJwkEmpty = "ear_jwk_empty";
const earJweEmpty = "ear_jwe_empty";
const cryptoNonExistent = "crypto_nonexistent";
const emptyNavigateUri = "empty_navigate_uri";
const hashEmptyError = "hash_empty_error";
const noStateInHash = "no_state_in_hash";
const hashDoesNotContainKnownProperties = "hash_does_not_contain_known_properties";
const unableToParseState = "unable_to_parse_state";
const stateInteractionTypeMismatch = "state_interaction_type_mismatch";
const interactionInProgress = "interaction_in_progress";
const popupWindowError = "popup_window_error";
const emptyWindowError = "empty_window_error";
const userCancelled = "user_cancelled";
const monitorPopupTimeout = "monitor_popup_timeout";
const monitorWindowTimeout = "monitor_window_timeout";
const redirectInIframe = "redirect_in_iframe";
const blockIframeReload = "block_iframe_reload";
const blockNestedPopups = "block_nested_popups";
const iframeClosedPrematurely = "iframe_closed_prematurely";
const silentLogoutUnsupported = "silent_logout_unsupported";
const noAccountError = "no_account_error";
const silentPromptValueError = "silent_prompt_value_error";
const noTokenRequestCacheError = "no_token_request_cache_error";
const unableToParseTokenRequestCacheError = "unable_to_parse_token_request_cache_error";
const authRequestNotSetError = "auth_request_not_set_error";
const invalidCacheType = "invalid_cache_type";
const nonBrowserEnvironment = "non_browser_environment";
const databaseNotOpen = "database_not_open";
const noNetworkConnectivity = "no_network_connectivity";
const postRequestFailed = "post_request_failed";
const getRequestFailed = "get_request_failed";
const failedToParseResponse = "failed_to_parse_response";
const unableToLoadToken = "unable_to_load_token";
const cryptoKeyNotFound = "crypto_key_not_found";
const authCodeRequired = "auth_code_required";
const authCodeOrNativeAccountIdRequired = "auth_code_or_nativeAccountId_required";
const spaCodeAndNativeAccountIdPresent = "spa_code_and_nativeAccountId_present";
const databaseUnavailable = "database_unavailable";
const unableToAcquireTokenFromNativePlatform = "unable_to_acquire_token_from_native_platform";
const nativeHandshakeTimeout = "native_handshake_timeout";
const nativeExtensionNotInstalled = "native_extension_not_installed";
const nativeConnectionNotEstablished = "native_connection_not_established";
const uninitializedPublicClientApplication = "uninitialized_public_client_application";
const nativePromptNotSupported = "native_prompt_not_supported";
const invalidBase64String = "invalid_base64_string";
const invalidPopTokenRequest = "invalid_pop_token_request";
const failedToBuildHeaders = "failed_to_build_headers";
const failedToParseHeaders = "failed_to_parse_headers";
const failedToDecryptEarResponse = "failed_to_decrypt_ear_response";
const timedOut = "timed_out";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"kJowt":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApiId", ()=>ApiId);
parcelHelpers.export(exports, "BrowserCacheLocation", ()=>BrowserCacheLocation);
parcelHelpers.export(exports, "BrowserConstants", ()=>BrowserConstants);
parcelHelpers.export(exports, "CacheLookupPolicy", ()=>CacheLookupPolicy);
parcelHelpers.export(exports, "DB_NAME", ()=>DB_NAME);
parcelHelpers.export(exports, "DB_TABLE_NAME", ()=>DB_TABLE_NAME);
parcelHelpers.export(exports, "DB_VERSION", ()=>DB_VERSION);
parcelHelpers.export(exports, "DEFAULT_REQUEST", ()=>DEFAULT_REQUEST);
parcelHelpers.export(exports, "HTTP_REQUEST_TYPE", ()=>HTTP_REQUEST_TYPE);
parcelHelpers.export(exports, "INTERACTION_TYPE", ()=>INTERACTION_TYPE);
parcelHelpers.export(exports, "InMemoryCacheKeys", ()=>InMemoryCacheKeys);
parcelHelpers.export(exports, "InteractionStatus", ()=>InteractionStatus);
parcelHelpers.export(exports, "InteractionType", ()=>InteractionType);
parcelHelpers.export(exports, "KEY_FORMAT_JWK", ()=>KEY_FORMAT_JWK);
parcelHelpers.export(exports, "NativeExtensionMethod", ()=>NativeExtensionMethod);
parcelHelpers.export(exports, "PlatformAuthConstants", ()=>PlatformAuthConstants);
parcelHelpers.export(exports, "TemporaryCacheKeys", ()=>TemporaryCacheKeys);
parcelHelpers.export(exports, "WrapperSKU", ()=>WrapperSKU);
parcelHelpers.export(exports, "iFrameRenewalPolicies", ()=>iFrameRenewalPolicies);
var _browser = require("@azure/msal-common/browser");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Constants
 */ const BrowserConstants = {
    /**
     * Invalid grant error code
     */ INVALID_GRANT_ERROR: "invalid_grant",
    /**
     * Default popup window width
     */ POPUP_WIDTH: 483,
    /**
     * Default popup window height
     */ POPUP_HEIGHT: 600,
    /**
     * Name of the popup window starts with
     */ POPUP_NAME_PREFIX: "msal",
    /**
     * Default popup monitor poll interval in milliseconds
     */ DEFAULT_POLL_INTERVAL_MS: 30,
    /**
     * Msal-browser SKU
     */ MSAL_SKU: "msal.js.browser"
};
const PlatformAuthConstants = {
    CHANNEL_ID: "53ee284d-920a-4b59-9d30-a60315b26836",
    PREFERRED_EXTENSION_ID: "ppnbnpeolgkicgegkbkbjmhlideopiji",
    MATS_TELEMETRY: "MATS",
    MICROSOFT_ENTRA_BROKERID: "MicrosoftEntra",
    DOM_API_NAME: "DOM API",
    PLATFORM_DOM_APIS: "get-token-and-sign-out",
    PLATFORM_DOM_PROVIDER: "PlatformAuthDOMHandler",
    PLATFORM_EXTENSION_PROVIDER: "PlatformAuthExtensionHandler"
};
const NativeExtensionMethod = {
    HandshakeRequest: "Handshake",
    HandshakeResponse: "HandshakeResponse",
    GetToken: "GetToken",
    Response: "Response"
};
const BrowserCacheLocation = {
    LocalStorage: "localStorage",
    SessionStorage: "sessionStorage",
    MemoryStorage: "memoryStorage"
};
/**
 * HTTP Request types supported by MSAL.
 */ const HTTP_REQUEST_TYPE = {
    GET: "GET",
    POST: "POST"
};
const INTERACTION_TYPE = {
    SIGNIN: "signin",
    SIGNOUT: "signout"
};
/**
 * Temporary cache keys for MSAL, deleted after any request.
 */ const TemporaryCacheKeys = {
    ORIGIN_URI: "request.origin",
    URL_HASH: "urlHash",
    REQUEST_PARAMS: "request.params",
    VERIFIER: "code.verifier",
    INTERACTION_STATUS_KEY: "interaction.status",
    NATIVE_REQUEST: "request.native"
};
/**
 * Cache keys stored in-memory
 */ const InMemoryCacheKeys = {
    WRAPPER_SKU: "wrapper.sku",
    WRAPPER_VER: "wrapper.version"
};
/**
 * API Codes for Telemetry purposes.
 * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs
 * 0-99 Silent Flow
 * 800-899 Auth Code Flow
 */ const ApiId = {
    acquireTokenRedirect: 861,
    acquireTokenPopup: 862,
    ssoSilent: 863,
    acquireTokenSilent_authCode: 864,
    handleRedirectPromise: 865,
    acquireTokenByCode: 866,
    acquireTokenSilent_silentFlow: 61,
    logout: 961,
    logoutPopup: 962
};
/*
 * Interaction type of the API - used for state and telemetry
 */ var InteractionType;
(function(InteractionType) {
    InteractionType["Redirect"] = "redirect";
    InteractionType["Popup"] = "popup";
    InteractionType["Silent"] = "silent";
    InteractionType["None"] = "none";
})(InteractionType || (InteractionType = {}));
/**
 * Types of interaction currently in progress.
 * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.
 */ const InteractionStatus = {
    /**
     * Initial status before interaction occurs
     */ Startup: "startup",
    /**
     * Status set when all login calls occuring
     */ Login: "login",
    /**
     * Status set when logout call occuring
     */ Logout: "logout",
    /**
     * Status set for acquireToken calls
     */ AcquireToken: "acquireToken",
    /**
     * Status set for ssoSilent calls
     */ SsoSilent: "ssoSilent",
    /**
     * Status set when handleRedirect in progress
     */ HandleRedirect: "handleRedirect",
    /**
     * Status set when interaction is complete
     */ None: "none"
};
const DEFAULT_REQUEST = {
    scopes: (0, _browser.OIDC_DEFAULT_SCOPES)
};
/**
 * JWK Key Format string (Type MUST be defined for window crypto APIs)
 */ const KEY_FORMAT_JWK = "jwk";
// Supported wrapper SKUs
const WrapperSKU = {
    React: "@azure/msal-react",
    Angular: "@azure/msal-angular"
};
// DatabaseStorage Constants
const DB_NAME = "msal.db";
const DB_VERSION = 1;
const DB_TABLE_NAME = `${DB_NAME}.keys`;
const CacheLookupPolicy = {
    /*
     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired
     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token
     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.
     */ Default: 0,
    /*
     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or
     * refresh tokens.
     */ AccessToken: 1,
    /*
     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or
     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it
     * will not be renewed and acquireTokenSilent will fail.
     */ AccessTokenAndRefreshToken: 2,
    /*
     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to
     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be
     * renewed and acquireTokenSilent will fail.
     */ RefreshToken: 3,
    /*
     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the
     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to
     * setting "forceRefresh: true".
     */ RefreshTokenAndNetwork: 4,
    /*
     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will
     * always fail if 3rd party cookies are blocked by the browser.
     */ Skip: 5
};
const iFrameRenewalPolicies = [
    CacheLookupPolicy.Default,
    CacheLookupPolicy.Skip,
    CacheLookupPolicy.RefreshTokenAndNetwork
];

},{"@azure/msal-common/browser":"aaatw","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"8sZR9":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createNewGuid", ()=>createNewGuid);
parcelHelpers.export(exports, "decrypt", ()=>decrypt);
parcelHelpers.export(exports, "decryptEarResponse", ()=>decryptEarResponse);
parcelHelpers.export(exports, "encrypt", ()=>encrypt);
parcelHelpers.export(exports, "exportJwk", ()=>exportJwk);
parcelHelpers.export(exports, "generateBaseKey", ()=>generateBaseKey);
parcelHelpers.export(exports, "generateEarKey", ()=>generateEarKey);
parcelHelpers.export(exports, "generateHKDF", ()=>generateHKDF);
parcelHelpers.export(exports, "generateKeyPair", ()=>generateKeyPair);
parcelHelpers.export(exports, "getRandomValues", ()=>getRandomValues);
parcelHelpers.export(exports, "hashString", ()=>hashString);
parcelHelpers.export(exports, "importEarKey", ()=>importEarKey);
parcelHelpers.export(exports, "importJwk", ()=>importJwk);
parcelHelpers.export(exports, "sha256Digest", ()=>sha256Digest);
parcelHelpers.export(exports, "sign", ()=>sign);
parcelHelpers.export(exports, "validateCryptoAvailable", ()=>validateCryptoAvailable);
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browser = require("@azure/msal-common/browser");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _base64EncodeMjs = require("../encode/Base64Encode.mjs");
var _base64DecodeMjs = require("../encode/Base64Decode.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This file defines functions used by the browser library to perform cryptography operations such as
 * hashing and encoding. It also has helper functions to validate the availability of specific APIs.
 */ /**
 * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams
 */ // Algorithms
const PKCS1_V15_KEYGEN_ALG = "RSASSA-PKCS1-v1_5";
const AES_GCM = "AES-GCM";
const HKDF = "HKDF";
// SHA-256 hashing algorithm
const S256_HASH_ALG = "SHA-256";
// MOD length for PoP tokens
const MODULUS_LENGTH = 2048;
// Public Exponent
const PUBLIC_EXPONENT = new Uint8Array([
    0x01,
    0x00,
    0x01
]);
// UUID hex digits
const UUID_CHARS = "0123456789abcdef";
// Array to store UINT32 random value
const UINT32_ARR = new Uint32Array(1);
// Key Format
const RAW = "raw";
// Key Usages
const ENCRYPT = "encrypt";
const DECRYPT = "decrypt";
const DERIVE_KEY = "deriveKey";
// Suberror
const SUBTLE_SUBERROR = "crypto_subtle_undefined";
const keygenAlgorithmOptions = {
    name: PKCS1_V15_KEYGEN_ALG,
    hash: S256_HASH_ALG,
    modulusLength: MODULUS_LENGTH,
    publicExponent: PUBLIC_EXPONENT
};
/**
 * Check whether browser crypto is available.
 */ function validateCryptoAvailable(skipValidateSubtleCrypto) {
    if (!window) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.nonBrowserEnvironment));
    if (!window.crypto) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.cryptoNonExistent));
    if (!skipValidateSubtleCrypto && !window.crypto.subtle) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.cryptoNonExistent), SUBTLE_SUBERROR);
}
/**
 * Returns a sha-256 hash of the given dataString as an ArrayBuffer.
 * @param dataString {string} data string
 * @param performanceClient {?IPerformanceClient}
 * @param correlationId {?string} correlation id
 */ async function sha256Digest(dataString, performanceClient, correlationId) {
    performanceClient?.addQueueMeasurement((0, _browser.PerformanceEvents).Sha256Digest, correlationId);
    const encoder = new TextEncoder();
    const data = encoder.encode(dataString);
    return window.crypto.subtle.digest(S256_HASH_ALG, data);
}
/**
 * Populates buffer with cryptographically random values.
 * @param dataBuffer
 */ function getRandomValues(dataBuffer) {
    return window.crypto.getRandomValues(dataBuffer);
}
/**
 * Returns random Uint32 value.
 * @returns {number}
 */ function getRandomUint32() {
    window.crypto.getRandomValues(UINT32_ARR);
    return UINT32_ARR[0];
}
/**
 * Creates a UUID v7 from the current timestamp.
 * Implementation relies on the system clock to guarantee increasing order of generated identifiers.
 * @returns {number}
 */ function createNewGuid() {
    const currentTimestamp = Date.now();
    const baseRand = getRandomUint32() * 0x400 + (getRandomUint32() & 0x3ff);
    // Result byte array
    const bytes = new Uint8Array(16);
    // A 12-bit `rand_a` field value
    const randA = Math.trunc(baseRand / 2 ** 30);
    // The higher 30 bits of 62-bit `rand_b` field value
    const randBHi = baseRand & 2 ** 30 - 1;
    // The lower 32 bits of 62-bit `rand_b` field value
    const randBLo = getRandomUint32();
    bytes[0] = currentTimestamp / 2 ** 40;
    bytes[1] = currentTimestamp / 2 ** 32;
    bytes[2] = currentTimestamp / 2 ** 24;
    bytes[3] = currentTimestamp / 2 ** 16;
    bytes[4] = currentTimestamp / 256;
    bytes[5] = currentTimestamp;
    bytes[6] = 0x70 | randA >>> 8;
    bytes[7] = randA;
    bytes[8] = 0x80 | randBHi >>> 24;
    bytes[9] = randBHi >>> 16;
    bytes[10] = randBHi >>> 8;
    bytes[11] = randBHi;
    bytes[12] = randBLo >>> 24;
    bytes[13] = randBLo >>> 16;
    bytes[14] = randBLo >>> 8;
    bytes[15] = randBLo;
    let text = "";
    for(let i = 0; i < bytes.length; i++){
        text += UUID_CHARS.charAt(bytes[i] >>> 4);
        text += UUID_CHARS.charAt(bytes[i] & 0xf);
        if (i === 3 || i === 5 || i === 7 || i === 9) text += "-";
    }
    return text;
}
/**
 * Generates a keypair based on current keygen algorithm config.
 * @param extractable
 * @param usages
 */ async function generateKeyPair(extractable, usages) {
    return window.crypto.subtle.generateKey(keygenAlgorithmOptions, extractable, usages);
}
/**
 * Export key as Json Web Key (JWK)
 * @param key
 */ async function exportJwk(key) {
    return window.crypto.subtle.exportKey((0, _browserConstantsMjs.KEY_FORMAT_JWK), key);
}
/**
 * Imports key as Json Web Key (JWK), can set extractable and usages.
 * @param key
 * @param extractable
 * @param usages
 */ async function importJwk(key, extractable, usages) {
    return window.crypto.subtle.importKey((0, _browserConstantsMjs.KEY_FORMAT_JWK), key, keygenAlgorithmOptions, extractable, usages);
}
/**
 * Signs given data with given key
 * @param key
 * @param data
 */ async function sign(key, data) {
    return window.crypto.subtle.sign(keygenAlgorithmOptions, key, data);
}
/**
 * Generates Base64 encoded jwk used in the Encrypted Authorize Response (EAR) flow
 */ async function generateEarKey() {
    const key = await generateBaseKey();
    const keyStr = (0, _base64EncodeMjs.urlEncodeArr)(new Uint8Array(key));
    const jwk = {
        alg: "dir",
        kty: "oct",
        k: keyStr
    };
    return (0, _base64EncodeMjs.base64Encode)(JSON.stringify(jwk));
}
/**
 * Parses earJwk for encryption key and returns CryptoKey object
 * @param earJwk
 * @returns
 */ async function importEarKey(earJwk) {
    const b64DecodedJwk = (0, _base64DecodeMjs.base64Decode)(earJwk);
    const jwkJson = JSON.parse(b64DecodedJwk);
    const rawKey = jwkJson.k;
    const keyBuffer = (0, _base64DecodeMjs.base64DecToArr)(rawKey);
    return window.crypto.subtle.importKey(RAW, keyBuffer, AES_GCM, false, [
        DECRYPT
    ]);
}
/**
 * Decrypt ear_jwe response returned in the Encrypted Authorize Response (EAR) flow
 * @param earJwk
 * @param earJwe
 * @returns
 */ async function decryptEarResponse(earJwk, earJwe) {
    const earJweParts = earJwe.split(".");
    if (earJweParts.length !== 5) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.failedToDecryptEarResponse), "jwe_length");
    const key = await importEarKey(earJwk).catch(()=>{
        throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.failedToDecryptEarResponse), "import_key");
    });
    try {
        const header = new TextEncoder().encode(earJweParts[0]);
        const iv = (0, _base64DecodeMjs.base64DecToArr)(earJweParts[2]);
        const ciphertext = (0, _base64DecodeMjs.base64DecToArr)(earJweParts[3]);
        const tag = (0, _base64DecodeMjs.base64DecToArr)(earJweParts[4]);
        const tagLengthBits = tag.byteLength * 8;
        // Concat ciphertext and tag
        const encryptedData = new Uint8Array(ciphertext.length + tag.length);
        encryptedData.set(ciphertext);
        encryptedData.set(tag, ciphertext.length);
        const decryptedData = await window.crypto.subtle.decrypt({
            name: AES_GCM,
            iv: iv,
            tagLength: tagLengthBits,
            additionalData: header
        }, key, encryptedData);
        return new TextDecoder().decode(decryptedData);
    } catch (e) {
        throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.failedToDecryptEarResponse), "decrypt");
    }
}
/**
 * Generates symmetric base encryption key. This may be stored as all encryption/decryption keys will be derived from this one.
 */ async function generateBaseKey() {
    const key = await window.crypto.subtle.generateKey({
        name: AES_GCM,
        length: 256
    }, true, [
        ENCRYPT,
        DECRYPT
    ]);
    return window.crypto.subtle.exportKey(RAW, key);
}
/**
 * Returns the raw key to be passed into the key derivation function
 * @param baseKey
 * @returns
 */ async function generateHKDF(baseKey) {
    return window.crypto.subtle.importKey(RAW, baseKey, HKDF, false, [
        DERIVE_KEY
    ]);
}
/**
 * Given a base key and a nonce generates a derived key to be used in encryption and decryption.
 * Note: every time we encrypt a new key is derived
 * @param baseKey
 * @param nonce
 * @returns
 */ async function deriveKey(baseKey, nonce, context) {
    return window.crypto.subtle.deriveKey({
        name: HKDF,
        salt: nonce,
        hash: S256_HASH_ALG,
        info: new TextEncoder().encode(context)
    }, baseKey, {
        name: AES_GCM,
        length: 256
    }, false, [
        ENCRYPT,
        DECRYPT
    ]);
}
/**
 * Encrypt the given data given a base key. Returns encrypted data and a nonce that must be provided during decryption
 * @param key
 * @param rawData
 */ async function encrypt(baseKey, rawData, context) {
    const encodedData = new TextEncoder().encode(rawData);
    // The nonce must never be reused with a given key.
    const nonce = window.crypto.getRandomValues(new Uint8Array(16));
    const derivedKey = await deriveKey(baseKey, nonce, context);
    const encryptedData = await window.crypto.subtle.encrypt({
        name: AES_GCM,
        iv: new Uint8Array(12)
    }, derivedKey, encodedData);
    return {
        data: (0, _base64EncodeMjs.urlEncodeArr)(new Uint8Array(encryptedData)),
        nonce: (0, _base64EncodeMjs.urlEncodeArr)(nonce)
    };
}
/**
 * Decrypt data with the given key and nonce
 * @param key
 * @param nonce
 * @param encryptedData
 * @returns
 */ async function decrypt(baseKey, nonce, context, encryptedData) {
    const encodedData = (0, _base64DecodeMjs.base64DecToArr)(encryptedData);
    const derivedKey = await deriveKey(baseKey, (0, _base64DecodeMjs.base64DecToArr)(nonce), context);
    const decryptedData = await window.crypto.subtle.decrypt({
        name: AES_GCM,
        iv: new Uint8Array(12)
    }, derivedKey, encodedData);
    return new TextDecoder().decode(decryptedData);
}
/**
 * Returns the SHA-256 hash of an input string
 * @param plainText
 */ async function hashString(plainText) {
    const hashBuffer = await sha256Digest(plainText);
    const hashBytes = new Uint8Array(hashBuffer);
    return (0, _base64EncodeMjs.urlEncodeArr)(hashBytes);
}

},{"../error/BrowserAuthError.mjs":"dg1Z3","@azure/msal-common/browser":"aaatw","../utils/BrowserConstants.mjs":"kJowt","../encode/Base64Encode.mjs":"bWn1N","../encode/Base64Decode.mjs":"llQUH","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"bWn1N":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "base64Encode", ()=>base64Encode);
parcelHelpers.export(exports, "urlEncode", ()=>urlEncode);
parcelHelpers.export(exports, "urlEncodeArr", ()=>urlEncodeArr);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */ /**
 * Returns URL Safe b64 encoded string from a plaintext string.
 * @param input
 */ function urlEncode(input) {
    return encodeURIComponent(base64Encode(input).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_"));
}
/**
 * Returns URL Safe b64 encoded string from an int8Array.
 * @param inputArr
 */ function urlEncodeArr(inputArr) {
    return base64EncArr(inputArr).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
/**
 * Returns b64 encoded string from plaintext string.
 * @param input
 */ function base64Encode(input) {
    return base64EncArr(new TextEncoder().encode(input));
}
/**
 * Base64 encode byte array
 * @param aBytes
 */ function base64EncArr(aBytes) {
    const binString = Array.from(aBytes, (x)=>String.fromCodePoint(x)).join("");
    return btoa(binString);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"llQUH":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "base64DecToArr", ()=>base64DecToArr);
parcelHelpers.export(exports, "base64Decode", ()=>base64Decode);
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem
 */ /**
 * Returns a URL-safe plaintext decoded string from b64 encoded input.
 * @param input
 */ function base64Decode(input) {
    return new TextDecoder().decode(base64DecToArr(input));
}
/**
 * Decodes base64 into Uint8Array
 * @param base64String
 */ function base64DecToArr(base64String) {
    let encodedString = base64String.replace(/-/g, "+").replace(/_/g, "/");
    switch(encodedString.length % 4){
        case 0:
            break;
        case 2:
            encodedString += "==";
            break;
        case 3:
            encodedString += "=";
            break;
        default:
            throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.invalidBase64String));
    }
    const binString = atob(encodedString);
    return Uint8Array.from(binString, (m)=>m.codePointAt(0) || 0);
}

},{"../error/BrowserAuthError.mjs":"dg1Z3","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"gAGzP":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserConfigurationAuthErrorCodes", ()=>_browserConfigurationAuthErrorCodesMjs);
parcelHelpers.export(exports, "BrowserConfigurationAuthError", ()=>BrowserConfigurationAuthError);
parcelHelpers.export(exports, "BrowserConfigurationAuthErrorMessage", ()=>BrowserConfigurationAuthErrorMessage);
parcelHelpers.export(exports, "BrowserConfigurationAuthErrorMessages", ()=>BrowserConfigurationAuthErrorMessages);
parcelHelpers.export(exports, "createBrowserConfigurationAuthError", ()=>createBrowserConfigurationAuthError);
var _browser = require("@azure/msal-common/browser");
var _browserConfigurationAuthErrorCodesMjs = require("./BrowserConfigurationAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const BrowserConfigurationAuthErrorMessages = {
    [(0, _browserConfigurationAuthErrorCodesMjs.storageNotSupported)]: "Given storage configuration option was not supported.",
    [(0, _browserConfigurationAuthErrorCodesMjs.stubbedPublicClientApplicationCalled)]: "Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors",
    [(0, _browserConfigurationAuthErrorCodesMjs.inMemRedirectUnavailable)]: "Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true."
};
/**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 * @deprecated Use BrowserAuthErrorCodes instead
 */ const BrowserConfigurationAuthErrorMessage = {
    storageNotSupportedError: {
        code: (0, _browserConfigurationAuthErrorCodesMjs.storageNotSupported),
        desc: BrowserConfigurationAuthErrorMessages[0, _browserConfigurationAuthErrorCodesMjs.storageNotSupported]
    },
    stubPcaInstanceCalled: {
        code: (0, _browserConfigurationAuthErrorCodesMjs.stubbedPublicClientApplicationCalled),
        desc: BrowserConfigurationAuthErrorMessages[0, _browserConfigurationAuthErrorCodesMjs.stubbedPublicClientApplicationCalled]
    },
    inMemRedirectUnavailable: {
        code: (0, _browserConfigurationAuthErrorCodesMjs.inMemRedirectUnavailable),
        desc: BrowserConfigurationAuthErrorMessages[0, _browserConfigurationAuthErrorCodesMjs.inMemRedirectUnavailable]
    }
};
/**
 * Browser library error class thrown by the MSAL.js library for SPAs
 */ class BrowserConfigurationAuthError extends (0, _browser.AuthError) {
    constructor(errorCode, errorMessage){
        super(errorCode, errorMessage);
        this.name = "BrowserConfigurationAuthError";
        Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);
    }
}
function createBrowserConfigurationAuthError(errorCode) {
    return new BrowserConfigurationAuthError(errorCode, BrowserConfigurationAuthErrorMessages[errorCode]);
}

},{"@azure/msal-common/browser":"aaatw","./BrowserConfigurationAuthErrorCodes.mjs":"1PmN9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"1PmN9":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inMemRedirectUnavailable", ()=>inMemRedirectUnavailable);
parcelHelpers.export(exports, "storageNotSupported", ()=>storageNotSupported);
parcelHelpers.export(exports, "stubbedPublicClientApplicationCalled", ()=>stubbedPublicClientApplicationCalled);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const storageNotSupported = "storage_not_supported";
const stubbedPublicClientApplicationCalled = "stubbed_public_client_application_called";
const inMemRedirectUnavailable = "in_mem_redirect_unavailable";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"fC6PS":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PublicClientApplication", ()=>PublicClientApplication);
parcelHelpers.export(exports, "createNestablePublicClientApplication", ()=>createNestablePublicClientApplication);
parcelHelpers.export(exports, "createStandardPublicClientApplication", ()=>createStandardPublicClientApplication);
var _controllerFactoryMjs = require("../controllers/ControllerFactory.mjs");
var _standardControllerMjs = require("../controllers/StandardController.mjs");
var _standardOperatingContextMjs = require("../operatingcontext/StandardOperatingContext.mjs");
var _nestedAppAuthControllerMjs = require("../controllers/NestedAppAuthController.mjs");
var _nestedAppOperatingContextMjs = require("../operatingcontext/NestedAppOperatingContext.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications
 * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.
 */ class PublicClientApplication {
    /**
     * Creates StandardController and passes it to the PublicClientApplication
     *
     * @param configuration {Configuration}
     */ static async createPublicClientApplication(configuration) {
        const controller = await (0, _controllerFactoryMjs.createV3Controller)(configuration);
        const pca = new PublicClientApplication(configuration, controller);
        return pca;
    }
    /**
     * @constructor
     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
     *
     * Important attributes in the Configuration object for auth are:
     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
     * - authority: the authority URL for your application.
     * - redirect_uri: the uri of your application registered in the portal.
     *
     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
     *
     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
     * Full B2C functionality will be available in this library in future versions.
     *
     * @param configuration Object for the MSAL PublicClientApplication instance
     * @param IController Optional parameter to explictly set the controller. (Will be removed when we remove public constructor)
     */ constructor(configuration, controller){
        this.isBroker = false;
        this.controller = controller || new (0, _standardControllerMjs.StandardController)(new (0, _standardOperatingContextMjs.StandardOperatingContext)(configuration));
    }
    /**
     * Initializer function to perform async startup tasks such as connecting to WAM extension
     * @param request {?InitializeApplicationRequest}
     */ async initialize(request) {
        return this.controller.initialize(request, this.isBroker);
    }
    /**
     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ async acquireTokenPopup(request) {
        return this.controller.acquireTokenPopup(request);
    }
    /**
     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects
     * the page, so any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */ acquireTokenRedirect(request) {
        return this.controller.acquireTokenRedirect(request);
    }
    /**
     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.
     *
     * @param {@link (SilentRequest:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthenticationResult} object
     */ acquireTokenSilent(silentRequest) {
        return this.controller.acquireTokenSilent(silentRequest);
    }
    /**
     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.
     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.
     * This API is not indended for normal authorization code acquisition and redemption.
     *
     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.
     *
     * @param request {@link AuthorizationCodeRequest}
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ acquireTokenByCode(request) {
        return this.controller.acquireTokenByCode(request);
    }
    /**
     * Adds event callbacks to array
     * @param callback
     * @param eventTypes
     */ addEventCallback(callback, eventTypes) {
        return this.controller.addEventCallback(callback, eventTypes);
    }
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */ removeEventCallback(callbackId) {
        return this.controller.removeEventCallback(callbackId);
    }
    /**
     * Registers a callback to receive performance events.
     *
     * @param {PerformanceCallbackFunction} callback
     * @returns {string}
     */ addPerformanceCallback(callback) {
        return this.controller.addPerformanceCallback(callback);
    }
    /**
     * Removes a callback registered with addPerformanceCallback.
     *
     * @param {string} callbackId
     * @returns {boolean}
     */ removePerformanceCallback(callbackId) {
        return this.controller.removePerformanceCallback(callbackId);
    }
    /**
     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ enableAccountStorageEvents() {
        this.controller.enableAccountStorageEvents();
    }
    /**
     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ disableAccountStorageEvents() {
        this.controller.disableAccountStorageEvents();
    }
    /**
     * Returns the first account found in the cache that matches the account filter passed in.
     * @param accountFilter
     * @returns The first account found in the cache matching the provided filter or null if no account could be found.
     */ getAccount(accountFilter) {
        return this.controller.getAccount(accountFilter);
    }
    /**
     * Returns the signed in account matching homeAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param homeAccountId
     * @returns The account object stored in MSAL
     * @deprecated - Use getAccount instead
     */ getAccountByHomeId(homeAccountId) {
        return this.controller.getAccountByHomeId(homeAccountId);
    }
    /**
     * Returns the signed in account matching localAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param localAccountId
     * @returns The account object stored in MSAL
     * @deprecated - Use getAccount instead
     */ getAccountByLocalId(localId) {
        return this.controller.getAccountByLocalId(localId);
    }
    /**
     * Returns the signed in account matching username.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found.
     * This API is provided for convenience but getAccountById should be used for best reliability
     * @param userName
     * @returns The account object stored in MSAL
     * @deprecated - Use getAccount instead
     */ getAccountByUsername(userName) {
        return this.controller.getAccountByUsername(userName);
    }
    /**
     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.
     * @param accountFilter - (Optional) filter to narrow down the accounts returned
     * @returns Array of AccountInfo objects in cache
     */ getAllAccounts(accountFilter) {
        return this.controller.getAllAccounts(accountFilter);
    }
    /**
     * Event handler function which allows users to fire events after the PublicClientApplication object
     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
     * auth flows.
     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
     * @returns Token response or null. If the return value is null, then no auth redirect was detected.
     */ handleRedirectPromise(hash) {
        return this.controller.handleRedirectPromise(hash);
    }
    /**
     * Use when initiating the login process via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ loginPopup(request) {
        return this.controller.loginPopup(request);
    }
    /**
     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so
     * any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */ loginRedirect(request) {
        return this.controller.loginRedirect(request);
    }
    /**
     * Deprecated logout function. Use logoutRedirect or logoutPopup instead
     * @param logoutRequest
     * @deprecated
     */ logout(logoutRequest) {
        return this.controller.logout(logoutRequest);
    }
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */ logoutRedirect(logoutRequest) {
        return this.controller.logoutRedirect(logoutRequest);
    }
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */ logoutPopup(logoutRequest) {
        return this.controller.logoutPopup(logoutRequest);
    }
    /**
     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:
     * - Any browser using a form of Intelligent Tracking Prevention
     * - If there is not an established session with the service
     *
     * In these cases, the request must be done inside a popup or full frame redirect.
     *
     * For the cases where interaction is required, you cannot send a request with prompt=none.
     *
     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as
     * you session on the server still exists.
     * @param request {@link SsoSilentRequest}
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ ssoSilent(request) {
        return this.controller.ssoSilent(request);
    }
    /**
     * Gets the token cache for the application.
     */ getTokenCache() {
        return this.controller.getTokenCache();
    }
    /**
     * Returns the logger instance
     */ getLogger() {
        return this.controller.getLogger();
    }
    /**
     * Replaces the default logger set in configurations with new Logger with new configurations
     * @param logger Logger instance
     */ setLogger(logger) {
        this.controller.setLogger(logger);
    }
    /**
     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
     * @param account
     */ setActiveAccount(account) {
        this.controller.setActiveAccount(account);
    }
    /**
     * Gets the currently active account
     */ getActiveAccount() {
        return this.controller.getActiveAccount();
    }
    /**
     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.
     * @param sku
     * @param version
     */ initializeWrapperLibrary(sku, version) {
        return this.controller.initializeWrapperLibrary(sku, version);
    }
    /**
     * Sets navigation client
     * @param navigationClient
     */ setNavigationClient(navigationClient) {
        this.controller.setNavigationClient(navigationClient);
    }
    /**
     * Returns the configuration object
     * @internal
     */ getConfiguration() {
        return this.controller.getConfiguration();
    }
    /**
     * Hydrates cache with the tokens and account in the AuthenticationResult object
     * @param result
     * @param request - The request object that was used to obtain the AuthenticationResult
     * @returns
     */ async hydrateCache(result, request) {
        return this.controller.hydrateCache(result, request);
    }
    /**
     * Clears tokens and account from the browser cache.
     * @param logoutRequest
     */ clearCache(logoutRequest) {
        return this.controller.clearCache(logoutRequest);
    }
}
/**
 * creates NestedAppAuthController and passes it to the PublicClientApplication,
 * falls back to StandardController if NestedAppAuthController is not available
 *
 * @param configuration
 * @returns IPublicClientApplication
 *
 */ async function createNestablePublicClientApplication(configuration) {
    const nestedAppAuth = new (0, _nestedAppOperatingContextMjs.NestedAppOperatingContext)(configuration);
    await nestedAppAuth.initialize();
    if (nestedAppAuth.isAvailable()) {
        const controller = new (0, _nestedAppAuthControllerMjs.NestedAppAuthController)(nestedAppAuth);
        const nestablePCA = new PublicClientApplication(configuration, controller);
        await nestablePCA.initialize();
        return nestablePCA;
    }
    return createStandardPublicClientApplication(configuration);
}
/**
 * creates PublicClientApplication using StandardController
 *
 * @param configuration
 * @returns IPublicClientApplication
 *
 */ async function createStandardPublicClientApplication(configuration) {
    const pca = new PublicClientApplication(configuration);
    await pca.initialize();
    return pca;
}

},{"../controllers/ControllerFactory.mjs":"7TdWc","../controllers/StandardController.mjs":"eVk4J","../operatingcontext/StandardOperatingContext.mjs":"dAJ0k","../controllers/NestedAppAuthController.mjs":"afImM","../operatingcontext/NestedAppOperatingContext.mjs":"5cSk7","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7TdWc":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createController", ()=>createController);
parcelHelpers.export(exports, "createV3Controller", ()=>createV3Controller);
var _nestedAppOperatingContextMjs = require("../operatingcontext/NestedAppOperatingContext.mjs");
var _standardOperatingContextMjs = require("../operatingcontext/StandardOperatingContext.mjs");
var _standardControllerMjs = require("./StandardController.mjs");
var _nestedAppAuthControllerMjs = require("./NestedAppAuthController.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ async function createV3Controller(config, request) {
    const standard = new (0, _standardOperatingContextMjs.StandardOperatingContext)(config);
    await standard.initialize();
    return (0, _standardControllerMjs.StandardController).createController(standard, request);
}
async function createController(config) {
    const standard = new (0, _standardOperatingContextMjs.StandardOperatingContext)(config);
    const nestedApp = new (0, _nestedAppOperatingContextMjs.NestedAppOperatingContext)(config);
    const operatingContexts = [
        standard.initialize(),
        nestedApp.initialize()
    ];
    await Promise.all(operatingContexts);
    if (nestedApp.isAvailable() && config.auth.supportsNestedAppAuth) return (0, _nestedAppAuthControllerMjs.NestedAppAuthController).createController(nestedApp);
    else if (standard.isAvailable()) return (0, _standardControllerMjs.StandardController).createController(standard);
    else // Since neither of the actual operating contexts are available keep the UnknownOperatingContextController
    return null;
}

},{"../operatingcontext/NestedAppOperatingContext.mjs":"5cSk7","../operatingcontext/StandardOperatingContext.mjs":"dAJ0k","./StandardController.mjs":"eVk4J","./NestedAppAuthController.mjs":"afImM","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"5cSk7":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NestedAppOperatingContext", ()=>NestedAppOperatingContext);
var _baseOperatingContextMjs = require("./BaseOperatingContext.mjs");
var _bridgeProxyMjs = require("../naa/BridgeProxy.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class NestedAppOperatingContext extends (0, _baseOperatingContextMjs.BaseOperatingContext) {
    constructor(){
        super(...arguments);
        this.bridgeProxy = undefined;
        this.accountContext = null;
    }
    /**
     * Return the module name.  Intended for use with import() to enable dynamic import
     * of the implementation associated with this operating context
     * @returns
     */ getModuleName() {
        return NestedAppOperatingContext.MODULE_NAME;
    }
    /**
     * Returns the unique identifier for this operating context
     * @returns string
     */ getId() {
        return NestedAppOperatingContext.ID;
    }
    /**
     * Returns the current BridgeProxy
     * @returns IBridgeProxy | undefined
     */ getBridgeProxy() {
        return this.bridgeProxy;
    }
    /**
     * Checks whether the operating context is available.
     * Confirms that the code is running a browser rather.  This is required.
     * @returns Promise<boolean> indicating whether this operating context is currently available.
     */ async initialize() {
        try {
            if (typeof window !== "undefined") {
                if (typeof window.__initializeNestedAppAuth === "function") await window.__initializeNestedAppAuth();
                const bridgeProxy = await (0, _bridgeProxyMjs.BridgeProxy).create();
                /*
                 * Because we want single sign on we expect the host app to provide the account context
                 * with a min set of params that can be used to identify the account
                 * this.account = nestedApp.getAccountByFilter(bridgeProxy.getAccountContext());
                 */ this.accountContext = bridgeProxy.getAccountContext();
                this.bridgeProxy = bridgeProxy;
                this.available = bridgeProxy !== undefined;
            }
        } catch (ex) {
            this.logger.infoPii(`Could not initialize Nested App Auth bridge (${ex})`);
        }
        this.logger.info(`Nested App Auth Bridge available: ${this.available}`);
        return this.available;
    }
}
/*
 * TODO: Once we have determine the bundling code return here to specify the name of the bundle
 * containing the implementation for this operating context
 */ NestedAppOperatingContext.MODULE_NAME = "";
/**
 * Unique identifier for the operating context
 */ NestedAppOperatingContext.ID = "NestedAppOperatingContext";

},{"./BaseOperatingContext.mjs":"jnGwm","../naa/BridgeProxy.mjs":"8echq","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jnGwm":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseOperatingContext", ()=>BaseOperatingContext);
var _browser = require("@azure/msal-common/browser");
var _configurationMjs = require("../config/Configuration.mjs");
var _packageMetadataMjs = require("../packageMetadata.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _cacheKeysMjs = require("../cache/CacheKeys.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Base class for operating context
 * Operating contexts are contexts in which MSAL.js is being run
 * More than one operating context may be available at a time
 * It's important from a logging and telemetry point of view for us to be able to identify the operating context.
 * For example: Some operating contexts will pre-cache tokens impacting performance telemetry
 */ class BaseOperatingContext {
    static loggerCallback(level, message) {
        switch(level){
            case (0, _browser.LogLevel).Error:
                // eslint-disable-next-line no-console
                console.error(message);
                return;
            case (0, _browser.LogLevel).Info:
                // eslint-disable-next-line no-console
                console.info(message);
                return;
            case (0, _browser.LogLevel).Verbose:
                // eslint-disable-next-line no-console
                console.debug(message);
                return;
            case (0, _browser.LogLevel).Warning:
                // eslint-disable-next-line no-console
                console.warn(message);
                return;
            default:
                // eslint-disable-next-line no-console
                console.log(message);
                return;
        }
    }
    constructor(config){
        /*
         * If loaded in an environment where window is not available,
         * set internal flag to false so that further requests fail.
         * This is to support server-side rendering environments.
         */ this.browserEnvironment = typeof window !== "undefined";
        this.config = (0, _configurationMjs.buildConfiguration)(config, this.browserEnvironment);
        let sessionStorage;
        try {
            sessionStorage = window[(0, _browserConstantsMjs.BrowserCacheLocation).SessionStorage];
        // Mute errors if it's a non-browser environment or cookies are blocked.
        } catch (e) {}
        const logLevelKey = sessionStorage?.getItem((0, _cacheKeysMjs.LOG_LEVEL_CACHE_KEY));
        const piiLoggingKey = sessionStorage?.getItem((0, _cacheKeysMjs.LOG_PII_CACHE_KEY))?.toLowerCase();
        const piiLoggingEnabled = piiLoggingKey === "true" ? true : piiLoggingKey === "false" ? false : undefined;
        const loggerOptions = {
            ...this.config.system.loggerOptions
        };
        const logLevel = logLevelKey && Object.keys((0, _browser.LogLevel)).includes(logLevelKey) ? (0, _browser.LogLevel)[logLevelKey] : undefined;
        if (logLevel) {
            loggerOptions.loggerCallback = BaseOperatingContext.loggerCallback;
            loggerOptions.logLevel = logLevel;
        }
        if (piiLoggingEnabled !== undefined) loggerOptions.piiLoggingEnabled = piiLoggingEnabled;
        this.logger = new (0, _browser.Logger)(loggerOptions, (0, _packageMetadataMjs.name), (0, _packageMetadataMjs.version));
        this.available = false;
    }
    /**
     * Return the MSAL config
     * @returns BrowserConfiguration
     */ getConfig() {
        return this.config;
    }
    /**
     * Returns the MSAL Logger
     * @returns Logger
     */ getLogger() {
        return this.logger;
    }
    isAvailable() {
        return this.available;
    }
    isBrowserEnvironment() {
        return this.browserEnvironment;
    }
}

},{"@azure/msal-common/browser":"aaatw","../config/Configuration.mjs":"6o3nA","../packageMetadata.mjs":"5lj1t","../utils/BrowserConstants.mjs":"kJowt","../cache/CacheKeys.mjs":"aZQPA","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"6o3nA":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_IFRAME_TIMEOUT_MS", ()=>DEFAULT_IFRAME_TIMEOUT_MS);
parcelHelpers.export(exports, "DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS", ()=>DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS);
parcelHelpers.export(exports, "DEFAULT_POPUP_TIMEOUT_MS", ()=>DEFAULT_POPUP_TIMEOUT_MS);
parcelHelpers.export(exports, "DEFAULT_REDIRECT_TIMEOUT_MS", ()=>DEFAULT_REDIRECT_TIMEOUT_MS);
parcelHelpers.export(exports, "buildConfiguration", ()=>buildConfiguration);
var _browser = require("@azure/msal-common/browser");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _navigationClientMjs = require("../navigation/NavigationClient.mjs");
var _fetchClientMjs = require("../network/FetchClient.mjs");
var _browserUtilsMjs = require("../utils/BrowserUtils.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Default timeout for popup windows and iframes in milliseconds
const DEFAULT_POPUP_TIMEOUT_MS = 60000;
const DEFAULT_IFRAME_TIMEOUT_MS = 10000;
const DEFAULT_REDIRECT_TIMEOUT_MS = 30000;
const DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS = 2000;
/**
 * MSAL function that sets the default options when not explicitly configured from app developer
 *
 * @param auth
 * @param cache
 * @param system
 *
 * @returns Configuration object
 */ function buildConfiguration({ auth: userInputAuth, cache: userInputCache, system: userInputSystem, telemetry: userInputTelemetry }, isBrowserEnvironment) {
    // Default auth options for browser
    const DEFAULT_AUTH_OPTIONS = {
        clientId: (0, _browser.Constants).EMPTY_STRING,
        authority: `${(0, _browser.Constants).DEFAULT_AUTHORITY}`,
        knownAuthorities: [],
        cloudDiscoveryMetadata: (0, _browser.Constants).EMPTY_STRING,
        authorityMetadata: (0, _browser.Constants).EMPTY_STRING,
        redirectUri: typeof window !== "undefined" ? (0, _browserUtilsMjs.getCurrentUri)() : "",
        postLogoutRedirectUri: (0, _browser.Constants).EMPTY_STRING,
        navigateToLoginRequestUrl: true,
        clientCapabilities: [],
        protocolMode: (0, _browser.ProtocolMode).AAD,
        OIDCOptions: {
            serverResponseType: (0, _browser.ServerResponseType).FRAGMENT,
            defaultScopes: [
                (0, _browser.Constants).OPENID_SCOPE,
                (0, _browser.Constants).PROFILE_SCOPE,
                (0, _browser.Constants).OFFLINE_ACCESS_SCOPE
            ]
        },
        azureCloudOptions: {
            azureCloudInstance: (0, _browser.AzureCloudInstance).None,
            tenant: (0, _browser.Constants).EMPTY_STRING
        },
        skipAuthorityMetadataCache: false,
        supportsNestedAppAuth: false,
        instanceAware: false,
        encodeExtraQueryParams: false
    };
    // Default cache options for browser
    const DEFAULT_CACHE_OPTIONS = {
        cacheLocation: (0, _browserConstantsMjs.BrowserCacheLocation).SessionStorage,
        cacheRetentionDays: 5,
        temporaryCacheLocation: (0, _browserConstantsMjs.BrowserCacheLocation).SessionStorage,
        storeAuthStateInCookie: false,
        secureCookies: false,
        // Default cache migration to true if cache location is localStorage since entries are preserved across tabs/windows. Migration has little to no benefit in sessionStorage and memoryStorage
        cacheMigrationEnabled: userInputCache && userInputCache.cacheLocation === (0, _browserConstantsMjs.BrowserCacheLocation).LocalStorage ? true : false,
        claimsBasedCachingEnabled: false
    };
    // Default logger options for browser
    const DEFAULT_LOGGER_OPTIONS = {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        loggerCallback: ()=>{
        // allow users to not set logger call back
        },
        logLevel: (0, _browser.LogLevel).Info,
        piiLoggingEnabled: false
    };
    // Default system options for browser
    const DEFAULT_BROWSER_SYSTEM_OPTIONS = {
        ...(0, _browser.DEFAULT_SYSTEM_OPTIONS),
        loggerOptions: DEFAULT_LOGGER_OPTIONS,
        networkClient: isBrowserEnvironment ? new (0, _fetchClientMjs.FetchClient)() : (0, _browser.StubbedNetworkModule),
        navigationClient: new (0, _navigationClientMjs.NavigationClient)(),
        loadFrameTimeout: 0,
        // If loadFrameTimeout is provided, use that as default.
        windowHashTimeout: userInputSystem?.loadFrameTimeout || DEFAULT_POPUP_TIMEOUT_MS,
        iframeHashTimeout: userInputSystem?.loadFrameTimeout || DEFAULT_IFRAME_TIMEOUT_MS,
        navigateFrameWait: 0,
        redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS,
        asyncPopups: false,
        allowRedirectInIframe: false,
        allowPlatformBroker: false,
        nativeBrokerHandshakeTimeout: userInputSystem?.nativeBrokerHandshakeTimeout || DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS,
        pollIntervalMilliseconds: (0, _browserConstantsMjs.BrowserConstants).DEFAULT_POLL_INTERVAL_MS
    };
    const providedSystemOptions = {
        ...DEFAULT_BROWSER_SYSTEM_OPTIONS,
        ...userInputSystem,
        loggerOptions: userInputSystem?.loggerOptions || DEFAULT_LOGGER_OPTIONS
    };
    const DEFAULT_TELEMETRY_OPTIONS = {
        application: {
            appName: (0, _browser.Constants).EMPTY_STRING,
            appVersion: (0, _browser.Constants).EMPTY_STRING
        },
        client: new (0, _browser.StubPerformanceClient)()
    };
    // Throw an error if user has set OIDCOptions without being in OIDC protocol mode
    if (userInputAuth?.protocolMode !== (0, _browser.ProtocolMode).OIDC && userInputAuth?.OIDCOptions) {
        const logger = new (0, _browser.Logger)(providedSystemOptions.loggerOptions);
        logger.warning(JSON.stringify((0, _browser.createClientConfigurationError)((0, _browser.ClientConfigurationErrorCodes).cannotSetOIDCOptions)));
    }
    // Throw an error if user has set allowPlatformBroker to true with OIDC protocol mode
    if (userInputAuth?.protocolMode && userInputAuth.protocolMode === (0, _browser.ProtocolMode).OIDC && providedSystemOptions?.allowPlatformBroker) throw (0, _browser.createClientConfigurationError)((0, _browser.ClientConfigurationErrorCodes).cannotAllowPlatformBroker);
    const overlayedConfig = {
        auth: {
            ...DEFAULT_AUTH_OPTIONS,
            ...userInputAuth,
            OIDCOptions: {
                ...DEFAULT_AUTH_OPTIONS.OIDCOptions,
                ...userInputAuth?.OIDCOptions
            }
        },
        cache: {
            ...DEFAULT_CACHE_OPTIONS,
            ...userInputCache
        },
        system: providedSystemOptions,
        telemetry: {
            ...DEFAULT_TELEMETRY_OPTIONS,
            ...userInputTelemetry
        }
    };
    return overlayedConfig;
}

},{"@azure/msal-common/browser":"aaatw","../utils/BrowserConstants.mjs":"kJowt","../navigation/NavigationClient.mjs":"3q4eH","../network/FetchClient.mjs":"jKBlM","../utils/BrowserUtils.mjs":"77mxR","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"3q4eH":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NavigationClient", ()=>NavigationClient);
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class NavigationClient {
    /**
     * Navigates to other pages within the same web application
     * @param url
     * @param options
     */ navigateInternal(url, options) {
        return NavigationClient.defaultNavigateWindow(url, options);
    }
    /**
     * Navigates to other pages outside the web application i.e. the Identity Provider
     * @param url
     * @param options
     */ navigateExternal(url, options) {
        return NavigationClient.defaultNavigateWindow(url, options);
    }
    /**
     * Default navigation implementation invoked by the internal and external functions
     * @param url
     * @param options
     */ static defaultNavigateWindow(url, options) {
        if (options.noHistory) window.location.replace(url); // CodeQL [SM03712] Application owner controls the URL. User can't change it.
        else window.location.assign(url); // CodeQL [SM03712] Application owner controls the URL. User can't change it.
        return new Promise((resolve, reject)=>{
            setTimeout(()=>{
                reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.timedOut), "failed_to_redirect"));
            }, options.timeout);
        });
    }
}

},{"../error/BrowserAuthError.mjs":"dg1Z3","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jKBlM":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FetchClient", ()=>FetchClient);
var _browser = require("@azure/msal-common/browser");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 */ class FetchClient {
    /**
     * Fetch Client for REST endpoints - Get request
     * @param url
     * @param headers
     * @param body
     */ async sendGetRequestAsync(url, options) {
        let response;
        let responseHeaders = {};
        let responseStatus = 0;
        const reqHeaders = getFetchHeaders(options);
        try {
            response = await fetch(url, {
                method: (0, _browserConstantsMjs.HTTP_REQUEST_TYPE).GET,
                headers: reqHeaders
            });
        } catch (e) {
            throw (0, _browser.createNetworkError)((0, _browserAuthErrorMjs.createBrowserAuthError)(window.navigator.onLine ? (0, _browserAuthErrorCodesMjs.getRequestFailed) : (0, _browserAuthErrorCodesMjs.noNetworkConnectivity)), undefined, undefined, e);
        }
        responseHeaders = getHeaderDict(response.headers);
        try {
            responseStatus = response.status;
            return {
                headers: responseHeaders,
                body: await response.json(),
                status: responseStatus
            };
        } catch (e) {
            throw (0, _browser.createNetworkError)((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.failedToParseResponse)), responseStatus, responseHeaders, e);
        }
    }
    /**
     * Fetch Client for REST endpoints - Post request
     * @param url
     * @param headers
     * @param body
     */ async sendPostRequestAsync(url, options) {
        const reqBody = options && options.body || "";
        const reqHeaders = getFetchHeaders(options);
        let response;
        let responseStatus = 0;
        let responseHeaders = {};
        try {
            response = await fetch(url, {
                method: (0, _browserConstantsMjs.HTTP_REQUEST_TYPE).POST,
                headers: reqHeaders,
                body: reqBody
            });
        } catch (e) {
            throw (0, _browser.createNetworkError)((0, _browserAuthErrorMjs.createBrowserAuthError)(window.navigator.onLine ? (0, _browserAuthErrorCodesMjs.postRequestFailed) : (0, _browserAuthErrorCodesMjs.noNetworkConnectivity)), undefined, undefined, e);
        }
        responseHeaders = getHeaderDict(response.headers);
        try {
            responseStatus = response.status;
            return {
                headers: responseHeaders,
                body: await response.json(),
                status: responseStatus
            };
        } catch (e) {
            throw (0, _browser.createNetworkError)((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.failedToParseResponse)), responseStatus, responseHeaders, e);
        }
    }
}
/**
 * Get Fetch API Headers object from string map
 * @param inputHeaders
 */ function getFetchHeaders(options) {
    try {
        const headers = new Headers();
        if (!(options && options.headers)) return headers;
        const optionsHeaders = options.headers;
        Object.entries(optionsHeaders).forEach(([key, value])=>{
            headers.append(key, value);
        });
        return headers;
    } catch (e) {
        throw (0, _browser.createNetworkError)((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.failedToBuildHeaders)), undefined, undefined, e);
    }
}
/**
 * Returns object representing response headers
 * @param headers
 * @returns
 */ function getHeaderDict(headers) {
    try {
        const headerDict = {};
        headers.forEach((value, key)=>{
            headerDict[key] = value;
        });
        return headerDict;
    } catch (e) {
        throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.failedToParseHeaders));
    }
}

},{"@azure/msal-common/browser":"aaatw","../error/BrowserAuthError.mjs":"dg1Z3","../utils/BrowserConstants.mjs":"kJowt","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"5lj1t":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "name", ()=>name);
parcelHelpers.export(exports, "version", ()=>version);
'use strict';
/* eslint-disable header/header */ const name = "@azure/msal-browser";
const version = "4.26.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"aZQPA":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ACCOUNT_KEYS", ()=>ACCOUNT_KEYS);
parcelHelpers.export(exports, "ACCOUNT_SCHEMA_VERSION", ()=>ACCOUNT_SCHEMA_VERSION);
parcelHelpers.export(exports, "BROWSER_PERF_ENABLED_KEY", ()=>BROWSER_PERF_ENABLED_KEY);
parcelHelpers.export(exports, "CACHE_KEY_SEPARATOR", ()=>CACHE_KEY_SEPARATOR);
parcelHelpers.export(exports, "CREDENTIAL_SCHEMA_VERSION", ()=>CREDENTIAL_SCHEMA_VERSION);
parcelHelpers.export(exports, "LOG_LEVEL_CACHE_KEY", ()=>LOG_LEVEL_CACHE_KEY);
parcelHelpers.export(exports, "LOG_PII_CACHE_KEY", ()=>LOG_PII_CACHE_KEY);
parcelHelpers.export(exports, "PLATFORM_AUTH_DOM_SUPPORT", ()=>PLATFORM_AUTH_DOM_SUPPORT);
parcelHelpers.export(exports, "PREFIX", ()=>PREFIX);
parcelHelpers.export(exports, "TOKEN_KEYS", ()=>TOKEN_KEYS);
parcelHelpers.export(exports, "VERSION_CACHE_KEY", ()=>VERSION_CACHE_KEY);
parcelHelpers.export(exports, "getAccountKeysCacheKey", ()=>getAccountKeysCacheKey);
parcelHelpers.export(exports, "getTokenKeysCacheKey", ()=>getTokenKeysCacheKey);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const PREFIX = "msal";
const BROWSER_PREFIX = "browser";
const CACHE_KEY_SEPARATOR = "|";
const CREDENTIAL_SCHEMA_VERSION = 2;
const ACCOUNT_SCHEMA_VERSION = 2;
const LOG_LEVEL_CACHE_KEY = `${PREFIX}.${BROWSER_PREFIX}.log.level`;
const LOG_PII_CACHE_KEY = `${PREFIX}.${BROWSER_PREFIX}.log.pii`;
const BROWSER_PERF_ENABLED_KEY = `${PREFIX}.${BROWSER_PREFIX}.performance.enabled`;
const PLATFORM_AUTH_DOM_SUPPORT = `${PREFIX}.${BROWSER_PREFIX}.platform.auth.dom`;
const VERSION_CACHE_KEY = `${PREFIX}.version`;
const ACCOUNT_KEYS = "account.keys";
const TOKEN_KEYS = "token.keys";
function getAccountKeysCacheKey(schema = ACCOUNT_SCHEMA_VERSION) {
    if (schema < 1) return `${PREFIX}.${ACCOUNT_KEYS}`;
    return `${PREFIX}.${schema}.${ACCOUNT_KEYS}`;
}
function getTokenKeysCacheKey(clientId, schema = CREDENTIAL_SCHEMA_VERSION) {
    if (schema < 1) return `${PREFIX}.${TOKEN_KEYS}.${clientId}`;
    return `${PREFIX}.${schema}.${TOKEN_KEYS}.${clientId}`;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"8echq":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BridgeProxy", ()=>BridgeProxy);
parcelHelpers.export(exports, "default", ()=>BridgeProxy);
var _bridgeStatusCodeMjs = require("./BridgeStatusCode.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _packageMetadataMjs = require("../packageMetadata.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * BridgeProxy
 * Provides a proxy for accessing a bridge to a host app and/or
 * platform broker
 */ class BridgeProxy {
    /**
     * initializeNestedAppAuthBridge - Initializes the bridge to the host app
     * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error
     * @remarks This method will be called by the create factory method
     * @remarks If the bridge is not available, this method will throw an error
     */ static async initializeNestedAppAuthBridge() {
        if (window === undefined) throw new Error("window is undefined");
        if (window.nestedAppAuthBridge === undefined) throw new Error("window.nestedAppAuthBridge is undefined");
        try {
            window.nestedAppAuthBridge.addEventListener("message", (response)=>{
                const responsePayload = typeof response === "string" ? response : response.data;
                const responseEnvelope = JSON.parse(responsePayload);
                const request = BridgeProxy.bridgeRequests.find((element)=>element.requestId === responseEnvelope.requestId);
                if (request !== undefined) {
                    BridgeProxy.bridgeRequests.splice(BridgeProxy.bridgeRequests.indexOf(request), 1);
                    if (responseEnvelope.success) request.resolve(responseEnvelope);
                    else request.reject(responseEnvelope.error);
                }
            });
            const bridgeResponse = await new Promise((resolve, reject)=>{
                const message = BridgeProxy.buildRequest("GetInitContext");
                const request = {
                    requestId: message.requestId,
                    method: message.method,
                    resolve: resolve,
                    reject: reject
                };
                BridgeProxy.bridgeRequests.push(request);
                window.nestedAppAuthBridge.postMessage(JSON.stringify(message));
            });
            return BridgeProxy.validateBridgeResultOrThrow(bridgeResponse.initContext);
        } catch (error) {
            window.console.log(error);
            throw error;
        }
    }
    /**
     * getTokenInteractive - Attempts to get a token interactively from the bridge
     * @param request A token request
     * @returns a promise that resolves to an auth result or rejects with a BridgeError
     */ getTokenInteractive(request) {
        return this.getToken("GetTokenPopup", request);
    }
    /**
     * getTokenSilent Attempts to get a token silently from the bridge
     * @param request A token request
     * @returns a promise that resolves to an auth result or rejects with a BridgeError
     */ getTokenSilent(request) {
        return this.getToken("GetToken", request);
    }
    async getToken(requestType, request) {
        const result = await this.sendRequest(requestType, {
            tokenParams: request
        });
        return {
            token: BridgeProxy.validateBridgeResultOrThrow(result.token),
            account: BridgeProxy.validateBridgeResultOrThrow(result.account)
        };
    }
    getHostCapabilities() {
        return this.capabilities ?? null;
    }
    getAccountContext() {
        return this.accountContext ? this.accountContext : null;
    }
    static buildRequest(method, requestParams) {
        return {
            messageType: "NestedAppAuthRequest",
            method: method,
            requestId: (0, _browserCryptoMjs.createNewGuid)(),
            sendTime: Date.now(),
            clientLibrary: (0, _browserConstantsMjs.BrowserConstants).MSAL_SKU,
            clientLibraryVersion: (0, _packageMetadataMjs.version),
            ...requestParams
        };
    }
    /**
     * A method used to send a request to the bridge
     * @param request A token request
     * @returns a promise that resolves to a response of provided type or rejects with a BridgeError
     */ sendRequest(method, requestParams) {
        const message = BridgeProxy.buildRequest(method, requestParams);
        const promise = new Promise((resolve, reject)=>{
            const request = {
                requestId: message.requestId,
                method: message.method,
                resolve: resolve,
                reject: reject
            };
            BridgeProxy.bridgeRequests.push(request);
            window.nestedAppAuthBridge.postMessage(JSON.stringify(message));
        });
        return promise;
    }
    static validateBridgeResultOrThrow(input) {
        if (input === undefined) {
            const bridgeError = {
                status: (0, _bridgeStatusCodeMjs.BridgeStatusCode).NestedAppAuthUnavailable
            };
            throw bridgeError;
        }
        return input;
    }
    /**
     * Private constructor for BridgeProxy
     * @param sdkName The name of the SDK being used to make requests on behalf of the app
     * @param sdkVersion The version of the SDK being used to make requests on behalf of the app
     * @param capabilities The capabilities of the bridge / SDK / platform broker
     */ constructor(sdkName, sdkVersion, accountContext, capabilities){
        this.sdkName = sdkName;
        this.sdkVersion = sdkVersion;
        this.accountContext = accountContext;
        this.capabilities = capabilities;
    }
    /**
     * Factory method for creating an implementation of IBridgeProxy
     * @returns A promise that resolves to a BridgeProxy implementation
     */ static async create() {
        const response = await BridgeProxy.initializeNestedAppAuthBridge();
        return new BridgeProxy(response.sdkName, response.sdkVersion, response.accountContext, response.capabilities);
    }
}
BridgeProxy.bridgeRequests = [];

},{"./BridgeStatusCode.mjs":"dgYdV","../crypto/BrowserCrypto.mjs":"8sZR9","../utils/BrowserConstants.mjs":"kJowt","../packageMetadata.mjs":"5lj1t","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"dgYdV":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BridgeStatusCode", ()=>BridgeStatusCode);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const BridgeStatusCode = {
    UserInteractionRequired: "USER_INTERACTION_REQUIRED",
    UserCancel: "USER_CANCEL",
    NoNetwork: "NO_NETWORK",
    TransientError: "TRANSIENT_ERROR",
    PersistentError: "PERSISTENT_ERROR",
    Disabled: "DISABLED",
    AccountUnavailable: "ACCOUNT_UNAVAILABLE",
    NestedAppAuthUnavailable: "NESTED_APP_AUTH_UNAVAILABLE"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"dAJ0k":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandardOperatingContext", ()=>StandardOperatingContext);
var _baseOperatingContextMjs = require("./BaseOperatingContext.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class StandardOperatingContext extends (0, _baseOperatingContextMjs.BaseOperatingContext) {
    /**
     * Return the module name.  Intended for use with import() to enable dynamic import
     * of the implementation associated with this operating context
     * @returns
     */ getModuleName() {
        return StandardOperatingContext.MODULE_NAME;
    }
    /**
     * Returns the unique identifier for this operating context
     * @returns string
     */ getId() {
        return StandardOperatingContext.ID;
    }
    /**
     * Checks whether the operating context is available.
     * Confirms that the code is running a browser rather.  This is required.
     * @returns Promise<boolean> indicating whether this operating context is currently available.
     */ async initialize() {
        this.available = typeof window !== "undefined";
        return this.available;
    /*
         * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser
         * We can move the current contents of the initialize method to here and verify that the WAM extension is available
         */ }
}
/*
 * TODO: Once we have determine the bundling code return here to specify the name of the bundle
 * containing the implementation for this operating context
 */ StandardOperatingContext.MODULE_NAME = "";
/**
 * Unique identifier for the operating context
 */ StandardOperatingContext.ID = "StandardOperatingContext";

},{"./BaseOperatingContext.mjs":"jnGwm","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"eVk4J":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandardController", ()=>StandardController);
var _cryptoOpsMjs = require("../crypto/CryptoOps.mjs");
var _browser = require("@azure/msal-common/browser");
var _browserCacheManagerMjs = require("../cache/BrowserCacheManager.mjs");
var _accountManagerMjs = require("../cache/AccountManager.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _browserUtilsMjs = require("../utils/BrowserUtils.mjs");
var _eventTypeMjs = require("../event/EventType.mjs");
var _eventHandlerMjs = require("../event/EventHandler.mjs");
var _popupClientMjs = require("../interaction_client/PopupClient.mjs");
var _redirectClientMjs = require("../interaction_client/RedirectClient.mjs");
var _silentIframeClientMjs = require("../interaction_client/SilentIframeClient.mjs");
var _silentRefreshClientMjs = require("../interaction_client/SilentRefreshClient.mjs");
var _tokenCacheMjs = require("../cache/TokenCache.mjs");
var _platformAuthInteractionClientMjs = require("../interaction_client/PlatformAuthInteractionClient.mjs");
var _nativeAuthErrorMjs = require("../error/NativeAuthError.mjs");
var _silentCacheClientMjs = require("../interaction_client/SilentCacheClient.mjs");
var _silentAuthCodeClientMjs = require("../interaction_client/SilentAuthCodeClient.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
var _requestHelpersMjs = require("../request/RequestHelpers.mjs");
var _pkceGeneratorMjs = require("../crypto/PkceGenerator.mjs");
var _platformAuthProviderMjs = require("../broker/nativeBroker/PlatformAuthProvider.mjs");
var _msalFrameStatsUtilsMjs = require("../utils/MsalFrameStatsUtils.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function preflightCheck(initialized, performanceEvent, account) {
    try {
        (0, _browserUtilsMjs.preflightCheck)(initialized);
    } catch (e) {
        performanceEvent.end({
            success: false
        }, e, account);
        throw e;
    }
}
class StandardController {
    /**
     * @constructor
     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
     *
     * Important attributes in the Configuration object for auth are:
     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
     * - authority: the authority URL for your application.
     * - redirect_uri: the uri of your application registered in the portal.
     *
     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
     *
     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
     * Full B2C functionality will be available in this library in future versions.
     *
     * @param configuration Object for the MSAL PublicClientApplication instance
     */ constructor(operatingContext){
        this.operatingContext = operatingContext;
        this.isBrowserEnvironment = this.operatingContext.isBrowserEnvironment();
        // Set the configuration.
        this.config = operatingContext.getConfig();
        this.initialized = false;
        // Initialize logger
        this.logger = this.operatingContext.getLogger();
        // Initialize the network module class.
        this.networkClient = this.config.system.networkClient;
        // Initialize the navigation client class.
        this.navigationClient = this.config.system.navigationClient;
        // Initialize redirectResponse Map
        this.redirectResponse = new Map();
        // Initial hybrid spa map
        this.hybridAuthCodeResponses = new Map();
        // Initialize performance client
        this.performanceClient = this.config.telemetry.client;
        // Initialize the crypto class.
        this.browserCrypto = this.isBrowserEnvironment ? new (0, _cryptoOpsMjs.CryptoOps)(this.logger, this.performanceClient) : (0, _browser.DEFAULT_CRYPTO_IMPLEMENTATION);
        this.eventHandler = new (0, _eventHandlerMjs.EventHandler)(this.logger);
        // Initialize the browser storage class.
        this.browserStorage = this.isBrowserEnvironment ? new (0, _browserCacheManagerMjs.BrowserCacheManager)(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger, this.performanceClient, this.eventHandler, (0, _browser.buildStaticAuthorityOptions)(this.config.auth)) : (0, _browserCacheManagerMjs.DEFAULT_BROWSER_CACHE_MANAGER)(this.config.auth.clientId, this.logger, this.performanceClient, this.eventHandler);
        // initialize in memory storage for native flows
        const nativeCacheOptions = {
            cacheLocation: (0, _browserConstantsMjs.BrowserCacheLocation).MemoryStorage,
            cacheRetentionDays: 5,
            temporaryCacheLocation: (0, _browserConstantsMjs.BrowserCacheLocation).MemoryStorage,
            storeAuthStateInCookie: false,
            secureCookies: false,
            cacheMigrationEnabled: false,
            claimsBasedCachingEnabled: false
        };
        this.nativeInternalStorage = new (0, _browserCacheManagerMjs.BrowserCacheManager)(this.config.auth.clientId, nativeCacheOptions, this.browserCrypto, this.logger, this.performanceClient, this.eventHandler);
        // Initialize the token cache
        this.tokenCache = new (0, _tokenCacheMjs.TokenCache)(this.config, this.browserStorage, this.logger, this.browserCrypto);
        this.activeSilentTokenRequests = new Map();
        // Register listener functions
        this.trackPageVisibility = this.trackPageVisibility.bind(this);
        // Register listener functions
        this.trackPageVisibilityWithMeasurement = this.trackPageVisibilityWithMeasurement.bind(this);
    }
    static async createController(operatingContext, request) {
        const controller = new StandardController(operatingContext);
        await controller.initialize(request);
        return controller;
    }
    trackPageVisibility(correlationId) {
        if (!correlationId) return;
        this.logger.info("Perf: Visibility change detected");
        this.performanceClient.incrementFields({
            visibilityChangeCount: 1
        }, correlationId);
    }
    /**
     * Initializer function to perform async startup tasks such as connecting to WAM extension
     * @param request {?InitializeApplicationRequest} correlation id
     */ async initialize(request, isBroker) {
        this.logger.trace("initialize called");
        if (this.initialized) {
            this.logger.info("initialize has already been called, exiting early.");
            return;
        }
        if (!this.isBrowserEnvironment) {
            this.logger.info("in non-browser environment, exiting early.");
            this.initialized = true;
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).INITIALIZE_END);
            return;
        }
        const initCorrelationId = request?.correlationId || this.getRequestCorrelationId();
        const allowPlatformBroker = this.config.system.allowPlatformBroker;
        const initMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).InitializeClientApplication, initCorrelationId);
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).INITIALIZE_START);
        // Broker applications are initialized twice, so we avoid double-counting it
        if (!isBroker) try {
            this.logMultipleInstances(initMeasurement);
        } catch  {}
        await (0, _browser.invokeAsync)(this.browserStorage.initialize.bind(this.browserStorage), (0, _browser.PerformanceEvents).InitializeCache, this.logger, this.performanceClient, initCorrelationId)(initCorrelationId);
        if (allowPlatformBroker) try {
            // check if platform authentication is available via DOM or browser extension and create relevant handlers
            this.platformAuthProvider = await (0, _platformAuthProviderMjs.getPlatformAuthProvider)(this.logger, this.performanceClient, initCorrelationId, this.config.system.nativeBrokerHandshakeTimeout);
        } catch (e) {
            this.logger.verbose(e);
        }
        if (!this.config.cache.claimsBasedCachingEnabled) {
            this.logger.verbose("Claims-based caching is disabled. Clearing the previous cache with claims");
            (0, _browser.invoke)(this.browserStorage.clearTokensAndKeysWithClaims.bind(this.browserStorage), (0, _browser.PerformanceEvents).ClearTokensAndKeysWithClaims, this.logger, this.performanceClient, initCorrelationId)(initCorrelationId);
        }
        this.config.system.asyncPopups && await this.preGeneratePkceCodes(initCorrelationId);
        this.initialized = true;
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).INITIALIZE_END);
        initMeasurement.end({
            allowPlatformBroker: allowPlatformBroker,
            success: true
        });
    }
    // #region Redirect Flow
    /**
     * Event handler function which allows users to fire events after the PublicClientApplication object
     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
     * auth flows.
     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
     * @returns Token response or null. If the return value is null, then no auth redirect was detected.
     */ async handleRedirectPromise(hash) {
        this.logger.verbose("handleRedirectPromise called");
        // Block token acquisition before initialize has been called
        (0, _browserUtilsMjs.blockAPICallsBeforeInitialize)(this.initialized);
        if (this.isBrowserEnvironment) {
            /**
             * Store the promise on the PublicClientApplication instance if this is the first invocation of handleRedirectPromise,
             * otherwise return the promise from the first invocation. Prevents race conditions when handleRedirectPromise is called
             * several times concurrently.
             */ const redirectResponseKey = hash || "";
            let response = this.redirectResponse.get(redirectResponseKey);
            if (typeof response === "undefined") {
                response = this.handleRedirectPromiseInternal(hash);
                this.redirectResponse.set(redirectResponseKey, response);
                this.logger.verbose("handleRedirectPromise has been called for the first time, storing the promise");
            } else this.logger.verbose("handleRedirectPromise has been called previously, returning the result from the first call");
            return response;
        }
        this.logger.verbose("handleRedirectPromise returns null, not browser environment");
        return null;
    }
    /**
     * The internal details of handleRedirectPromise. This is separated out to a helper to allow handleRedirectPromise to memoize requests
     * @param hash
     * @returns
     */ async handleRedirectPromiseInternal(hash) {
        if (!this.browserStorage.isInteractionInProgress(true)) {
            this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null.");
            return null;
        }
        const interactionType = this.browserStorage.getInteractionInProgress()?.type;
        if (interactionType === (0, _browserConstantsMjs.INTERACTION_TYPE).SIGNOUT) {
            this.logger.verbose("handleRedirectPromise removing interaction_in_progress flag and returning null after sign-out");
            this.browserStorage.setInteractionInProgress(false);
            return Promise.resolve(null);
        }
        const loggedInAccounts = this.getAllAccounts();
        const platformBrokerRequest = this.browserStorage.getCachedNativeRequest();
        const useNative = platformBrokerRequest && this.platformAuthProvider && !hash;
        let rootMeasurement;
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).HANDLE_REDIRECT_START, (0, _browserConstantsMjs.InteractionType).Redirect);
        let redirectResponse;
        try {
            if (useNative && this.platformAuthProvider) {
                rootMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AcquireTokenRedirect, platformBrokerRequest?.correlationId || "");
                this.logger.trace("handleRedirectPromise - acquiring token from native platform");
                rootMeasurement.add({
                    isPlatformBrokerRequest: true
                });
                const nativeClient = new (0, _platformAuthInteractionClientMjs.PlatformAuthInteractionClient)(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, (0, _browserConstantsMjs.ApiId).handleRedirectPromise, this.performanceClient, this.platformAuthProvider, platformBrokerRequest.accountId, this.nativeInternalStorage, platformBrokerRequest.correlationId);
                redirectResponse = (0, _browser.invokeAsync)(nativeClient.handleRedirectPromise.bind(nativeClient), (0, _browser.PerformanceEvents).HandleNativeRedirectPromiseMeasurement, this.logger, this.performanceClient, rootMeasurement.event.correlationId)(this.performanceClient, rootMeasurement.event.correlationId);
            } else {
                const [standardRequest, codeVerifier] = this.browserStorage.getCachedRequest();
                const correlationId = standardRequest.correlationId;
                // Reset rootMeasurement now that we have correlationId
                rootMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AcquireTokenRedirect, correlationId);
                this.logger.trace("handleRedirectPromise - acquiring token from web flow");
                const redirectClient = this.createRedirectClient(correlationId);
                redirectResponse = (0, _browser.invokeAsync)(redirectClient.handleRedirectPromise.bind(redirectClient), (0, _browser.PerformanceEvents).HandleRedirectPromiseMeasurement, this.logger, this.performanceClient, rootMeasurement.event.correlationId)(hash, standardRequest, codeVerifier, rootMeasurement);
            }
        } catch (e) {
            this.browserStorage.resetRequestCache();
            throw e;
        }
        return redirectResponse.then((result)=>{
            if (result) {
                this.browserStorage.resetRequestCache();
                // Emit login event if number of accounts change
                const isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;
                if (isLoggingIn) {
                    this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGIN_SUCCESS, (0, _browserConstantsMjs.InteractionType).Redirect, result);
                    this.logger.verbose("handleRedirectResponse returned result, login success");
                } else {
                    this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_SUCCESS, (0, _browserConstantsMjs.InteractionType).Redirect, result);
                    this.logger.verbose("handleRedirectResponse returned result, acquire token success");
                }
                rootMeasurement.end({
                    success: true
                }, undefined, result.account);
            } else /*
                 * Instrument an event only if an error code is set. Otherwise, discard it when the redirect response
                 * is empty and the error code is missing.
                 */ if (rootMeasurement.event.errorCode) rootMeasurement.end({
                success: false
            }, undefined);
            else rootMeasurement.discard();
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).HANDLE_REDIRECT_END, (0, _browserConstantsMjs.InteractionType).Redirect);
            return result;
        }).catch((e)=>{
            this.browserStorage.resetRequestCache();
            const eventError = e;
            // Emit login event if there is an account
            if (loggedInAccounts.length > 0) this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_FAILURE, (0, _browserConstantsMjs.InteractionType).Redirect, null, eventError);
            else this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGIN_FAILURE, (0, _browserConstantsMjs.InteractionType).Redirect, null, eventError);
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).HANDLE_REDIRECT_END, (0, _browserConstantsMjs.InteractionType).Redirect);
            rootMeasurement.end({
                success: false
            }, eventError);
            throw e;
        });
    }
    /**
     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects
     * the page, so any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */ async acquireTokenRedirect(request) {
        // Preflight request
        const correlationId = this.getRequestCorrelationId(request);
        this.logger.verbose("acquireTokenRedirect called", correlationId);
        const atrMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AcquireTokenPreRedirect, correlationId);
        atrMeasurement.add({
            scenarioId: request.scenarioId
        });
        // Override on request only if set, as onRedirectNavigate field is deprecated
        const onRedirectNavigateCb = request.onRedirectNavigate;
        if (onRedirectNavigateCb) request.onRedirectNavigate = (url)=>{
            const navigate = typeof onRedirectNavigateCb === "function" ? onRedirectNavigateCb(url) : undefined;
            atrMeasurement.add({
                navigateCallbackResult: navigate !== false
            });
            atrMeasurement.event = atrMeasurement.end({
                success: true
            }, undefined, request.account) || atrMeasurement.event;
            return navigate;
        };
        else {
            const configOnRedirectNavigateCb = this.config.auth.onRedirectNavigate;
            this.config.auth.onRedirectNavigate = (url)=>{
                const navigate = typeof configOnRedirectNavigateCb === "function" ? configOnRedirectNavigateCb(url) : undefined;
                atrMeasurement.add({
                    navigateCallbackResult: navigate !== false
                });
                atrMeasurement.event = atrMeasurement.end({
                    success: true
                }, undefined, request.account) || atrMeasurement.event;
                return navigate;
            };
        }
        // If logged in, emit acquire token events
        const isLoggedIn = this.getAllAccounts().length > 0;
        try {
            (0, _browserUtilsMjs.redirectPreflightCheck)(this.initialized, this.config);
            this.browserStorage.setInteractionInProgress(true, (0, _browserConstantsMjs.INTERACTION_TYPE).SIGNIN);
            if (isLoggedIn) this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_START, (0, _browserConstantsMjs.InteractionType).Redirect, request);
            else this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGIN_START, (0, _browserConstantsMjs.InteractionType).Redirect, request);
            let result;
            if (this.platformAuthProvider && this.canUsePlatformBroker(request)) {
                const nativeClient = new (0, _platformAuthInteractionClientMjs.PlatformAuthInteractionClient)(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, (0, _browserConstantsMjs.ApiId).acquireTokenRedirect, this.performanceClient, this.platformAuthProvider, this.getNativeAccountId(request), this.nativeInternalStorage, correlationId);
                result = nativeClient.acquireTokenRedirect(request, atrMeasurement).catch((e)=>{
                    atrMeasurement.add({
                        brokerErrorName: e.name,
                        brokerErrorCode: e.errorCode
                    });
                    if (e instanceof (0, _nativeAuthErrorMjs.NativeAuthError) && (0, _nativeAuthErrorMjs.isFatalNativeAuthError)(e)) {
                        this.platformAuthProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt platform broker calls
                        const redirectClient = this.createRedirectClient(correlationId);
                        return redirectClient.acquireToken(request);
                    } else if (e instanceof (0, _browser.InteractionRequiredAuthError)) {
                        this.logger.verbose("acquireTokenRedirect - Resolving interaction required error thrown by native broker by falling back to web flow");
                        const redirectClient = this.createRedirectClient(correlationId);
                        return redirectClient.acquireToken(request);
                    }
                    throw e;
                });
            } else {
                const redirectClient = this.createRedirectClient(correlationId);
                result = redirectClient.acquireToken(request);
            }
            return await result;
        } catch (e) {
            this.browserStorage.resetRequestCache();
            /*
             * Pre-redirect event completes before navigation occurs.
             * Timed out navigation needs to be instrumented separately as a post-redirect event.
             */ if (atrMeasurement.event.status === 2) this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AcquireTokenRedirect, correlationId).end({
                success: false
            }, e, request.account);
            else atrMeasurement.end({
                success: false
            }, e, request.account);
            if (isLoggedIn) this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_FAILURE, (0, _browserConstantsMjs.InteractionType).Redirect, null, e);
            else this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGIN_FAILURE, (0, _browserConstantsMjs.InteractionType).Redirect, null, e);
            throw e;
        }
    }
    // #endregion
    // #region Popup Flow
    /**
     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ acquireTokenPopup(request) {
        const correlationId = this.getRequestCorrelationId(request);
        const atPopupMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AcquireTokenPopup, correlationId);
        atPopupMeasurement.add({
            scenarioId: request.scenarioId
        });
        try {
            this.logger.verbose("acquireTokenPopup called", correlationId);
            preflightCheck(this.initialized, atPopupMeasurement, request.account);
            this.browserStorage.setInteractionInProgress(true, (0, _browserConstantsMjs.INTERACTION_TYPE).SIGNIN);
        } catch (e) {
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        }
        // If logged in, emit acquire token events
        const loggedInAccounts = this.getAllAccounts();
        if (loggedInAccounts.length > 0) this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_START, (0, _browserConstantsMjs.InteractionType).Popup, request);
        else this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGIN_START, (0, _browserConstantsMjs.InteractionType).Popup, request);
        let result;
        const pkce = this.getPreGeneratedPkceCodes(correlationId);
        if (this.canUsePlatformBroker(request)) {
            atPopupMeasurement.add({
                isPlatformBrokerRequest: true
            });
            result = this.acquireTokenNative({
                ...request,
                correlationId
            }, (0, _browserConstantsMjs.ApiId).acquireTokenPopup).then((response)=>{
                atPopupMeasurement.end({
                    success: true
                }, undefined, response.account);
                return response;
            }).catch((e)=>{
                atPopupMeasurement.add({
                    brokerErrorName: e.name,
                    brokerErrorCode: e.errorCode
                });
                if (e instanceof (0, _nativeAuthErrorMjs.NativeAuthError) && (0, _nativeAuthErrorMjs.isFatalNativeAuthError)(e)) {
                    this.platformAuthProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to continuing to attempt platform broker calls
                    const popupClient = this.createPopupClient(correlationId);
                    return popupClient.acquireToken(request, pkce);
                } else if (e instanceof (0, _browser.InteractionRequiredAuthError)) {
                    this.logger.verbose("acquireTokenPopup - Resolving interaction required error thrown by native broker by falling back to web flow");
                    const popupClient = this.createPopupClient(correlationId);
                    return popupClient.acquireToken(request, pkce);
                }
                throw e;
            });
        } else {
            const popupClient = this.createPopupClient(correlationId);
            result = popupClient.acquireToken(request, pkce);
        }
        return result.then((result)=>{
            /*
             *  If logged in, emit acquire token events
             */ const isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;
            if (isLoggingIn) this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGIN_SUCCESS, (0, _browserConstantsMjs.InteractionType).Popup, result);
            else this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_SUCCESS, (0, _browserConstantsMjs.InteractionType).Popup, result);
            atPopupMeasurement.end({
                success: true,
                accessTokenSize: result.accessToken.length,
                idTokenSize: result.idToken.length
            }, undefined, result.account);
            return result;
        }).catch((e)=>{
            if (loggedInAccounts.length > 0) this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_FAILURE, (0, _browserConstantsMjs.InteractionType).Popup, null, e);
            else this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGIN_FAILURE, (0, _browserConstantsMjs.InteractionType).Popup, null, e);
            atPopupMeasurement.end({
                success: false
            }, e, request.account);
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        }).finally(async ()=>{
            this.browserStorage.setInteractionInProgress(false);
            if (this.config.system.asyncPopups) await this.preGeneratePkceCodes(correlationId);
        });
    }
    trackPageVisibilityWithMeasurement() {
        const measurement = this.ssoSilentMeasurement || this.acquireTokenByCodeAsyncMeasurement;
        if (!measurement) return;
        this.logger.info("Perf: Visibility change detected in ", measurement.event.name);
        measurement.increment({
            visibilityChangeCount: 1
        });
    }
    // #endregion
    // #region Silent Flow
    /**
     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:
     * - Any browser using a form of Intelligent Tracking Prevention
     * - If there is not an established session with the service
     *
     * In these cases, the request must be done inside a popup or full frame redirect.
     *
     * For the cases where interaction is required, you cannot send a request with prompt=none.
     *
     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as
     * you session on the server still exists.
     * @param request {@link SsoSilentRequest}
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ async ssoSilent(request) {
        const correlationId = this.getRequestCorrelationId(request);
        const validRequest = {
            ...request,
            // will be PromptValue.NONE or PromptValue.NO_SESSION
            prompt: request.prompt,
            correlationId: correlationId
        };
        this.ssoSilentMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).SsoSilent, correlationId);
        this.ssoSilentMeasurement?.add({
            scenarioId: request.scenarioId
        });
        preflightCheck(this.initialized, this.ssoSilentMeasurement, request.account);
        this.ssoSilentMeasurement?.increment({
            visibilityChangeCount: 0
        });
        document.addEventListener("visibilitychange", this.trackPageVisibilityWithMeasurement);
        this.logger.verbose("ssoSilent called", correlationId);
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).SSO_SILENT_START, (0, _browserConstantsMjs.InteractionType).Silent, validRequest);
        let result;
        if (this.canUsePlatformBroker(validRequest)) {
            this.ssoSilentMeasurement?.add({
                isPlatformBrokerRequest: true
            });
            result = this.acquireTokenNative(validRequest, (0, _browserConstantsMjs.ApiId).ssoSilent).catch((e)=>{
                this.ssoSilentMeasurement?.add({
                    brokerErrorName: e.name,
                    brokerErrorCode: e.errorCode
                });
                // If native token acquisition fails for availability reasons fallback to standard flow
                if (e instanceof (0, _nativeAuthErrorMjs.NativeAuthError) && (0, _nativeAuthErrorMjs.isFatalNativeAuthError)(e)) {
                    this.platformAuthProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                    const silentIframeClient = this.createSilentIframeClient(validRequest.correlationId);
                    return silentIframeClient.acquireToken(validRequest);
                }
                throw e;
            });
        } else {
            const silentIframeClient = this.createSilentIframeClient(validRequest.correlationId);
            result = silentIframeClient.acquireToken(validRequest);
        }
        return result.then((response)=>{
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).SSO_SILENT_SUCCESS, (0, _browserConstantsMjs.InteractionType).Silent, response);
            this.ssoSilentMeasurement?.end({
                success: true,
                accessTokenSize: response.accessToken.length,
                idTokenSize: response.idToken.length
            }, undefined, response.account);
            return response;
        }).catch((e)=>{
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).SSO_SILENT_FAILURE, (0, _browserConstantsMjs.InteractionType).Silent, null, e);
            this.ssoSilentMeasurement?.end({
                success: false
            }, e, request.account);
            throw e;
        }).finally(()=>{
            document.removeEventListener("visibilitychange", this.trackPageVisibilityWithMeasurement);
        });
    }
    /**
     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.
     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.
     * This API is not indended for normal authorization code acquisition and redemption.
     *
     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.
     *
     * @param request {@link AuthorizationCodeRequest}
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ async acquireTokenByCode(request) {
        const correlationId = this.getRequestCorrelationId(request);
        this.logger.trace("acquireTokenByCode called", correlationId);
        const atbcMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AcquireTokenByCode, correlationId);
        preflightCheck(this.initialized, atbcMeasurement);
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_BY_CODE_START, (0, _browserConstantsMjs.InteractionType).Silent, request);
        atbcMeasurement.add({
            scenarioId: request.scenarioId
        });
        try {
            if (request.code && request.nativeAccountId) // Throw error in case server returns both spa_code and spa_accountid in exchange for auth code.
            throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.spaCodeAndNativeAccountIdPresent));
            else if (request.code) {
                const hybridAuthCode = request.code;
                let response = this.hybridAuthCodeResponses.get(hybridAuthCode);
                if (!response) {
                    this.logger.verbose("Initiating new acquireTokenByCode request", correlationId);
                    response = this.acquireTokenByCodeAsync({
                        ...request,
                        correlationId
                    }).then((result)=>{
                        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_BY_CODE_SUCCESS, (0, _browserConstantsMjs.InteractionType).Silent, result);
                        this.hybridAuthCodeResponses.delete(hybridAuthCode);
                        atbcMeasurement.end({
                            success: true,
                            accessTokenSize: result.accessToken.length,
                            idTokenSize: result.idToken.length
                        }, undefined, result.account);
                        return result;
                    }).catch((error)=>{
                        this.hybridAuthCodeResponses.delete(hybridAuthCode);
                        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_BY_CODE_FAILURE, (0, _browserConstantsMjs.InteractionType).Silent, null, error);
                        atbcMeasurement.end({
                            success: false
                        }, error);
                        throw error;
                    });
                    this.hybridAuthCodeResponses.set(hybridAuthCode, response);
                } else {
                    this.logger.verbose("Existing acquireTokenByCode request found", correlationId);
                    atbcMeasurement.discard();
                }
                return await response;
            } else if (request.nativeAccountId) {
                if (this.canUsePlatformBroker(request, request.nativeAccountId)) {
                    atbcMeasurement.add({
                        isPlatformBrokerRequest: true
                    });
                    const result = await this.acquireTokenNative({
                        ...request,
                        correlationId
                    }, (0, _browserConstantsMjs.ApiId).acquireTokenByCode, request.nativeAccountId).catch((e)=>{
                        // If native token acquisition fails for availability reasons fallback to standard flow
                        if (e instanceof (0, _nativeAuthErrorMjs.NativeAuthError) && (0, _nativeAuthErrorMjs.isFatalNativeAuthError)(e)) this.platformAuthProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                        atbcMeasurement.add({
                            brokerErrorName: e.name,
                            brokerErrorCode: e.errorCode
                        });
                        throw e;
                    });
                    atbcMeasurement.end({
                        success: true
                    }, undefined, result.account);
                    return result;
                } else throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.unableToAcquireTokenFromNativePlatform));
            } else throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.authCodeOrNativeAccountIdRequired));
        } catch (e) {
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_BY_CODE_FAILURE, (0, _browserConstantsMjs.InteractionType).Silent, null, e);
            atbcMeasurement.end({
                success: false
            }, e);
            throw e;
        }
    }
    /**
     * Creates a SilentAuthCodeClient to redeem an authorization code.
     * @param request
     * @returns Result of the operation to redeem the authorization code
     */ async acquireTokenByCodeAsync(request) {
        this.logger.trace("acquireTokenByCodeAsync called", request.correlationId);
        this.acquireTokenByCodeAsyncMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AcquireTokenByCodeAsync, request.correlationId);
        this.acquireTokenByCodeAsyncMeasurement?.increment({
            visibilityChangeCount: 0
        });
        document.addEventListener("visibilitychange", this.trackPageVisibilityWithMeasurement);
        const silentAuthCodeClient = this.createSilentAuthCodeClient(request.correlationId);
        const silentTokenResult = await silentAuthCodeClient.acquireToken(request).then((response)=>{
            this.acquireTokenByCodeAsyncMeasurement?.end({
                success: true,
                fromCache: response.fromCache
            });
            return response;
        }).catch((tokenRenewalError)=>{
            this.acquireTokenByCodeAsyncMeasurement?.end({
                success: false
            }, tokenRenewalError);
            throw tokenRenewalError;
        }).finally(()=>{
            document.removeEventListener("visibilitychange", this.trackPageVisibilityWithMeasurement);
        });
        return silentTokenResult;
    }
    /**
     * Attempt to acquire an access token from the cache
     * @param silentCacheClient SilentCacheClient
     * @param commonRequest CommonSilentFlowRequest
     * @param silentRequest SilentRequest
     * @returns A promise that, when resolved, returns the access token
     */ async acquireTokenFromCache(commonRequest, cacheLookupPolicy) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).AcquireTokenFromCache, commonRequest.correlationId);
        switch(cacheLookupPolicy){
            case (0, _browserConstantsMjs.CacheLookupPolicy).Default:
            case (0, _browserConstantsMjs.CacheLookupPolicy).AccessToken:
            case (0, _browserConstantsMjs.CacheLookupPolicy).AccessTokenAndRefreshToken:
                const silentCacheClient = this.createSilentCacheClient(commonRequest.correlationId);
                return (0, _browser.invokeAsync)(silentCacheClient.acquireToken.bind(silentCacheClient), (0, _browser.PerformanceEvents).SilentCacheClientAcquireToken, this.logger, this.performanceClient, commonRequest.correlationId)(commonRequest);
            default:
                throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).tokenRefreshRequired);
        }
    }
    /**
     * Attempt to acquire an access token via a refresh token
     * @param commonRequest CommonSilentFlowRequest
     * @param cacheLookupPolicy CacheLookupPolicy
     * @returns A promise that, when resolved, returns the access token
     */ async acquireTokenByRefreshToken(commonRequest, cacheLookupPolicy) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).AcquireTokenByRefreshToken, commonRequest.correlationId);
        switch(cacheLookupPolicy){
            case (0, _browserConstantsMjs.CacheLookupPolicy).Default:
            case (0, _browserConstantsMjs.CacheLookupPolicy).AccessTokenAndRefreshToken:
            case (0, _browserConstantsMjs.CacheLookupPolicy).RefreshToken:
            case (0, _browserConstantsMjs.CacheLookupPolicy).RefreshTokenAndNetwork:
                const silentRefreshClient = this.createSilentRefreshClient(commonRequest.correlationId);
                return (0, _browser.invokeAsync)(silentRefreshClient.acquireToken.bind(silentRefreshClient), (0, _browser.PerformanceEvents).SilentRefreshClientAcquireToken, this.logger, this.performanceClient, commonRequest.correlationId)(commonRequest);
            default:
                throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).tokenRefreshRequired);
        }
    }
    /**
     * Attempt to acquire an access token via an iframe
     * @param request CommonSilentFlowRequest
     * @returns A promise that, when resolved, returns the access token
     */ async acquireTokenBySilentIframe(request) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).AcquireTokenBySilentIframe, request.correlationId);
        const silentIframeClient = this.createSilentIframeClient(request.correlationId);
        return (0, _browser.invokeAsync)(silentIframeClient.acquireToken.bind(silentIframeClient), (0, _browser.PerformanceEvents).SilentIframeClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(request);
    }
    // #endregion
    // #region Logout
    /**
     * Deprecated logout function. Use logoutRedirect or logoutPopup instead
     * @param logoutRequest
     * @deprecated
     */ async logout(logoutRequest) {
        const correlationId = this.getRequestCorrelationId(logoutRequest);
        this.logger.warning("logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.", correlationId);
        return this.logoutRedirect({
            correlationId,
            ...logoutRequest
        });
    }
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */ async logoutRedirect(logoutRequest) {
        const correlationId = this.getRequestCorrelationId(logoutRequest);
        (0, _browserUtilsMjs.redirectPreflightCheck)(this.initialized, this.config);
        this.browserStorage.setInteractionInProgress(true, (0, _browserConstantsMjs.INTERACTION_TYPE).SIGNOUT);
        const redirectClient = this.createRedirectClient(correlationId);
        return redirectClient.logout(logoutRequest);
    }
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */ logoutPopup(logoutRequest) {
        try {
            const correlationId = this.getRequestCorrelationId(logoutRequest);
            (0, _browserUtilsMjs.preflightCheck)(this.initialized);
            this.browserStorage.setInteractionInProgress(true, (0, _browserConstantsMjs.INTERACTION_TYPE).SIGNOUT);
            const popupClient = this.createPopupClient(correlationId);
            return popupClient.logout(logoutRequest).finally(()=>{
                this.browserStorage.setInteractionInProgress(false);
            });
        } catch (e) {
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        }
    }
    /**
     * Creates a cache interaction client to clear broswer cache.
     * @param logoutRequest
     */ async clearCache(logoutRequest) {
        if (!this.isBrowserEnvironment) {
            this.logger.info("in non-browser environment, returning early.");
            return;
        }
        const correlationId = this.getRequestCorrelationId(logoutRequest);
        const cacheClient = this.createSilentCacheClient(correlationId);
        return cacheClient.logout(logoutRequest);
    }
    // #endregion
    // #region Account APIs
    /**
     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.
     * @param accountFilter - (Optional) filter to narrow down the accounts returned
     * @returns Array of AccountInfo objects in cache
     */ getAllAccounts(accountFilter) {
        const correlationId = this.getRequestCorrelationId();
        return (0, _accountManagerMjs.getAllAccounts)(this.logger, this.browserStorage, this.isBrowserEnvironment, correlationId, accountFilter);
    }
    /**
     * Returns the first account found in the cache that matches the account filter passed in.
     * @param accountFilter
     * @returns The first account found in the cache matching the provided filter or null if no account could be found.
     */ getAccount(accountFilter) {
        const correlationId = this.getRequestCorrelationId();
        return (0, _accountManagerMjs.getAccount)(accountFilter, this.logger, this.browserStorage, correlationId);
    }
    /**
     * Returns the signed in account matching username.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found.
     * This API is provided for convenience but getAccountById should be used for best reliability
     * @param username
     * @returns The account object stored in MSAL
     */ getAccountByUsername(username) {
        const correlationId = this.getRequestCorrelationId();
        return (0, _accountManagerMjs.getAccountByUsername)(username, this.logger, this.browserStorage, correlationId);
    }
    /**
     * Returns the signed in account matching homeAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param homeAccountId
     * @returns The account object stored in MSAL
     */ getAccountByHomeId(homeAccountId) {
        const correlationId = this.getRequestCorrelationId();
        return (0, _accountManagerMjs.getAccountByHomeId)(homeAccountId, this.logger, this.browserStorage, correlationId);
    }
    /**
     * Returns the signed in account matching localAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param localAccountId
     * @returns The account object stored in MSAL
     */ getAccountByLocalId(localAccountId) {
        const correlationId = this.getRequestCorrelationId();
        return (0, _accountManagerMjs.getAccountByLocalId)(localAccountId, this.logger, this.browserStorage, correlationId);
    }
    /**
     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
     * @param account
     */ setActiveAccount(account) {
        const correlationId = this.getRequestCorrelationId();
        (0, _accountManagerMjs.setActiveAccount)(account, this.browserStorage, correlationId);
    }
    /**
     * Gets the currently active account
     */ getActiveAccount() {
        const correlationId = this.getRequestCorrelationId();
        return (0, _accountManagerMjs.getActiveAccount)(this.browserStorage, correlationId);
    }
    // #endregion
    /**
     * Hydrates the cache with the tokens from an AuthenticationResult
     * @param result
     * @param request
     * @returns
     */ async hydrateCache(result, request) {
        this.logger.verbose("hydrateCache called");
        // Account gets saved to browser storage regardless of native or not
        const accountEntity = (0, _browser.AccountEntity).createFromAccountInfo(result.account, result.cloudGraphHostName, result.msGraphHost);
        await this.browserStorage.setAccount(accountEntity, result.correlationId, (0, _browser.AuthToken).isKmsi(result.idTokenClaims));
        if (result.fromNativeBroker) {
            this.logger.verbose("Response was from native broker, storing in-memory");
            // Tokens from native broker are stored in-memory
            return this.nativeInternalStorage.hydrateCache(result, request);
        } else return this.browserStorage.hydrateCache(result, request);
    }
    // #region Helpers
    /**
     * Acquire a token from native device (e.g. WAM)
     * @param request
     */ async acquireTokenNative(request, apiId, accountId, cacheLookupPolicy) {
        this.logger.trace("acquireTokenNative called");
        if (!this.platformAuthProvider) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.nativeConnectionNotEstablished));
        const nativeClient = new (0, _platformAuthInteractionClientMjs.PlatformAuthInteractionClient)(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, apiId, this.performanceClient, this.platformAuthProvider, accountId || this.getNativeAccountId(request), this.nativeInternalStorage, request.correlationId);
        return nativeClient.acquireToken(request, cacheLookupPolicy);
    }
    /**
     * Returns boolean indicating if this request can use the platform broker
     * @param request
     */ canUsePlatformBroker(request, accountId) {
        this.logger.trace("canUsePlatformBroker called");
        if (!this.platformAuthProvider) {
            this.logger.trace("canUsePlatformBroker: platform broker unavilable, returning false");
            return false;
        }
        if (!(0, _platformAuthProviderMjs.isPlatformAuthAllowed)(this.config, this.logger, this.platformAuthProvider, request.authenticationScheme)) {
            this.logger.trace("canUsePlatformBroker: isBrokerAvailable returned false, returning false");
            return false;
        }
        if (request.prompt) switch(request.prompt){
            case (0, _browser.PromptValue).NONE:
            case (0, _browser.PromptValue).CONSENT:
            case (0, _browser.PromptValue).LOGIN:
            case (0, _browser.PromptValue).SELECT_ACCOUNT:
                this.logger.trace("canUsePlatformBroker: prompt is compatible with platform broker flow");
                break;
            default:
                this.logger.trace(`canUsePlatformBroker: prompt = ${request.prompt} is not compatible with platform broker flow, returning false`);
                return false;
        }
        if (!accountId && !this.getNativeAccountId(request)) {
            this.logger.trace("canUsePlatformBroker: nativeAccountId is not available, returning false");
            return false;
        }
        return true;
    }
    /**
     * Get the native accountId from the account
     * @param request
     * @returns
     */ getNativeAccountId(request) {
        const account = request.account || this.getAccount({
            loginHint: request.loginHint,
            sid: request.sid
        }) || this.getActiveAccount();
        return account && account.nativeAccountId || "";
    }
    /**
     * Returns new instance of the Popup Interaction Client
     * @param correlationId
     */ createPopupClient(correlationId) {
        return new (0, _popupClientMjs.PopupClient)(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.platformAuthProvider, correlationId);
    }
    /**
     * Returns new instance of the Redirect Interaction Client
     * @param correlationId
     */ createRedirectClient(correlationId) {
        return new (0, _redirectClientMjs.RedirectClient)(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.platformAuthProvider, correlationId);
    }
    /**
     * Returns new instance of the Silent Iframe Interaction Client
     * @param correlationId
     */ createSilentIframeClient(correlationId) {
        return new (0, _silentIframeClientMjs.SilentIframeClient)(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, (0, _browserConstantsMjs.ApiId).ssoSilent, this.performanceClient, this.nativeInternalStorage, this.platformAuthProvider, correlationId);
    }
    /**
     * Returns new instance of the Silent Cache Interaction Client
     */ createSilentCacheClient(correlationId) {
        return new (0, _silentCacheClientMjs.SilentCacheClient)(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.platformAuthProvider, correlationId);
    }
    /**
     * Returns new instance of the Silent Refresh Interaction Client
     */ createSilentRefreshClient(correlationId) {
        return new (0, _silentRefreshClientMjs.SilentRefreshClient)(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.platformAuthProvider, correlationId);
    }
    /**
     * Returns new instance of the Silent AuthCode Interaction Client
     */ createSilentAuthCodeClient(correlationId) {
        return new (0, _silentAuthCodeClientMjs.SilentAuthCodeClient)(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, (0, _browserConstantsMjs.ApiId).acquireTokenByCode, this.performanceClient, this.platformAuthProvider, correlationId);
    }
    /**
     * Adds event callbacks to array
     * @param callback
     */ addEventCallback(callback, eventTypes) {
        return this.eventHandler.addEventCallback(callback, eventTypes);
    }
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */ removeEventCallback(callbackId) {
        this.eventHandler.removeEventCallback(callbackId);
    }
    /**
     * Registers a callback to receive performance events.
     *
     * @param {PerformanceCallbackFunction} callback
     * @returns {string}
     */ addPerformanceCallback(callback) {
        (0, _browserUtilsMjs.blockNonBrowserEnvironment)();
        return this.performanceClient.addPerformanceCallback(callback);
    }
    /**
     * Removes a callback registered with addPerformanceCallback.
     *
     * @param {string} callbackId
     * @returns {boolean}
     */ removePerformanceCallback(callbackId) {
        return this.performanceClient.removePerformanceCallback(callbackId);
    }
    /**
     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     * @deprecated These events will be raised by default and this method will be removed in a future major version.
     */ enableAccountStorageEvents() {
        if (this.config.cache.cacheLocation !== (0, _browserConstantsMjs.BrowserCacheLocation).LocalStorage) {
            this.logger.info("Account storage events are only available when cacheLocation is set to localStorage");
            return;
        }
        this.eventHandler.subscribeCrossTab();
    }
    /**
     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     * @deprecated These events will be raised by default and this method will be removed in a future major version.
     */ disableAccountStorageEvents() {
        if (this.config.cache.cacheLocation !== (0, _browserConstantsMjs.BrowserCacheLocation).LocalStorage) {
            this.logger.info("Account storage events are only available when cacheLocation is set to localStorage");
            return;
        }
        this.eventHandler.unsubscribeCrossTab();
    }
    /**
     * Gets the token cache for the application.
     */ getTokenCache() {
        return this.tokenCache;
    }
    /**
     * Returns the logger instance
     */ getLogger() {
        return this.logger;
    }
    /**
     * Replaces the default logger set in configurations with new Logger with new configurations
     * @param logger Logger instance
     */ setLogger(logger) {
        this.logger = logger;
    }
    /**
     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.
     * @param sku
     * @param version
     */ initializeWrapperLibrary(sku, version) {
        // Validate the SKU passed in is one we expect
        this.browserStorage.setWrapperMetadata(sku, version);
    }
    /**
     * Sets navigation client
     * @param navigationClient
     */ setNavigationClient(navigationClient) {
        this.navigationClient = navigationClient;
    }
    /**
     * Returns the configuration object
     */ getConfiguration() {
        return this.config;
    }
    /**
     * Returns the performance client
     */ getPerformanceClient() {
        return this.performanceClient;
    }
    /**
     * Returns the browser env indicator
     */ isBrowserEnv() {
        return this.isBrowserEnvironment;
    }
    /**
     * Generates a correlation id for a request if none is provided.
     *
     * @protected
     * @param {?Partial<BaseAuthRequest>} [request]
     * @returns {string}
     */ getRequestCorrelationId(request) {
        if (request?.correlationId) return request.correlationId;
        if (this.isBrowserEnvironment) return (0, _browserCryptoMjs.createNewGuid)();
        /*
         * Included for fallback for non-browser environments,
         * and to ensure this method always returns a string.
         */ return (0, _browser.Constants).EMPTY_STRING;
    }
    // #endregion
    /**
     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so
     * any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */ async loginRedirect(request) {
        const correlationId = this.getRequestCorrelationId(request);
        this.logger.verbose("loginRedirect called", correlationId);
        return this.acquireTokenRedirect({
            correlationId,
            ...request || (0, _browserConstantsMjs.DEFAULT_REQUEST)
        });
    }
    /**
     * Use when initiating the login process via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ loginPopup(request) {
        const correlationId = this.getRequestCorrelationId(request);
        this.logger.verbose("loginPopup called", correlationId);
        return this.acquireTokenPopup({
            correlationId,
            ...request || (0, _browserConstantsMjs.DEFAULT_REQUEST)
        });
    }
    /**
     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.
     *
     * @param {@link (SilentRequest:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
     */ async acquireTokenSilent(request) {
        const correlationId = this.getRequestCorrelationId(request);
        const atsMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AcquireTokenSilent, correlationId);
        atsMeasurement.add({
            cacheLookupPolicy: request.cacheLookupPolicy,
            scenarioId: request.scenarioId
        });
        preflightCheck(this.initialized, atsMeasurement, request.account);
        this.logger.verbose("acquireTokenSilent called", correlationId);
        const account = request.account || this.getActiveAccount();
        if (!account) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.noAccountError));
        return this.acquireTokenSilentDeduped(request, account, correlationId).then((result)=>{
            atsMeasurement.end({
                success: true,
                fromCache: result.fromCache,
                accessTokenSize: result.accessToken.length,
                idTokenSize: result.idToken.length
            }, undefined, result.account);
            return {
                ...result,
                state: request.state,
                correlationId: correlationId
            };
        }).catch((error)=>{
            if (error instanceof (0, _browser.AuthError)) // Ensures PWB scenarios can correctly match request to response
            error.setCorrelationId(correlationId);
            atsMeasurement.end({
                success: false
            }, error, account);
            throw error;
        });
    }
    /**
     * Checks if identical request is already in flight and returns reference to the existing promise or fires off a new one if this is the first
     * @param request
     * @param account
     * @param correlationId
     * @returns
     */ async acquireTokenSilentDeduped(request, account, correlationId) {
        const thumbprint = (0, _browser.getRequestThumbprint)(this.config.auth.clientId, {
            ...request,
            authority: request.authority || this.config.auth.authority,
            correlationId: correlationId
        }, account.homeAccountId);
        const silentRequestKey = JSON.stringify(thumbprint);
        const inProgressRequest = this.activeSilentTokenRequests.get(silentRequestKey);
        if (typeof inProgressRequest === "undefined") {
            this.logger.verbose("acquireTokenSilent called for the first time, storing active request", correlationId);
            this.performanceClient.addFields({
                deduped: false
            }, correlationId);
            const activeRequest = (0, _browser.invokeAsync)(this.acquireTokenSilentAsync.bind(this), (0, _browser.PerformanceEvents).AcquireTokenSilentAsync, this.logger, this.performanceClient, correlationId)({
                ...request,
                correlationId
            }, account);
            this.activeSilentTokenRequests.set(silentRequestKey, activeRequest);
            return activeRequest.finally(()=>{
                this.activeSilentTokenRequests.delete(silentRequestKey);
            });
        } else {
            this.logger.verbose("acquireTokenSilent has been called previously, returning the result from the first call", correlationId);
            this.performanceClient.addFields({
                deduped: true
            }, correlationId);
            return inProgressRequest;
        }
    }
    /**
     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.
     * @param {@link (SilentRequest:type)}
     * @param {@link (AccountInfo:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}
     */ async acquireTokenSilentAsync(request, account) {
        const trackPageVisibility = ()=>this.trackPageVisibility(request.correlationId);
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).AcquireTokenSilentAsync, request.correlationId);
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_START, (0, _browserConstantsMjs.InteractionType).Silent, request);
        if (request.correlationId) this.performanceClient.incrementFields({
            visibilityChangeCount: 0
        }, request.correlationId);
        document.addEventListener("visibilitychange", trackPageVisibility);
        const silentRequest = await (0, _browser.invokeAsync)((0, _requestHelpersMjs.initializeSilentRequest), (0, _browser.PerformanceEvents).InitializeSilentRequest, this.logger, this.performanceClient, request.correlationId)(request, account, this.config, this.performanceClient, this.logger);
        const cacheLookupPolicy = request.cacheLookupPolicy || (0, _browserConstantsMjs.CacheLookupPolicy).Default;
        const result = this.acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy).catch(async (refreshTokenError)=>{
            const shouldTryToResolveSilently = checkIfRefreshTokenErrorCanBeResolvedSilently(refreshTokenError, cacheLookupPolicy);
            if (shouldTryToResolveSilently) {
                if (!this.activeIframeRequest) {
                    let _resolve;
                    // Always set the active request tracker immediately after checking it to prevent races
                    this.activeIframeRequest = [
                        new Promise((resolve)=>{
                            _resolve = resolve;
                        }),
                        silentRequest.correlationId
                    ];
                    this.logger.verbose("Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.", silentRequest.correlationId);
                    return (0, _browser.invokeAsync)(this.acquireTokenBySilentIframe.bind(this), (0, _browser.PerformanceEvents).AcquireTokenBySilentIframe, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest).then((iframeResult)=>{
                        _resolve(true);
                        return iframeResult;
                    }).catch((e)=>{
                        _resolve(false);
                        throw e;
                    }).finally(()=>{
                        this.activeIframeRequest = undefined;
                    });
                } else if (cacheLookupPolicy !== (0, _browserConstantsMjs.CacheLookupPolicy).Skip) {
                    const [activePromise, activeCorrelationId] = this.activeIframeRequest;
                    this.logger.verbose(`Iframe request is already in progress, awaiting resolution for request with correlationId: ${activeCorrelationId}`, silentRequest.correlationId);
                    const awaitConcurrentIframeMeasure = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AwaitConcurrentIframe, silentRequest.correlationId);
                    awaitConcurrentIframeMeasure.add({
                        awaitIframeCorrelationId: activeCorrelationId
                    });
                    const activePromiseResult = await activePromise;
                    awaitConcurrentIframeMeasure.end({
                        success: activePromiseResult
                    });
                    if (activePromiseResult) {
                        this.logger.verbose(`Parallel iframe request with correlationId: ${activeCorrelationId} succeeded. Retrying cache and/or RT redemption`, silentRequest.correlationId);
                        // Retry cache lookup and/or RT exchange after iframe completes
                        return this.acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy);
                    } else {
                        this.logger.info(`Iframe request with correlationId: ${activeCorrelationId} failed. Interaction is required.`);
                        // If previous iframe request failed, it's unlikely to succeed this time. Throw original error.
                        throw refreshTokenError;
                    }
                } else {
                    // Cache policy set to skip and another iframe request is already in progress
                    this.logger.warning("Another iframe request is currently in progress and CacheLookupPolicy is set to Skip. This may result in degraded performance and/or reliability for both calls. Please consider changing the CacheLookupPolicy to take advantage of request queuing and token cache.", silentRequest.correlationId);
                    return (0, _browser.invokeAsync)(this.acquireTokenBySilentIframe.bind(this), (0, _browser.PerformanceEvents).AcquireTokenBySilentIframe, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);
                }
            } else // Error cannot be silently resolved or iframe renewal is not allowed, interaction required
            throw refreshTokenError;
        });
        return result.then((response)=>{
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_SUCCESS, (0, _browserConstantsMjs.InteractionType).Silent, response);
            this.performanceClient.addFields({
                fromCache: response.fromCache
            }, request.correlationId);
            return response;
        }).catch((tokenRenewalError)=>{
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_FAILURE, (0, _browserConstantsMjs.InteractionType).Silent, null, tokenRenewalError);
            throw tokenRenewalError;
        }).finally(()=>{
            document.removeEventListener("visibilitychange", trackPageVisibility);
        });
    }
    /**
     * AcquireTokenSilent without the iframe fallback. This is used to enable the correct fallbacks in cases where there's a potential for multiple silent requests to be made in parallel and prevent those requests from making concurrent iframe requests.
     * @param silentRequest
     * @param cacheLookupPolicy
     * @returns
     */ async acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy) {
        // if the cache policy is set to access_token only, we should not be hitting the native layer yet
        if ((0, _platformAuthProviderMjs.isPlatformAuthAllowed)(this.config, this.logger, this.platformAuthProvider, silentRequest.authenticationScheme) && silentRequest.account.nativeAccountId) {
            this.logger.verbose("acquireTokenSilent - attempting to acquire token from native platform");
            this.performanceClient.addFields({
                isPlatformBrokerRequest: true
            }, silentRequest.correlationId);
            return this.acquireTokenNative(silentRequest, (0, _browserConstantsMjs.ApiId).acquireTokenSilent_silentFlow, silentRequest.account.nativeAccountId, cacheLookupPolicy).catch(async (e)=>{
                this.performanceClient.addFields({
                    brokerErrorName: e.name,
                    brokerErrorCode: e.errorCode
                }, silentRequest.correlationId);
                // If native token acquisition fails for availability reasons fallback to web flow
                if (e instanceof (0, _nativeAuthErrorMjs.NativeAuthError) && (0, _nativeAuthErrorMjs.isFatalNativeAuthError)(e)) {
                    this.logger.verbose("acquireTokenSilent - native platform unavailable, falling back to web flow");
                    this.platformAuthProvider = undefined; // Prevent future requests from continuing to attempt
                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal
                    throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).tokenRefreshRequired);
                }
                throw e;
            });
        } else {
            this.logger.verbose("acquireTokenSilent - attempting to acquire token from web flow");
            // add logs to identify embedded cache retrieval
            if (cacheLookupPolicy === (0, _browserConstantsMjs.CacheLookupPolicy).AccessToken) this.logger.verbose("acquireTokenSilent - cache lookup policy set to AccessToken, attempting to acquire token from local cache");
            return (0, _browser.invokeAsync)(this.acquireTokenFromCache.bind(this), (0, _browser.PerformanceEvents).AcquireTokenFromCache, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest, cacheLookupPolicy).catch((cacheError)=>{
                if (cacheLookupPolicy === (0, _browserConstantsMjs.CacheLookupPolicy).AccessToken) throw cacheError;
                this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_NETWORK_START, (0, _browserConstantsMjs.InteractionType).Silent, silentRequest);
                return (0, _browser.invokeAsync)(this.acquireTokenByRefreshToken.bind(this), (0, _browser.PerformanceEvents).AcquireTokenByRefreshToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest, cacheLookupPolicy);
            });
        }
    }
    /**
     * Pre-generates PKCE codes and stores it in local variable
     * @param correlationId
     */ async preGeneratePkceCodes(correlationId) {
        this.logger.verbose("Generating new PKCE codes");
        this.pkceCode = await (0, _browser.invokeAsync)((0, _pkceGeneratorMjs.generatePkceCodes), (0, _browser.PerformanceEvents).GeneratePkceCodes, this.logger, this.performanceClient, correlationId)(this.performanceClient, this.logger, correlationId);
        return Promise.resolve();
    }
    /**
     * Provides pre-generated PKCE codes, if any
     * @param correlationId
     */ getPreGeneratedPkceCodes(correlationId) {
        this.logger.verbose("Attempting to pick up pre-generated PKCE codes");
        const res = this.pkceCode ? {
            ...this.pkceCode
        } : undefined;
        this.pkceCode = undefined;
        this.logger.verbose(`${res ? "Found" : "Did not find"} pre-generated PKCE codes`);
        this.performanceClient.addFields({
            usePreGeneratedPkce: !!res
        }, correlationId);
        return res;
    }
    logMultipleInstances(performanceEvent) {
        const clientId = this.config.auth.clientId;
        if (!window) return;
        // @ts-ignore
        window.msal = window.msal || {};
        // @ts-ignore
        window.msal.clientIds = window.msal.clientIds || [];
        // @ts-ignore
        const clientIds = window.msal.clientIds;
        if (clientIds.length > 0) this.logger.verbose("There is already an instance of MSAL.js in the window.");
        // @ts-ignore
        window.msal.clientIds.push(clientId);
        (0, _msalFrameStatsUtilsMjs.collectInstanceStats)(clientId, performanceEvent, this.logger);
    }
}
/**
 * Determines whether an error thrown by the refresh token endpoint can be resolved without interaction
 * @param refreshTokenError
 * @param silentRequest
 * @param cacheLookupPolicy
 * @returns
 */ function checkIfRefreshTokenErrorCanBeResolvedSilently(refreshTokenError, cacheLookupPolicy) {
    const noInteractionRequired = !(refreshTokenError instanceof (0, _browser.InteractionRequiredAuthError) && // For refresh token errors, bad_token does not always require interaction (silently resolvable)
    refreshTokenError.subError !== (0, _browser.InteractionRequiredAuthErrorCodes).badToken);
    // Errors that result when the refresh token needs to be replaced
    const refreshTokenRefreshRequired = refreshTokenError.errorCode === (0, _browserConstantsMjs.BrowserConstants).INVALID_GRANT_ERROR || refreshTokenError.errorCode === (0, _browser.ClientAuthErrorCodes).tokenRefreshRequired;
    // Errors that may be resolved before falling back to interaction (through iframe renewal)
    const isSilentlyResolvable = noInteractionRequired && refreshTokenRefreshRequired || refreshTokenError.errorCode === (0, _browser.InteractionRequiredAuthErrorCodes).noTokensFound || refreshTokenError.errorCode === (0, _browser.InteractionRequiredAuthErrorCodes).refreshTokenExpired;
    // Only these policies allow for an iframe renewal attempt
    const tryIframeRenewal = (0, _browserConstantsMjs.iFrameRenewalPolicies).includes(cacheLookupPolicy);
    return isSilentlyResolvable && tryIframeRenewal;
}

},{"../crypto/CryptoOps.mjs":"6UNxs","@azure/msal-common/browser":"aaatw","../cache/BrowserCacheManager.mjs":"9EqDn","../cache/AccountManager.mjs":"6Nrot","../utils/BrowserConstants.mjs":"kJowt","../utils/BrowserUtils.mjs":"77mxR","../event/EventType.mjs":"aw4MU","../event/EventHandler.mjs":"ked8H","../interaction_client/PopupClient.mjs":"kReSG","../interaction_client/RedirectClient.mjs":"ijbOg","../interaction_client/SilentIframeClient.mjs":"fhN9b","../interaction_client/SilentRefreshClient.mjs":"12nHG","../cache/TokenCache.mjs":"cPyab","../interaction_client/PlatformAuthInteractionClient.mjs":"e7hC2","../error/NativeAuthError.mjs":"9Vr4p","../interaction_client/SilentCacheClient.mjs":"jAB2C","../interaction_client/SilentAuthCodeClient.mjs":"kNYXd","../error/BrowserAuthError.mjs":"dg1Z3","../crypto/BrowserCrypto.mjs":"8sZR9","../request/RequestHelpers.mjs":"h8Zsw","../crypto/PkceGenerator.mjs":"2JzjF","../broker/nativeBroker/PlatformAuthProvider.mjs":"9DUuE","../utils/MsalFrameStatsUtils.mjs":"7uuPV","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"6UNxs":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CryptoOps", ()=>CryptoOps);
var _browser = require("@azure/msal-common/browser");
var _base64EncodeMjs = require("../encode/Base64Encode.mjs");
var _base64DecodeMjs = require("../encode/Base64Decode.mjs");
var _browserCryptoMjs = require("./BrowserCrypto.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _asyncMemoryStorageMjs = require("../cache/AsyncMemoryStorage.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and
 * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).
 */ class CryptoOps {
    constructor(logger, performanceClient, skipValidateSubtleCrypto){
        this.logger = logger;
        // Browser crypto needs to be validated first before any other classes can be set.
        (0, _browserCryptoMjs.validateCryptoAvailable)(skipValidateSubtleCrypto ?? false);
        this.cache = new (0, _asyncMemoryStorageMjs.AsyncMemoryStorage)(this.logger);
        this.performanceClient = performanceClient;
    }
    /**
     * Creates a new random GUID - used to populate state and nonce.
     * @returns string (GUID)
     */ createNewGuid() {
        return (0, _browserCryptoMjs.createNewGuid)();
    }
    /**
     * Encodes input string to base64.
     * @param input
     */ base64Encode(input) {
        return (0, _base64EncodeMjs.base64Encode)(input);
    }
    /**
     * Decodes input string from base64.
     * @param input
     */ base64Decode(input) {
        return (0, _base64DecodeMjs.base64Decode)(input);
    }
    /**
     * Encodes input string to base64 URL safe string.
     * @param input
     */ base64UrlEncode(input) {
        return (0, _base64EncodeMjs.urlEncode)(input);
    }
    /**
     * Stringifies and base64Url encodes input public key
     * @param inputKid
     * @returns Base64Url encoded public key
     */ encodeKid(inputKid) {
        return this.base64UrlEncode(JSON.stringify({
            kid: inputKid
        }));
    }
    /**
     * Generates a keypair, stores it and returns a thumbprint
     * @param request
     */ async getPublicKeyThumbprint(request) {
        const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement((0, _browser.PerformanceEvents).CryptoOptsGetPublicKeyThumbprint, request.correlationId);
        // Generate Keypair
        const keyPair = await (0, _browserCryptoMjs.generateKeyPair)(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);
        // Generate Thumbprint for Public Key
        const publicKeyJwk = await (0, _browserCryptoMjs.exportJwk)(keyPair.publicKey);
        const pubKeyThumprintObj = {
            e: publicKeyJwk.e,
            kty: publicKeyJwk.kty,
            n: publicKeyJwk.n
        };
        const publicJwkString = getSortedObjectString(pubKeyThumprintObj);
        const publicJwkHash = await this.hashString(publicJwkString);
        // Generate Thumbprint for Private Key
        const privateKeyJwk = await (0, _browserCryptoMjs.exportJwk)(keyPair.privateKey);
        // Re-import private key to make it unextractable
        const unextractablePrivateKey = await (0, _browserCryptoMjs.importJwk)(privateKeyJwk, false, [
            "sign"
        ]);
        // Store Keypair data in keystore
        await this.cache.setItem(publicJwkHash, {
            privateKey: unextractablePrivateKey,
            publicKey: keyPair.publicKey,
            requestMethod: request.resourceRequestMethod,
            requestUri: request.resourceRequestUri
        });
        if (publicKeyThumbMeasurement) publicKeyThumbMeasurement.end({
            success: true
        });
        return publicJwkHash;
    }
    /**
     * Removes cryptographic keypair from key store matching the keyId passed in
     * @param kid
     */ async removeTokenBindingKey(kid) {
        await this.cache.removeItem(kid);
        const keyFound = await this.cache.containsKey(kid);
        if (keyFound) throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).bindingKeyNotRemoved);
    }
    /**
     * Removes all cryptographic keys from IndexedDB storage
     */ async clearKeystore() {
        // Delete in-memory keystores
        this.cache.clearInMemory();
        /**
         * There is only one database, so calling clearPersistent on asymmetric keystore takes care of
         * every persistent keystore
         */ try {
            await this.cache.clearPersistent();
            return true;
        } catch (e) {
            if (e instanceof Error) this.logger.error(`Clearing keystore failed with error: ${e.message}`);
            else this.logger.error("Clearing keystore failed with unknown error");
            return false;
        }
    }
    /**
     * Signs the given object as a jwt payload with private key retrieved by given kid.
     * @param payload
     * @param kid
     */ async signJwt(payload, kid, shrOptions, correlationId) {
        const signJwtMeasurement = this.performanceClient?.startMeasurement((0, _browser.PerformanceEvents).CryptoOptsSignJwt, correlationId);
        const cachedKeyPair = await this.cache.getItem(kid);
        if (!cachedKeyPair) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.cryptoKeyNotFound));
        // Get public key as JWK
        const publicKeyJwk = await (0, _browserCryptoMjs.exportJwk)(cachedKeyPair.publicKey);
        const publicKeyJwkString = getSortedObjectString(publicKeyJwk);
        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: "FULL_PUBLIC_KEY_HASH" })
        const encodedKeyIdThumbprint = (0, _base64EncodeMjs.urlEncode)(JSON.stringify({
            kid: kid
        }));
        // Generate header
        const shrHeader = (0, _browser.JoseHeader).getShrHeaderString({
            ...shrOptions?.header,
            alg: publicKeyJwk.alg,
            kid: encodedKeyIdThumbprint
        });
        const encodedShrHeader = (0, _base64EncodeMjs.urlEncode)(shrHeader);
        // Generate payload
        payload.cnf = {
            jwk: JSON.parse(publicKeyJwkString)
        };
        const encodedPayload = (0, _base64EncodeMjs.urlEncode)(JSON.stringify(payload));
        // Form token string
        const tokenString = `${encodedShrHeader}.${encodedPayload}`;
        // Sign token
        const encoder = new TextEncoder();
        const tokenBuffer = encoder.encode(tokenString);
        const signatureBuffer = await (0, _browserCryptoMjs.sign)(cachedKeyPair.privateKey, tokenBuffer);
        const encodedSignature = (0, _base64EncodeMjs.urlEncodeArr)(new Uint8Array(signatureBuffer));
        const signedJwt = `${tokenString}.${encodedSignature}`;
        if (signJwtMeasurement) signJwtMeasurement.end({
            success: true
        });
        return signedJwt;
    }
    /**
     * Returns the SHA-256 hash of an input string
     * @param plainText
     */ async hashString(plainText) {
        return (0, _browserCryptoMjs.hashString)(plainText);
    }
}
CryptoOps.POP_KEY_USAGES = [
    "sign",
    "verify"
];
CryptoOps.EXTRACTABLE = true;
function getSortedObjectString(obj) {
    return JSON.stringify(obj, Object.keys(obj).sort());
}

},{"@azure/msal-common/browser":"aaatw","../encode/Base64Encode.mjs":"bWn1N","../encode/Base64Decode.mjs":"llQUH","./BrowserCrypto.mjs":"8sZR9","../error/BrowserAuthError.mjs":"dg1Z3","../cache/AsyncMemoryStorage.mjs":"1hXLp","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"1hXLp":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AsyncMemoryStorage", ()=>AsyncMemoryStorage);
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _databaseStorageMjs = require("./DatabaseStorage.mjs");
var _memoryStorageMjs = require("./MemoryStorage.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,
 * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.
 */ class AsyncMemoryStorage {
    constructor(logger){
        this.inMemoryCache = new (0, _memoryStorageMjs.MemoryStorage)();
        this.indexedDBCache = new (0, _databaseStorageMjs.DatabaseStorage)();
        this.logger = logger;
    }
    handleDatabaseAccessError(error) {
        if (error instanceof (0, _browserAuthErrorMjs.BrowserAuthError) && error.errorCode === (0, _browserAuthErrorCodesMjs.databaseUnavailable)) this.logger.error("Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.");
        else throw error;
    }
    /**
     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous
     * storage object if item isn't found in-memory.
     * @param key
     */ async getItem(key) {
        const item = this.inMemoryCache.getItem(key);
        if (!item) try {
            this.logger.verbose("Queried item not found in in-memory cache, now querying persistent storage.");
            return await this.indexedDBCache.getItem(key);
        } catch (e) {
            this.handleDatabaseAccessError(e);
        }
        return item;
    }
    /**
     * Sets the item in the in-memory cache and then tries to set it in the asynchronous
     * storage object with the given key.
     * @param key
     * @param value
     */ async setItem(key, value) {
        this.inMemoryCache.setItem(key, value);
        try {
            await this.indexedDBCache.setItem(key, value);
        } catch (e) {
            this.handleDatabaseAccessError(e);
        }
    }
    /**
     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.
     * @param key
     */ async removeItem(key) {
        this.inMemoryCache.removeItem(key);
        try {
            await this.indexedDBCache.removeItem(key);
        } catch (e) {
            this.handleDatabaseAccessError(e);
        }
    }
    /**
     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the
     * asynchronous storage object.
     */ async getKeys() {
        const cacheKeys = this.inMemoryCache.getKeys();
        if (cacheKeys.length === 0) try {
            this.logger.verbose("In-memory cache is empty, now querying persistent storage.");
            return await this.indexedDBCache.getKeys();
        } catch (e) {
            this.handleDatabaseAccessError(e);
        }
        return cacheKeys;
    }
    /**
     * Returns true or false if the given key is present in the cache.
     * @param key
     */ async containsKey(key) {
        const containsKey = this.inMemoryCache.containsKey(key);
        if (!containsKey) try {
            this.logger.verbose("Key not found in in-memory cache, now querying persistent storage.");
            return await this.indexedDBCache.containsKey(key);
        } catch (e) {
            this.handleDatabaseAccessError(e);
        }
        return containsKey;
    }
    /**
     * Clears in-memory Map
     */ clearInMemory() {
        // InMemory cache is a Map instance, clear is straightforward
        this.logger.verbose(`Deleting in-memory keystore`);
        this.inMemoryCache.clear();
        this.logger.verbose(`In-memory keystore deleted`);
    }
    /**
     * Tries to delete the IndexedDB database
     * @returns
     */ async clearPersistent() {
        try {
            this.logger.verbose("Deleting persistent keystore");
            const dbDeleted = await this.indexedDBCache.deleteDatabase();
            if (dbDeleted) this.logger.verbose("Persistent keystore deleted");
            return dbDeleted;
        } catch (e) {
            this.handleDatabaseAccessError(e);
            return false;
        }
    }
}

},{"../error/BrowserAuthError.mjs":"dg1Z3","./DatabaseStorage.mjs":"02Ecp","./MemoryStorage.mjs":"6BqHT","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"02Ecp":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DatabaseStorage", ()=>DatabaseStorage);
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
 */ class DatabaseStorage {
    constructor(){
        this.dbName = (0, _browserConstantsMjs.DB_NAME);
        this.version = (0, _browserConstantsMjs.DB_VERSION);
        this.tableName = (0, _browserConstantsMjs.DB_TABLE_NAME);
        this.dbOpen = false;
    }
    /**
     * Opens IndexedDB instance.
     */ async open() {
        return new Promise((resolve, reject)=>{
            const openDB = window.indexedDB.open(this.dbName, this.version);
            openDB.addEventListener("upgradeneeded", (e)=>{
                const event = e;
                event.target.result.createObjectStore(this.tableName);
            });
            openDB.addEventListener("success", (e)=>{
                const event = e;
                this.db = event.target.result;
                this.dbOpen = true;
                resolve();
            });
            openDB.addEventListener("error", ()=>reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.databaseUnavailable))));
        });
    }
    /**
     * Closes the connection to IndexedDB database when all pending transactions
     * complete.
     */ closeConnection() {
        const db = this.db;
        if (db && this.dbOpen) {
            db.close();
            this.dbOpen = false;
        }
    }
    /**
     * Opens database if it's not already open
     */ async validateDbIsOpen() {
        if (!this.dbOpen) return this.open();
    }
    /**
     * Retrieves item from IndexedDB instance.
     * @param key
     */ async getItem(key) {
        await this.validateDbIsOpen();
        return new Promise((resolve, reject)=>{
            // TODO: Add timeouts?
            if (!this.db) return reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.databaseNotOpen)));
            const transaction = this.db.transaction([
                this.tableName
            ], "readonly");
            const objectStore = transaction.objectStore(this.tableName);
            const dbGet = objectStore.get(key);
            dbGet.addEventListener("success", (e)=>{
                const event = e;
                this.closeConnection();
                resolve(event.target.result);
            });
            dbGet.addEventListener("error", (e)=>{
                this.closeConnection();
                reject(e);
            });
        });
    }
    /**
     * Adds item to IndexedDB under given key
     * @param key
     * @param payload
     */ async setItem(key, payload) {
        await this.validateDbIsOpen();
        return new Promise((resolve, reject)=>{
            // TODO: Add timeouts?
            if (!this.db) return reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.databaseNotOpen)));
            const transaction = this.db.transaction([
                this.tableName
            ], "readwrite");
            const objectStore = transaction.objectStore(this.tableName);
            const dbPut = objectStore.put(payload, key);
            dbPut.addEventListener("success", ()=>{
                this.closeConnection();
                resolve();
            });
            dbPut.addEventListener("error", (e)=>{
                this.closeConnection();
                reject(e);
            });
        });
    }
    /**
     * Removes item from IndexedDB under given key
     * @param key
     */ async removeItem(key) {
        await this.validateDbIsOpen();
        return new Promise((resolve, reject)=>{
            if (!this.db) return reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.databaseNotOpen)));
            const transaction = this.db.transaction([
                this.tableName
            ], "readwrite");
            const objectStore = transaction.objectStore(this.tableName);
            const dbDelete = objectStore.delete(key);
            dbDelete.addEventListener("success", ()=>{
                this.closeConnection();
                resolve();
            });
            dbDelete.addEventListener("error", (e)=>{
                this.closeConnection();
                reject(e);
            });
        });
    }
    /**
     * Get all the keys from the storage object as an iterable array of strings.
     */ async getKeys() {
        await this.validateDbIsOpen();
        return new Promise((resolve, reject)=>{
            if (!this.db) return reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.databaseNotOpen)));
            const transaction = this.db.transaction([
                this.tableName
            ], "readonly");
            const objectStore = transaction.objectStore(this.tableName);
            const dbGetKeys = objectStore.getAllKeys();
            dbGetKeys.addEventListener("success", (e)=>{
                const event = e;
                this.closeConnection();
                resolve(event.target.result);
            });
            dbGetKeys.addEventListener("error", (e)=>{
                this.closeConnection();
                reject(e);
            });
        });
    }
    /**
     *
     * Checks whether there is an object under the search key in the object store
     */ async containsKey(key) {
        await this.validateDbIsOpen();
        return new Promise((resolve, reject)=>{
            if (!this.db) return reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.databaseNotOpen)));
            const transaction = this.db.transaction([
                this.tableName
            ], "readonly");
            const objectStore = transaction.objectStore(this.tableName);
            const dbContainsKey = objectStore.count(key);
            dbContainsKey.addEventListener("success", (e)=>{
                const event = e;
                this.closeConnection();
                resolve(event.target.result === 1);
            });
            dbContainsKey.addEventListener("error", (e)=>{
                this.closeConnection();
                reject(e);
            });
        });
    }
    /**
     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible
     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues
     * with IndexedDB database versions.
     */ async deleteDatabase() {
        // Check if database being deleted exists
        if (this.db && this.dbOpen) this.closeConnection();
        return new Promise((resolve, reject)=>{
            const deleteDbRequest = window.indexedDB.deleteDatabase((0, _browserConstantsMjs.DB_NAME));
            const id = setTimeout(()=>reject(false), 200); // Reject if events aren't raised within 200ms
            deleteDbRequest.addEventListener("success", ()=>{
                clearTimeout(id);
                return resolve(true);
            });
            deleteDbRequest.addEventListener("blocked", ()=>{
                clearTimeout(id);
                return resolve(true);
            });
            deleteDbRequest.addEventListener("error", ()=>{
                clearTimeout(id);
                return reject(false);
            });
        });
    }
}

},{"../error/BrowserAuthError.mjs":"dg1Z3","../utils/BrowserConstants.mjs":"kJowt","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"6BqHT":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MemoryStorage", ()=>MemoryStorage);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class MemoryStorage {
    constructor(){
        this.cache = new Map();
    }
    async initialize() {
    // Memory storage does not require initialization
    }
    getItem(key) {
        return this.cache.get(key) || null;
    }
    getUserData(key) {
        return this.getItem(key);
    }
    setItem(key, value) {
        this.cache.set(key, value);
    }
    async setUserData(key, value) {
        this.setItem(key, value);
    }
    removeItem(key) {
        this.cache.delete(key);
    }
    getKeys() {
        const cacheKeys = [];
        this.cache.forEach((value, key)=>{
            cacheKeys.push(key);
        });
        return cacheKeys;
    }
    containsKey(key) {
        return this.cache.has(key);
    }
    clear() {
        this.cache.clear();
    }
    decryptData() {
        // Memory storage does not support encryption, so this method is a no-op
        return Promise.resolve(null);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9EqDn":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserCacheManager", ()=>BrowserCacheManager);
parcelHelpers.export(exports, "DEFAULT_BROWSER_CACHE_MANAGER", ()=>DEFAULT_BROWSER_CACHE_MANAGER);
var _browser = require("@azure/msal-common/browser");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _cacheKeysMjs = require("./CacheKeys.mjs");
var _localStorageMjs = require("./LocalStorage.mjs");
var _sessionStorageMjs = require("./SessionStorage.mjs");
var _memoryStorageMjs = require("./MemoryStorage.mjs");
var _base64DecodeMjs = require("../encode/Base64Decode.mjs");
var _base64EncodeMjs = require("../encode/Base64Encode.mjs");
var _cookieStorageMjs = require("./CookieStorage.mjs");
var _cacheHelpersMjs = require("./CacheHelpers.mjs");
var _eventTypeMjs = require("../event/EventType.mjs");
var _browserUtilsMjs = require("../utils/BrowserUtils.mjs");
var _packageMetadataMjs = require("../packageMetadata.mjs");
var _helpersMjs = require("../utils/Helpers.mjs");
var _encryptedDataMjs = require("./EncryptedData.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class implements the cache storage interface for MSAL through browser local or session storage.
 * Cookies are only used if storeAuthStateInCookie is true, and are only used for
 * parameters such as state and nonce, generally.
 */ class BrowserCacheManager extends (0, _browser.CacheManager) {
    constructor(clientId, cacheConfig, cryptoImpl, logger, performanceClient, eventHandler, staticAuthorityOptions){
        super(clientId, cryptoImpl, logger, performanceClient, staticAuthorityOptions);
        this.cacheConfig = cacheConfig;
        this.logger = logger;
        this.internalStorage = new (0, _memoryStorageMjs.MemoryStorage)();
        this.browserStorage = getStorageImplementation(clientId, cacheConfig.cacheLocation, logger, performanceClient);
        this.temporaryCacheStorage = getStorageImplementation(clientId, cacheConfig.temporaryCacheLocation, logger, performanceClient);
        this.cookieStorage = new (0, _cookieStorageMjs.CookieStorage)();
        this.eventHandler = eventHandler;
    }
    async initialize(correlationId) {
        this.performanceClient.addFields({
            cacheLocation: this.cacheConfig.cacheLocation,
            cacheRetentionDays: this.cacheConfig.cacheRetentionDays
        }, correlationId);
        await this.browserStorage.initialize(correlationId);
        await this.migrateExistingCache(correlationId);
        this.trackVersionChanges(correlationId);
    }
    /**
     * Migrates any existing cache data from previous versions of MSAL.js into the current cache structure.
     */ async migrateExistingCache(correlationId) {
        let accountKeys = (0, _cacheHelpersMjs.getAccountKeys)(this.browserStorage);
        let tokenKeys = (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this.browserStorage);
        this.performanceClient.addFields({
            preMigrateAcntCount: accountKeys.length,
            preMigrateATCount: tokenKeys.accessToken.length,
            preMigrateITCount: tokenKeys.idToken.length,
            preMigrateRTCount: tokenKeys.refreshToken.length
        }, correlationId);
        for(let i = 0; i < (0, _cacheKeysMjs.ACCOUNT_SCHEMA_VERSION); i++){
            const credentialSchema = i; // For now account and credential schemas are the same, but may diverge in future
            await this.removeStaleAccounts(i, credentialSchema, correlationId);
        }
        // Must migrate idTokens first to ensure we have KMSI info for the rest
        for(let i = 0; i < (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION); i++){
            const accountSchema = i; // For now account and credential schemas are the same, but may diverge in future
            await this.migrateIdTokens(i, accountSchema, correlationId);
        }
        const kmsiMap = this.getKMSIValues();
        for(let i = 0; i < (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION); i++){
            await this.migrateAccessTokens(i, kmsiMap, correlationId);
            await this.migrateRefreshTokens(i, kmsiMap, correlationId);
        }
        accountKeys = (0, _cacheHelpersMjs.getAccountKeys)(this.browserStorage);
        tokenKeys = (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this.browserStorage);
        this.performanceClient.addFields({
            postMigrateAcntCount: accountKeys.length,
            postMigrateATCount: tokenKeys.accessToken.length,
            postMigrateITCount: tokenKeys.idToken.length,
            postMigrateRTCount: tokenKeys.refreshToken.length
        }, correlationId);
    }
    /**
     * Parses entry, adds lastUpdatedAt if it doesn't exist, removes entry if expired or invalid
     * @param key
     * @param correlationId
     * @returns
     */ async updateOldEntry(key, correlationId) {
        const rawValue = this.browserStorage.getItem(key);
        const parsedValue = this.validateAndParseJson(rawValue || "");
        if (!parsedValue) {
            this.browserStorage.removeItem(key);
            return null;
        }
        if (!parsedValue.lastUpdatedAt) {
            // Add lastUpdatedAt to the existing v0 entry if it doesnt exist so we know when it's safe to remove it
            parsedValue.lastUpdatedAt = Date.now().toString();
            this.setItem(key, JSON.stringify(parsedValue), correlationId);
        } else if ((0, _browser.TimeUtils).isCacheExpired(parsedValue.lastUpdatedAt, this.cacheConfig.cacheRetentionDays)) {
            this.browserStorage.removeItem(key);
            this.performanceClient.incrementFields({
                expiredCacheRemovedCount: 1
            }, correlationId);
            return null;
        }
        const decryptedData = (0, _encryptedDataMjs.isEncrypted)(parsedValue) ? await this.browserStorage.decryptData(key, parsedValue, correlationId) : parsedValue;
        if (!decryptedData || !(0, _browser.CacheHelpers).isCredentialEntity(decryptedData)) {
            this.performanceClient.incrementFields({
                invalidCacheCount: 1
            }, correlationId);
            return null;
        }
        if (((0, _browser.CacheHelpers).isAccessTokenEntity(decryptedData) || (0, _browser.CacheHelpers).isRefreshTokenEntity(decryptedData)) && decryptedData.expiresOn && (0, _browser.TimeUtils).isTokenExpired(decryptedData.expiresOn, (0, _browser.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC))) {
            this.browserStorage.removeItem(key);
            this.performanceClient.incrementFields({
                expiredCacheRemovedCount: 1
            }, correlationId);
            return null;
        }
        return decryptedData;
    }
    /**
     * Remove accounts from the cache for older schema versions if they have not been updated in the last cacheRetentionDays
     * @param accountSchema
     * @param credentialSchema
     * @param correlationId
     * @returns
     */ async removeStaleAccounts(accountSchema, credentialSchema, correlationId) {
        const accountKeysToCheck = (0, _cacheHelpersMjs.getAccountKeys)(this.browserStorage, accountSchema);
        if (accountKeysToCheck.length === 0) return;
        for (const accountKey of [
            ...accountKeysToCheck
        ]){
            this.performanceClient.incrementFields({
                oldAcntCount: 1
            }, correlationId);
            const rawValue = this.browserStorage.getItem(accountKey);
            const parsedValue = this.validateAndParseJson(rawValue || "");
            if (!parsedValue) {
                (0, _helpersMjs.removeElementFromArray)(accountKeysToCheck, accountKey);
                continue;
            }
            if (!parsedValue.lastUpdatedAt) {
                // Add lastUpdatedAt to the existing entry if it doesnt exist so we know when it's safe to remove it
                parsedValue.lastUpdatedAt = Date.now().toString();
                this.setItem(accountKey, JSON.stringify(parsedValue), correlationId);
                continue;
            } else if ((0, _browser.TimeUtils).isCacheExpired(parsedValue.lastUpdatedAt, this.cacheConfig.cacheRetentionDays)) {
                // Cache expired remove account and associated tokens
                await this.removeAccountOldSchema(accountKey, parsedValue, credentialSchema, correlationId);
                (0, _helpersMjs.removeElementFromArray)(accountKeysToCheck, accountKey);
            }
        }
        this.setAccountKeys(accountKeysToCheck, correlationId, accountSchema);
    }
    /**
     * Remove the given account and all associated tokens from the cache
     * @param accountKey
     * @param rawObject
     * @param credentialSchema
     * @param correlationId
     */ async removeAccountOldSchema(accountKey, rawObject, credentialSchema, correlationId) {
        const decryptedData = (0, _encryptedDataMjs.isEncrypted)(rawObject) ? await this.browserStorage.decryptData(accountKey, rawObject, correlationId) : rawObject;
        const homeAccountId = decryptedData?.homeAccountId;
        if (homeAccountId) {
            const tokenKeys = this.getTokenKeys(credentialSchema);
            [
                ...tokenKeys.idToken
            ].filter((key)=>key.includes(homeAccountId)).forEach((key)=>{
                this.browserStorage.removeItem(key);
                (0, _helpersMjs.removeElementFromArray)(tokenKeys.idToken, key);
            });
            [
                ...tokenKeys.accessToken
            ].filter((key)=>key.includes(homeAccountId)).forEach((key)=>{
                this.browserStorage.removeItem(key);
                (0, _helpersMjs.removeElementFromArray)(tokenKeys.accessToken, key);
            });
            [
                ...tokenKeys.refreshToken
            ].filter((key)=>key.includes(homeAccountId)).forEach((key)=>{
                this.browserStorage.removeItem(key);
                (0, _helpersMjs.removeElementFromArray)(tokenKeys.refreshToken, key);
            });
            this.setTokenKeys(tokenKeys, correlationId, credentialSchema);
        }
        this.performanceClient.incrementFields({
            expiredAcntRemovedCount: 1
        }, correlationId);
        this.browserStorage.removeItem(accountKey);
    }
    /**
     * Gets key value pair mapping homeAccountId to KMSI value
     * @returns
     */ getKMSIValues() {
        const kmsiMap = {};
        const tokenKeys = this.getTokenKeys().idToken;
        for (const key of tokenKeys){
            const rawValue = this.browserStorage.getUserData(key);
            if (rawValue) {
                const idToken = JSON.parse(rawValue);
                const claims = (0, _browser.AuthToken).extractTokenClaims(idToken.secret, (0, _base64DecodeMjs.base64Decode));
                if (claims) kmsiMap[idToken.homeAccountId] = (0, _browser.AuthToken).isKmsi(claims);
            }
        }
        return kmsiMap;
    }
    /**
     * Migrates id tokens from the old schema to the new schema, also migrates associated account object if it doesn't already exist in the new schema
     * @param credentialSchema
     * @param accountSchema
     * @param correlationId
     * @returns
     */ async migrateIdTokens(credentialSchema, accountSchema, correlationId) {
        const credentialKeysToMigrate = (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this.browserStorage, credentialSchema);
        if (credentialKeysToMigrate.idToken.length === 0) return;
        const currentCredentialKeys = (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this.browserStorage, (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION));
        const currentAccountKeys = (0, _cacheHelpersMjs.getAccountKeys)(this.browserStorage);
        const previousAccountKeys = (0, _cacheHelpersMjs.getAccountKeys)(this.browserStorage, accountSchema);
        for (const idTokenKey of [
            ...credentialKeysToMigrate.idToken
        ]){
            this.performanceClient.incrementFields({
                oldITCount: 1
            }, correlationId);
            const oldSchemaData = await this.updateOldEntry(idTokenKey, correlationId);
            if (!oldSchemaData) {
                (0, _helpersMjs.removeElementFromArray)(credentialKeysToMigrate.idToken, idTokenKey);
                continue;
            }
            const currentAccountKey = currentAccountKeys.find((key)=>key.includes(oldSchemaData.homeAccountId));
            const previousAccountKey = previousAccountKeys.find((key)=>key.includes(oldSchemaData.homeAccountId));
            let account = null;
            if (currentAccountKey) account = this.getAccount(currentAccountKey, correlationId);
            else if (previousAccountKey) {
                const rawValue = this.browserStorage.getItem(previousAccountKey);
                const parsedValue = this.validateAndParseJson(rawValue || "");
                account = parsedValue && (0, _encryptedDataMjs.isEncrypted)(parsedValue) ? await this.browserStorage.decryptData(previousAccountKey, parsedValue, correlationId) : parsedValue;
            }
            if (!account) {
                // Don't migrate idToken if we don't have an account for it
                this.performanceClient.incrementFields({
                    skipITMigrateCount: 1
                }, correlationId);
                continue;
            }
            const claims = (0, _browser.AuthToken).extractTokenClaims(oldSchemaData.secret, (0, _base64DecodeMjs.base64Decode));
            const newIdTokenKey = this.generateCredentialKey(oldSchemaData);
            const currentIdToken = this.getIdTokenCredential(newIdTokenKey, correlationId);
            const oldTokenHasSignInState = Object.keys(claims).includes("signin_state");
            const currentTokenHasSignInState = currentIdToken && Object.keys((0, _browser.AuthToken).extractTokenClaims(currentIdToken.secret, (0, _base64DecodeMjs.base64Decode)) || {}).includes("signin_state");
            /**
             * Only migrate if:
             * 1. Token doesn't yet exist in current schema
             * 2. Old schema token has been updated more recently than the current one AND migrating it won't result in loss of KMSI state
             */ if (!currentIdToken || oldSchemaData.lastUpdatedAt > currentIdToken.lastUpdatedAt && (oldTokenHasSignInState || !currentTokenHasSignInState)) {
                const tenantProfiles = account.tenantProfiles || [];
                const tenantId = (0, _browser.getTenantIdFromIdTokenClaims)(claims) || account.realm;
                if (tenantId && !tenantProfiles.find((tenantProfile)=>{
                    return tenantProfile.tenantId === tenantId;
                })) {
                    const newTenantProfile = (0, _browser.buildTenantProfile)(account.homeAccountId, account.localAccountId, tenantId, claims);
                    tenantProfiles.push(newTenantProfile);
                }
                account.tenantProfiles = tenantProfiles;
                const newAccountKey = this.generateAccountKey((0, _browser.AccountEntity).getAccountInfo(account));
                const kmsi = (0, _browser.AuthToken).isKmsi(claims);
                await this.setUserData(newAccountKey, JSON.stringify(account), correlationId, account.lastUpdatedAt, kmsi);
                if (!currentAccountKeys.includes(newAccountKey)) currentAccountKeys.push(newAccountKey);
                await this.setUserData(newIdTokenKey, JSON.stringify(oldSchemaData), correlationId, oldSchemaData.lastUpdatedAt, kmsi);
                this.performanceClient.incrementFields({
                    migratedITCount: 1
                }, correlationId);
                currentCredentialKeys.idToken.push(newIdTokenKey);
            }
        }
        this.setTokenKeys(credentialKeysToMigrate, correlationId, credentialSchema);
        this.setTokenKeys(currentCredentialKeys, correlationId);
        this.setAccountKeys(currentAccountKeys, correlationId);
    }
    /**
     * Migrates access tokens from old cache schema to current schema
     * @param credentialSchema
     * @param kmsiMap
     * @param correlationId
     * @returns
     */ async migrateAccessTokens(credentialSchema, kmsiMap, correlationId) {
        const credentialKeysToMigrate = (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this.browserStorage, credentialSchema);
        if (credentialKeysToMigrate.accessToken.length === 0) return;
        const currentCredentialKeys = (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this.browserStorage, (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION));
        for (const accessTokenKey of [
            ...credentialKeysToMigrate.accessToken
        ]){
            this.performanceClient.incrementFields({
                oldATCount: 1
            }, correlationId);
            const oldSchemaData = await this.updateOldEntry(accessTokenKey, correlationId);
            if (!oldSchemaData) {
                (0, _helpersMjs.removeElementFromArray)(credentialKeysToMigrate.accessToken, accessTokenKey);
                continue;
            }
            if (!Object.keys(kmsiMap).includes(oldSchemaData.homeAccountId)) {
                // Don't migrate tokens if we don't have an idToken for them
                this.performanceClient.incrementFields({
                    skipATMigrateCount: 1
                }, correlationId);
                continue;
            }
            const newKey = this.generateCredentialKey(oldSchemaData);
            const kmsi = kmsiMap[oldSchemaData.homeAccountId];
            if (!currentCredentialKeys.accessToken.includes(newKey)) {
                await this.setUserData(newKey, JSON.stringify(oldSchemaData), correlationId, oldSchemaData.lastUpdatedAt, kmsi);
                this.performanceClient.incrementFields({
                    migratedATCount: 1
                }, correlationId);
                currentCredentialKeys.accessToken.push(newKey);
            } else {
                const currentToken = this.getAccessTokenCredential(newKey, correlationId);
                if (!currentToken || oldSchemaData.lastUpdatedAt > currentToken.lastUpdatedAt) {
                    // If the token already exists, only overwrite it if the old token has a more recent lastUpdatedAt
                    await this.setUserData(newKey, JSON.stringify(oldSchemaData), correlationId, oldSchemaData.lastUpdatedAt, kmsi);
                    this.performanceClient.incrementFields({
                        migratedATCount: 1
                    }, correlationId);
                }
            }
        }
        this.setTokenKeys(credentialKeysToMigrate, correlationId, credentialSchema);
        this.setTokenKeys(currentCredentialKeys, correlationId);
    }
    /**
     * Migrates refresh tokens from old cache schema to current schema
     * @param credentialSchema
     * @param kmsiMap
     * @param correlationId
     * @returns
     */ async migrateRefreshTokens(credentialSchema, kmsiMap, correlationId) {
        const credentialKeysToMigrate = (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this.browserStorage, credentialSchema);
        if (credentialKeysToMigrate.refreshToken.length === 0) return;
        const currentCredentialKeys = (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this.browserStorage, (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION));
        for (const refreshTokenKey of [
            ...credentialKeysToMigrate.refreshToken
        ]){
            this.performanceClient.incrementFields({
                oldRTCount: 1
            }, correlationId);
            const oldSchemaData = await this.updateOldEntry(refreshTokenKey, correlationId);
            if (!oldSchemaData) {
                (0, _helpersMjs.removeElementFromArray)(credentialKeysToMigrate.refreshToken, refreshTokenKey);
                continue;
            }
            if (!Object.keys(kmsiMap).includes(oldSchemaData.homeAccountId)) {
                // Don't migrate tokens if we don't have an idToken for them
                this.performanceClient.incrementFields({
                    skipRTMigrateCount: 1
                }, correlationId);
                continue;
            }
            const newKey = this.generateCredentialKey(oldSchemaData);
            const kmsi = kmsiMap[oldSchemaData.homeAccountId];
            if (!currentCredentialKeys.refreshToken.includes(newKey)) {
                await this.setUserData(newKey, JSON.stringify(oldSchemaData), correlationId, oldSchemaData.lastUpdatedAt, kmsi);
                this.performanceClient.incrementFields({
                    migratedRTCount: 1
                }, correlationId);
                currentCredentialKeys.refreshToken.push(newKey);
            } else {
                const currentToken = this.getRefreshTokenCredential(newKey, correlationId);
                if (!currentToken || oldSchemaData.lastUpdatedAt > currentToken.lastUpdatedAt) {
                    // If the token already exists, only overwrite it if the old token has a more recent lastUpdatedAt
                    await this.setUserData(newKey, JSON.stringify(oldSchemaData), correlationId, oldSchemaData.lastUpdatedAt, kmsi);
                    this.performanceClient.incrementFields({
                        migratedRTCount: 1
                    }, correlationId);
                }
            }
        }
        this.setTokenKeys(credentialKeysToMigrate, correlationId, credentialSchema);
        this.setTokenKeys(currentCredentialKeys, correlationId);
    }
    /**
     * Tracks upgrades and downgrades for telemetry and debugging purposes
     */ trackVersionChanges(correlationId) {
        const previousVersion = this.browserStorage.getItem((0, _cacheKeysMjs.VERSION_CACHE_KEY));
        if (previousVersion) {
            this.logger.info(`MSAL.js was last initialized by version: ${previousVersion}`);
            this.performanceClient.addFields({
                previousLibraryVersion: previousVersion
            }, correlationId);
        }
        if (previousVersion !== (0, _packageMetadataMjs.version)) this.setItem((0, _cacheKeysMjs.VERSION_CACHE_KEY), (0, _packageMetadataMjs.version), correlationId);
    }
    /**
     * Parses passed value as JSON object, JSON.parse() will throw an error.
     * @param input
     */ validateAndParseJson(jsonValue) {
        if (!jsonValue) return null;
        try {
            const parsedJson = JSON.parse(jsonValue);
            /**
             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object
             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check
             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.
             *
             */ return parsedJson && typeof parsedJson === "object" ? parsedJson : null;
        } catch (error) {
            return null;
        }
    }
    /**
     * Helper to setItem in browser storage, with cleanup in case of quota errors
     * @param key
     * @param value
     */ setItem(key, value, correlationId) {
        const tokenKeysCount = new Array((0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION) + 1).fill(0); // Array mapping schema version to number of token keys stored for that version
        const accessTokenKeys = []; // Flat map of all access token keys stored, ordered by schema version
        const maxRetries = 20;
        for(let i = 0; i <= maxRetries; i++)// Attempt to store item in cache, if cache is full this call will throw and we'll attempt to clear space by removing access tokens from the cache one by one, starting with tokens stored by previous versions of MSAL.js
        try {
            this.browserStorage.setItem(key, value);
            if (i > 0) // If any tokens were removed in order to store this item update the token keys array with the tokens removed
            for(let schemaVersion = 0; schemaVersion <= (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION); schemaVersion++){
                // Get the sum of all previous token counts to use as start index for this schema version
                const startIndex = tokenKeysCount.slice(0, schemaVersion).reduce((sum, count)=>sum + count, 0);
                if (startIndex >= i) break;
                const endIndex = i > startIndex + tokenKeysCount[schemaVersion] ? startIndex + tokenKeysCount[schemaVersion] : i;
                if (i > startIndex && tokenKeysCount[schemaVersion] > 0) this.removeAccessTokenKeys(accessTokenKeys.slice(startIndex, endIndex), correlationId, schemaVersion);
            }
            break; // If setItem succeeds, exit the loop
        } catch (e) {
            const cacheError = (0, _browser.createCacheError)(e);
            if (cacheError.errorCode === (0, _browser.CacheErrorCodes).cacheQuotaExceeded && i < maxRetries) {
                if (!accessTokenKeys.length) {
                    // If we are currently trying to set the token keys, use the value we're trying to set
                    for(let i = 0; i <= (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION); i++)if (key === (0, _cacheKeysMjs.getTokenKeysCacheKey)(this.clientId, i)) {
                        const tokenKeys = JSON.parse(value).accessToken;
                        accessTokenKeys.push(...tokenKeys);
                        tokenKeysCount[i] = tokenKeys.length;
                    } else {
                        const tokenKeys = this.getTokenKeys(i).accessToken;
                        accessTokenKeys.push(...tokenKeys);
                        tokenKeysCount[i] = tokenKeys.length;
                    }
                }
                if (accessTokenKeys.length <= i) // Nothing to remove, rethrow the error
                throw cacheError;
                // When cache quota is exceeded, start removing access tokens until we can successfully set the item
                this.removeAccessToken(accessTokenKeys[i], correlationId, false // Don't save token keys yet, do it at the end
                );
            } else // If the error is not a quota exceeded error, rethrow it
            throw cacheError;
        }
    }
    /**
     * Helper to setUserData in browser storage, with cleanup in case of quota errors
     * @param key
     * @param value
     * @param correlationId
     */ async setUserData(key, value, correlationId, timestamp, kmsi) {
        const tokenKeysCount = new Array((0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION) + 1).fill(0); // Array mapping schema version to number of token keys stored for that version
        const accessTokenKeys = []; // Flat map of all access token keys stored, ordered by schema version
        const maxRetries = 20;
        for(let i = 0; i <= maxRetries; i++)try {
            // Attempt to store item in cache, if cache is full this call will throw and we'll attempt to clear space by removing access tokens from the cache one by one, starting with tokens stored by previous versions of MSAL.js
            await (0, _browser.invokeAsync)(this.browserStorage.setUserData.bind(this.browserStorage), (0, _browser.PerformanceEvents).SetUserData, this.logger, this.performanceClient)(key, value, correlationId, timestamp, kmsi);
            if (i > 0) // If any tokens were removed in order to store this item update the token keys array with the tokens removed
            for(let schemaVersion = 0; schemaVersion <= (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION); schemaVersion++){
                // Get the sum of all previous token counts to use as start index for this schema version
                const startIndex = tokenKeysCount.slice(0, schemaVersion).reduce((sum, count)=>sum + count, 0);
                if (startIndex >= i) break;
                const endIndex = i > startIndex + tokenKeysCount[schemaVersion] ? startIndex + tokenKeysCount[schemaVersion] : i;
                if (i > startIndex && tokenKeysCount[schemaVersion] > 0) this.removeAccessTokenKeys(accessTokenKeys.slice(startIndex, endIndex), correlationId, schemaVersion);
            }
            break; // If setItem succeeds, exit the loop
        } catch (e) {
            const cacheError = (0, _browser.createCacheError)(e);
            if (cacheError.errorCode === (0, _browser.CacheErrorCodes).cacheQuotaExceeded && i < maxRetries) {
                if (!accessTokenKeys.length) // If we are currently trying to set the token keys, use the value we're trying to set
                for(let i = 0; i <= (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION); i++){
                    const tokenKeys = this.getTokenKeys(i).accessToken;
                    accessTokenKeys.push(...tokenKeys);
                    tokenKeysCount[i] = tokenKeys.length;
                }
                if (accessTokenKeys.length <= i) // Nothing left to remove, rethrow the error
                throw cacheError;
                // When cache quota is exceeded, start removing access tokens until we can successfully set the item
                this.removeAccessToken(accessTokenKeys[i], correlationId, false // Don't save token keys yet, do it at the end
                );
            } else // If the error is not a quota exceeded error, rethrow it
            throw cacheError;
        }
    }
    /**
     * Reads account from cache, deserializes it into an account entity and returns it.
     * If account is not found from the key, returns null and removes key from map.
     * @param accountKey
     * @returns
     */ getAccount(accountKey, correlationId) {
        this.logger.trace("BrowserCacheManager.getAccount called");
        const serializedAccount = this.browserStorage.getUserData(accountKey);
        if (!serializedAccount) {
            this.removeAccountKeyFromMap(accountKey, correlationId);
            return null;
        }
        const parsedAccount = this.validateAndParseJson(serializedAccount);
        if (!parsedAccount || !(0, _browser.AccountEntity).isAccountEntity(parsedAccount)) return null;
        return (0, _browser.CacheManager).toObject(new (0, _browser.AccountEntity)(), parsedAccount);
    }
    /**
     * set account entity in the platform cache
     * @param account
     */ async setAccount(account, correlationId, kmsi) {
        this.logger.trace("BrowserCacheManager.setAccount called");
        const key = this.generateAccountKey((0, _browser.AccountEntity).getAccountInfo(account));
        const timestamp = Date.now().toString();
        account.lastUpdatedAt = timestamp;
        await this.setUserData(key, JSON.stringify(account), correlationId, timestamp, kmsi);
        const wasAdded = this.addAccountKeyToMap(key, correlationId);
        this.performanceClient.addFields({
            kmsi: kmsi
        }, correlationId);
        /**
         * @deprecated - Remove this in next major version in favor of more consistent LOGIN event
         */ if (this.cacheConfig.cacheLocation === (0, _browserConstantsMjs.BrowserCacheLocation).LocalStorage && wasAdded) this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACCOUNT_ADDED, undefined, (0, _browser.AccountEntity).getAccountInfo(account));
    }
    /**
     * Returns the array of account keys currently cached
     * @returns
     */ getAccountKeys() {
        return (0, _cacheHelpersMjs.getAccountKeys)(this.browserStorage);
    }
    setAccountKeys(accountKeys, correlationId, schemaVersion = (0, _cacheKeysMjs.ACCOUNT_SCHEMA_VERSION)) {
        if (accountKeys.length === 0) this.removeItem((0, _cacheKeysMjs.getAccountKeysCacheKey)(schemaVersion));
        else this.setItem((0, _cacheKeysMjs.getAccountKeysCacheKey)(schemaVersion), JSON.stringify(accountKeys), correlationId);
    }
    /**
     * Add a new account to the key map
     * @param key
     */ addAccountKeyToMap(key, correlationId) {
        this.logger.trace("BrowserCacheManager.addAccountKeyToMap called");
        this.logger.tracePii(`BrowserCacheManager.addAccountKeyToMap called with key: ${key}`);
        const accountKeys = this.getAccountKeys();
        if (accountKeys.indexOf(key) === -1) {
            // Only add key if it does not already exist in the map
            accountKeys.push(key);
            this.setItem((0, _cacheKeysMjs.getAccountKeysCacheKey)(), JSON.stringify(accountKeys), correlationId);
            this.logger.verbose("BrowserCacheManager.addAccountKeyToMap account key added");
            return true;
        } else {
            this.logger.verbose("BrowserCacheManager.addAccountKeyToMap account key already exists in map");
            return false;
        }
    }
    /**
     * Remove an account from the key map
     * @param key
     */ removeAccountKeyFromMap(key, correlationId) {
        this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap called");
        this.logger.tracePii(`BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`);
        const accountKeys = this.getAccountKeys();
        const removalIndex = accountKeys.indexOf(key);
        if (removalIndex > -1) {
            accountKeys.splice(removalIndex, 1);
            this.setAccountKeys(accountKeys, correlationId);
            this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap account key removed");
        } else this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap key not found in existing map");
    }
    /**
     * Extends inherited removeAccount function to include removal of the account key from the map
     * @param key
     */ removeAccount(account, correlationId) {
        const activeAccount = this.getActiveAccount(correlationId);
        if (activeAccount?.homeAccountId === account.homeAccountId && activeAccount?.environment === account.environment) this.setActiveAccount(null, correlationId);
        super.removeAccount(account, correlationId);
        this.removeAccountKeyFromMap(this.generateAccountKey(account), correlationId);
        // Remove all other associated cache items
        this.browserStorage.getKeys().forEach((key)=>{
            if (key.includes(account.homeAccountId) && key.includes(account.environment)) this.browserStorage.removeItem(key);
        });
        /**
         * @deprecated - Remove this in next major version in favor of more consistent LOGOUT event
         */ if (this.cacheConfig.cacheLocation === (0, _browserConstantsMjs.BrowserCacheLocation).LocalStorage) this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACCOUNT_REMOVED, undefined, account);
    }
    /**
     * Removes given idToken from the cache and from the key map
     * @param key
     */ removeIdToken(key, correlationId) {
        super.removeIdToken(key, correlationId);
        const tokenKeys = this.getTokenKeys();
        const idRemoval = tokenKeys.idToken.indexOf(key);
        if (idRemoval > -1) {
            this.logger.info("idToken removed from tokenKeys map");
            tokenKeys.idToken.splice(idRemoval, 1);
            this.setTokenKeys(tokenKeys, correlationId);
        }
    }
    /**
     * Removes given accessToken from the cache and from the key map
     * @param key
     */ removeAccessToken(key, correlationId, updateTokenKeys = true) {
        super.removeAccessToken(key, correlationId);
        updateTokenKeys && this.removeAccessTokenKeys([
            key
        ], correlationId);
    }
    /**
     * Remove access token key from the key map
     * @param key
     * @param correlationId
     * @param tokenKeys
     */ removeAccessTokenKeys(keys, correlationId, schemaVersion = (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION)) {
        this.logger.trace("removeAccessTokenKey called");
        const tokenKeys = this.getTokenKeys(schemaVersion);
        let keysRemoved = 0;
        keys.forEach((key)=>{
            const accessRemoval = tokenKeys.accessToken.indexOf(key);
            if (accessRemoval > -1) {
                tokenKeys.accessToken.splice(accessRemoval, 1);
                keysRemoved++;
            }
        });
        if (keysRemoved > 0) {
            this.logger.info(`removed ${keysRemoved} accessToken keys from tokenKeys map`);
            this.setTokenKeys(tokenKeys, correlationId, schemaVersion);
            return;
        }
    }
    /**
     * Removes given refreshToken from the cache and from the key map
     * @param key
     */ removeRefreshToken(key, correlationId) {
        super.removeRefreshToken(key, correlationId);
        const tokenKeys = this.getTokenKeys();
        const refreshRemoval = tokenKeys.refreshToken.indexOf(key);
        if (refreshRemoval > -1) {
            this.logger.info("refreshToken removed from tokenKeys map");
            tokenKeys.refreshToken.splice(refreshRemoval, 1);
            this.setTokenKeys(tokenKeys, correlationId);
        }
    }
    /**
     * Gets the keys for the cached tokens associated with this clientId
     * @returns
     */ getTokenKeys(schemaVersion = (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION)) {
        return (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this.browserStorage, schemaVersion);
    }
    /**
     * Stores the token keys in the cache
     * @param tokenKeys
     * @param correlationId
     * @returns
     */ setTokenKeys(tokenKeys, correlationId, schemaVersion = (0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION)) {
        if (tokenKeys.idToken.length === 0 && tokenKeys.accessToken.length === 0 && tokenKeys.refreshToken.length === 0) {
            // If no keys left, remove the map
            this.removeItem((0, _cacheKeysMjs.getTokenKeysCacheKey)(this.clientId, schemaVersion));
            return;
        } else this.setItem((0, _cacheKeysMjs.getTokenKeysCacheKey)(this.clientId, schemaVersion), JSON.stringify(tokenKeys), correlationId);
    }
    /**
     * generates idToken entity from a string
     * @param idTokenKey
     */ getIdTokenCredential(idTokenKey, correlationId) {
        const value = this.browserStorage.getUserData(idTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
            this.removeIdToken(idTokenKey, correlationId);
            return null;
        }
        const parsedIdToken = this.validateAndParseJson(value);
        if (!parsedIdToken || !(0, _browser.CacheHelpers).isIdTokenEntity(parsedIdToken)) {
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getIdTokenCredential: cache hit");
        return parsedIdToken;
    }
    /**
     * set IdToken credential to the platform cache
     * @param idToken
     */ async setIdTokenCredential(idToken, correlationId, kmsi) {
        this.logger.trace("BrowserCacheManager.setIdTokenCredential called");
        const idTokenKey = this.generateCredentialKey(idToken);
        const timestamp = Date.now().toString();
        idToken.lastUpdatedAt = timestamp;
        await this.setUserData(idTokenKey, JSON.stringify(idToken), correlationId, timestamp, kmsi);
        const tokenKeys = this.getTokenKeys();
        if (tokenKeys.idToken.indexOf(idTokenKey) === -1) {
            this.logger.info("BrowserCacheManager: addTokenKey - idToken added to map");
            tokenKeys.idToken.push(idTokenKey);
            this.setTokenKeys(tokenKeys, correlationId);
        }
    }
    /**
     * generates accessToken entity from a string
     * @param key
     */ getAccessTokenCredential(accessTokenKey, correlationId) {
        const value = this.browserStorage.getUserData(accessTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
            this.removeAccessTokenKeys([
                accessTokenKey
            ], correlationId);
            return null;
        }
        const parsedAccessToken = this.validateAndParseJson(value);
        if (!parsedAccessToken || !(0, _browser.CacheHelpers).isAccessTokenEntity(parsedAccessToken)) {
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getAccessTokenCredential: cache hit");
        return parsedAccessToken;
    }
    /**
     * set accessToken credential to the platform cache
     * @param accessToken
     */ async setAccessTokenCredential(accessToken, correlationId, kmsi) {
        this.logger.trace("BrowserCacheManager.setAccessTokenCredential called");
        const accessTokenKey = this.generateCredentialKey(accessToken);
        const timestamp = Date.now().toString();
        accessToken.lastUpdatedAt = timestamp;
        await this.setUserData(accessTokenKey, JSON.stringify(accessToken), correlationId, timestamp, kmsi);
        const tokenKeys = this.getTokenKeys();
        const index = tokenKeys.accessToken.indexOf(accessTokenKey);
        if (index !== -1) tokenKeys.accessToken.splice(index, 1); // Remove existing key before pushing to the end
        this.logger.trace(`access token ${index === -1 ? "added to" : "updated in"} map`);
        tokenKeys.accessToken.push(accessTokenKey);
        this.setTokenKeys(tokenKeys, correlationId);
    }
    /**
     * generates refreshToken entity from a string
     * @param refreshTokenKey
     */ getRefreshTokenCredential(refreshTokenKey, correlationId) {
        const value = this.browserStorage.getUserData(refreshTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
            this.removeRefreshToken(refreshTokenKey, correlationId);
            return null;
        }
        const parsedRefreshToken = this.validateAndParseJson(value);
        if (!parsedRefreshToken || !(0, _browser.CacheHelpers).isRefreshTokenEntity(parsedRefreshToken)) {
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: cache hit");
        return parsedRefreshToken;
    }
    /**
     * set refreshToken credential to the platform cache
     * @param refreshToken
     */ async setRefreshTokenCredential(refreshToken, correlationId, kmsi) {
        this.logger.trace("BrowserCacheManager.setRefreshTokenCredential called");
        const refreshTokenKey = this.generateCredentialKey(refreshToken);
        const timestamp = Date.now().toString();
        refreshToken.lastUpdatedAt = timestamp;
        await this.setUserData(refreshTokenKey, JSON.stringify(refreshToken), correlationId, timestamp, kmsi);
        const tokenKeys = this.getTokenKeys();
        if (tokenKeys.refreshToken.indexOf(refreshTokenKey) === -1) {
            this.logger.info("BrowserCacheManager: addTokenKey - refreshToken added to map");
            tokenKeys.refreshToken.push(refreshTokenKey);
            this.setTokenKeys(tokenKeys, correlationId);
        }
    }
    /**
     * fetch appMetadata entity from the platform cache
     * @param appMetadataKey
     */ getAppMetadata(appMetadataKey) {
        const value = this.browserStorage.getItem(appMetadataKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
            return null;
        }
        const parsedMetadata = this.validateAndParseJson(value);
        if (!parsedMetadata || !(0, _browser.CacheHelpers).isAppMetadataEntity(appMetadataKey, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getAppMetadata: cache hit");
        return parsedMetadata;
    }
    /**
     * set appMetadata entity to the platform cache
     * @param appMetadata
     */ setAppMetadata(appMetadata, correlationId) {
        this.logger.trace("BrowserCacheManager.setAppMetadata called");
        const appMetadataKey = (0, _browser.CacheHelpers).generateAppMetadataKey(appMetadata);
        this.setItem(appMetadataKey, JSON.stringify(appMetadata), correlationId);
    }
    /**
     * fetch server telemetry entity from the platform cache
     * @param serverTelemetryKey
     */ getServerTelemetry(serverTelemetryKey) {
        const value = this.browserStorage.getItem(serverTelemetryKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
            return null;
        }
        const parsedEntity = this.validateAndParseJson(value);
        if (!parsedEntity || !(0, _browser.CacheHelpers).isServerTelemetryEntity(serverTelemetryKey, parsedEntity)) {
            this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getServerTelemetry: cache hit");
        return parsedEntity;
    }
    /**
     * set server telemetry entity to the platform cache
     * @param serverTelemetryKey
     * @param serverTelemetry
     */ setServerTelemetry(serverTelemetryKey, serverTelemetry, correlationId) {
        this.logger.trace("BrowserCacheManager.setServerTelemetry called");
        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry), correlationId);
    }
    /**
     *
     */ getAuthorityMetadata(key) {
        const value = this.internalStorage.getItem(key);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAuthorityMetadata: called, no cache hit");
            return null;
        }
        const parsedMetadata = this.validateAndParseJson(value);
        if (parsedMetadata && (0, _browser.CacheHelpers).isAuthorityMetadataEntity(key, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getAuthorityMetadata: cache hit");
            return parsedMetadata;
        }
        return null;
    }
    /**
     *
     */ getAuthorityMetadataKeys() {
        const allKeys = this.internalStorage.getKeys();
        return allKeys.filter((key)=>{
            return this.isAuthorityMetadata(key);
        });
    }
    /**
     * Sets wrapper metadata in memory
     * @param wrapperSKU
     * @param wrapperVersion
     */ setWrapperMetadata(wrapperSKU, wrapperVersion) {
        this.internalStorage.setItem((0, _browserConstantsMjs.InMemoryCacheKeys).WRAPPER_SKU, wrapperSKU);
        this.internalStorage.setItem((0, _browserConstantsMjs.InMemoryCacheKeys).WRAPPER_VER, wrapperVersion);
    }
    /**
     * Returns wrapper metadata from in-memory storage
     */ getWrapperMetadata() {
        const sku = this.internalStorage.getItem((0, _browserConstantsMjs.InMemoryCacheKeys).WRAPPER_SKU) || (0, _browser.Constants).EMPTY_STRING;
        const version = this.internalStorage.getItem((0, _browserConstantsMjs.InMemoryCacheKeys).WRAPPER_VER) || (0, _browser.Constants).EMPTY_STRING;
        return [
            sku,
            version
        ];
    }
    /**
     *
     * @param entity
     */ setAuthorityMetadata(key, entity) {
        this.logger.trace("BrowserCacheManager.setAuthorityMetadata called");
        this.internalStorage.setItem(key, JSON.stringify(entity));
    }
    /**
     * Gets the active account
     */ getActiveAccount(correlationId) {
        const activeAccountKeyFilters = this.generateCacheKey((0, _browser.PersistentCacheKeys).ACTIVE_ACCOUNT_FILTERS);
        const activeAccountValueFilters = this.browserStorage.getItem(activeAccountKeyFilters);
        if (!activeAccountValueFilters) {
            this.logger.trace("BrowserCacheManager.getActiveAccount: No active account filters found");
            return null;
        }
        const activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);
        if (activeAccountValueObj) {
            this.logger.trace("BrowserCacheManager.getActiveAccount: Active account filters schema found");
            return this.getAccountInfoFilteredBy({
                homeAccountId: activeAccountValueObj.homeAccountId,
                localAccountId: activeAccountValueObj.localAccountId,
                tenantId: activeAccountValueObj.tenantId
            }, correlationId);
        }
        this.logger.trace("BrowserCacheManager.getActiveAccount: No active account found");
        return null;
    }
    /**
     * Sets the active account's localAccountId in cache
     * @param account
     */ setActiveAccount(account, correlationId) {
        const activeAccountKey = this.generateCacheKey((0, _browser.PersistentCacheKeys).ACTIVE_ACCOUNT_FILTERS);
        if (account) {
            this.logger.verbose("setActiveAccount: Active account set");
            const activeAccountValue = {
                homeAccountId: account.homeAccountId,
                localAccountId: account.localAccountId,
                tenantId: account.tenantId,
                lastUpdatedAt: (0, _browser.TimeUtils).nowSeconds().toString()
            };
            this.setItem(activeAccountKey, JSON.stringify(activeAccountValue), correlationId);
        } else {
            this.logger.verbose("setActiveAccount: No account passed, active account not set");
            this.browserStorage.removeItem(activeAccountKey);
        }
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACTIVE_ACCOUNT_CHANGED);
    }
    /**
     * fetch throttling entity from the platform cache
     * @param throttlingCacheKey
     */ getThrottlingCache(throttlingCacheKey) {
        const value = this.browserStorage.getItem(throttlingCacheKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
            return null;
        }
        const parsedThrottlingCache = this.validateAndParseJson(value);
        if (!parsedThrottlingCache || !(0, _browser.CacheHelpers).isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {
            this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getThrottlingCache: cache hit");
        return parsedThrottlingCache;
    }
    /**
     * set throttling entity to the platform cache
     * @param throttlingCacheKey
     * @param throttlingCache
     */ setThrottlingCache(throttlingCacheKey, throttlingCache, correlationId) {
        this.logger.trace("BrowserCacheManager.setThrottlingCache called");
        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache), correlationId);
    }
    /**
     * Gets cache item with given key.
     * Will retrieve from cookies if storeAuthStateInCookie is set to true.
     * @param key
     */ getTemporaryCache(cacheKey, generateKey) {
        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
        if (this.cacheConfig.storeAuthStateInCookie) {
            const itemCookie = this.cookieStorage.getItem(key);
            if (itemCookie) {
                this.logger.trace("BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies");
                return itemCookie;
            }
        }
        const value = this.temporaryCacheStorage.getItem(key);
        if (!value) {
            // If temp cache item not found in session/memory, check local storage for items set by old versions
            if (this.cacheConfig.cacheLocation === (0, _browserConstantsMjs.BrowserCacheLocation).LocalStorage) {
                const item = this.browserStorage.getItem(key);
                if (item) {
                    this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage");
                    return item;
                }
            }
            this.logger.trace("BrowserCacheManager.getTemporaryCache: No cache item found in local storage");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item returned");
        return value;
    }
    /**
     * Sets the cache item with the key and value given.
     * Stores in cookie if storeAuthStateInCookie is set to true.
     * This can cause cookie overflow if used incorrectly.
     * @param key
     * @param value
     */ setTemporaryCache(cacheKey, value, generateKey) {
        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
        this.temporaryCacheStorage.setItem(key, value);
        if (this.cacheConfig.storeAuthStateInCookie) {
            this.logger.trace("BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie");
            this.cookieStorage.setItem(key, value, undefined, this.cacheConfig.secureCookies);
        }
    }
    /**
     * Removes the cache item with the given key.
     * @param key
     */ removeItem(key) {
        this.browserStorage.removeItem(key);
    }
    /**
     * Removes the temporary cache item with the given key.
     * Will also clear the cookie item if storeAuthStateInCookie is set to true.
     * @param key
     */ removeTemporaryItem(key) {
        this.temporaryCacheStorage.removeItem(key);
        if (this.cacheConfig.storeAuthStateInCookie) {
            this.logger.trace("BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie");
            this.cookieStorage.removeItem(key);
        }
    }
    /**
     * Gets all keys in window.
     */ getKeys() {
        return this.browserStorage.getKeys();
    }
    /**
     * Clears all cache entries created by MSAL.
     */ clear(correlationId) {
        // Removes all accounts and their credentials
        this.removeAllAccounts(correlationId);
        this.removeAppMetadata(correlationId);
        // Remove temp storage first to make sure any cookies are cleared
        this.temporaryCacheStorage.getKeys().forEach((cacheKey)=>{
            if (cacheKey.indexOf((0, _cacheKeysMjs.PREFIX)) !== -1 || cacheKey.indexOf(this.clientId) !== -1) this.removeTemporaryItem(cacheKey);
        });
        // Removes all remaining MSAL cache items
        this.browserStorage.getKeys().forEach((cacheKey)=>{
            if (cacheKey.indexOf((0, _cacheKeysMjs.PREFIX)) !== -1 || cacheKey.indexOf(this.clientId) !== -1) this.browserStorage.removeItem(cacheKey);
        });
        this.internalStorage.clear();
    }
    /**
     * Clears all access tokes that have claims prior to saving the current one
     * @param performanceClient {IPerformanceClient}
     * @param correlationId {string} correlation id
     * @returns
     */ clearTokensAndKeysWithClaims(correlationId) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).ClearTokensAndKeysWithClaims, correlationId);
        const tokenKeys = this.getTokenKeys();
        let removedAccessTokens = 0;
        tokenKeys.accessToken.forEach((key)=>{
            // if the access token has claims in its key, remove the token key and the token
            const credential = this.getAccessTokenCredential(key, correlationId);
            if (credential?.requestedClaimsHash && key.includes(credential.requestedClaimsHash.toLowerCase())) {
                this.removeAccessToken(key, correlationId);
                removedAccessTokens++;
            }
        });
        // warn if any access tokens are removed
        if (removedAccessTokens > 0) this.logger.warning(`${removedAccessTokens} access tokens with claims in the cache keys have been removed from the cache.`);
    }
    /**
     * Prepend msal.<client-id> to each key
     * @param key
     * @param addInstanceId
     */ generateCacheKey(key) {
        if ((0, _browser.StringUtils).startsWith(key, (0, _cacheKeysMjs.PREFIX))) return key;
        return `${0, _cacheKeysMjs.PREFIX}.${this.clientId}.${key}`;
    }
    /**
     * Cache Key: msal.<schema_version>-<home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>
     * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com
     * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop
     * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com
     * @param credentialEntity
     * @returns
     */ generateCredentialKey(credential) {
        const familyId = credential.credentialType === (0, _browser.CredentialType).REFRESH_TOKEN && credential.familyId || credential.clientId;
        const scheme = credential.tokenType && credential.tokenType.toLowerCase() !== (0, _browser.AuthenticationScheme).BEARER.toLowerCase() ? credential.tokenType.toLowerCase() : "";
        const credentialKey = [
            `${(0, _cacheKeysMjs.PREFIX)}.${(0, _cacheKeysMjs.CREDENTIAL_SCHEMA_VERSION)}`,
            credential.homeAccountId,
            credential.environment,
            credential.credentialType,
            familyId,
            credential.realm || "",
            credential.target || "",
            credential.requestedClaimsHash || "",
            scheme
        ];
        return credentialKey.join((0, _cacheKeysMjs.CACHE_KEY_SEPARATOR)).toLowerCase();
    }
    /**
     * Cache Key: msal.<schema_version>.<home_account_id>.<environment>.<tenant_id>
     * @param account
     * @returns
     */ generateAccountKey(account) {
        const homeTenantId = account.homeAccountId.split(".")[1];
        const accountKey = [
            `${(0, _cacheKeysMjs.PREFIX)}.${(0, _cacheKeysMjs.ACCOUNT_SCHEMA_VERSION)}`,
            account.homeAccountId,
            account.environment,
            homeTenantId || account.tenantId || ""
        ];
        return accountKey.join((0, _cacheKeysMjs.CACHE_KEY_SEPARATOR)).toLowerCase();
    }
    /**
     * Reset all temporary cache items
     * @param state
     */ resetRequestCache() {
        this.logger.trace("BrowserCacheManager.resetRequestCache called");
        this.removeTemporaryItem(this.generateCacheKey((0, _browserConstantsMjs.TemporaryCacheKeys).REQUEST_PARAMS));
        this.removeTemporaryItem(this.generateCacheKey((0, _browserConstantsMjs.TemporaryCacheKeys).VERIFIER));
        this.removeTemporaryItem(this.generateCacheKey((0, _browserConstantsMjs.TemporaryCacheKeys).ORIGIN_URI));
        this.removeTemporaryItem(this.generateCacheKey((0, _browserConstantsMjs.TemporaryCacheKeys).URL_HASH));
        this.removeTemporaryItem(this.generateCacheKey((0, _browserConstantsMjs.TemporaryCacheKeys).NATIVE_REQUEST));
        this.setInteractionInProgress(false);
    }
    cacheAuthorizeRequest(authCodeRequest, codeVerifier) {
        this.logger.trace("BrowserCacheManager.cacheAuthorizeRequest called");
        const encodedValue = (0, _base64EncodeMjs.base64Encode)(JSON.stringify(authCodeRequest));
        this.setTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).REQUEST_PARAMS, encodedValue, true);
        if (codeVerifier) {
            const encodedVerifier = (0, _base64EncodeMjs.base64Encode)(codeVerifier);
            this.setTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).VERIFIER, encodedVerifier, true);
        }
    }
    /**
     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.
     */ getCachedRequest() {
        this.logger.trace("BrowserCacheManager.getCachedRequest called");
        // Get token request from cache and parse as TokenExchangeParameters.
        const encodedTokenRequest = this.getTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).REQUEST_PARAMS, true);
        if (!encodedTokenRequest) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.noTokenRequestCacheError));
        const encodedVerifier = this.getTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).VERIFIER, true);
        let parsedRequest;
        let verifier = "";
        try {
            parsedRequest = JSON.parse((0, _base64DecodeMjs.base64Decode)(encodedTokenRequest));
            if (encodedVerifier) verifier = (0, _base64DecodeMjs.base64Decode)(encodedVerifier);
        } catch (e) {
            this.logger.errorPii(`Attempted to parse: ${encodedTokenRequest}`);
            this.logger.error(`Parsing cached token request threw with error: ${e}`);
            throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.unableToParseTokenRequestCacheError));
        }
        return [
            parsedRequest,
            verifier
        ];
    }
    /**
     * Gets cached native request for redirect flows
     */ getCachedNativeRequest() {
        this.logger.trace("BrowserCacheManager.getCachedNativeRequest called");
        const cachedRequest = this.getTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).NATIVE_REQUEST, true);
        if (!cachedRequest) {
            this.logger.trace("BrowserCacheManager.getCachedNativeRequest: No cached native request found");
            return null;
        }
        const parsedRequest = this.validateAndParseJson(cachedRequest);
        if (!parsedRequest) {
            this.logger.error("BrowserCacheManager.getCachedNativeRequest: Unable to parse native request");
            return null;
        }
        return parsedRequest;
    }
    isInteractionInProgress(matchClientId) {
        const clientId = this.getInteractionInProgress()?.clientId;
        if (matchClientId) return clientId === this.clientId;
        else return !!clientId;
    }
    getInteractionInProgress() {
        const key = `${(0, _cacheKeysMjs.PREFIX)}.${(0, _browserConstantsMjs.TemporaryCacheKeys).INTERACTION_STATUS_KEY}`;
        const value = this.getTemporaryCache(key, false);
        try {
            return value ? JSON.parse(value) : null;
        } catch (e) {
            // Remove interaction and other temp keys if interaction status can't be parsed
            this.logger.error(`Cannot parse interaction status. Removing temporary cache items and clearing url hash. Retrying interaction should fix the error`);
            this.removeTemporaryItem(key);
            this.resetRequestCache();
            (0, _browserUtilsMjs.clearHash)(window);
            return null;
        }
    }
    setInteractionInProgress(inProgress, type = (0, _browserConstantsMjs.INTERACTION_TYPE).SIGNIN) {
        // Ensure we don't overwrite interaction in progress for a different clientId
        const key = `${(0, _cacheKeysMjs.PREFIX)}.${(0, _browserConstantsMjs.TemporaryCacheKeys).INTERACTION_STATUS_KEY}`;
        if (inProgress) {
            if (this.getInteractionInProgress()) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.interactionInProgress));
            else // No interaction is in progress
            this.setTemporaryCache(key, JSON.stringify({
                clientId: this.clientId,
                type
            }), false);
        } else if (!inProgress && this.getInteractionInProgress()?.clientId === this.clientId) this.removeTemporaryItem(key);
    }
    /**
     * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache
     * @param result
     * @param request
     */ async hydrateCache(result, request) {
        const idTokenEntity = (0, _browser.CacheHelpers).createIdTokenEntity(result.account?.homeAccountId, result.account?.environment, result.idToken, this.clientId, result.tenantId);
        let claimsHash;
        if (request.claims) claimsHash = await this.cryptoImpl.hashString(request.claims);
        /**
         * meta data for cache stores time in seconds from epoch
         * AuthenticationResult returns expiresOn and extExpiresOn in milliseconds (as a Date object which is in ms)
         * We need to map these for the cache when building tokens from AuthenticationResult
         *
         * The next MSAL VFuture should map these both to same value if possible
         */ const accessTokenEntity = (0, _browser.CacheHelpers).createAccessTokenEntity(result.account?.homeAccountId, result.account.environment, result.accessToken, this.clientId, result.tenantId, result.scopes.join(" "), // Access token expiresOn stored in seconds, converting from AuthenticationResult expiresOn stored as Date
        result.expiresOn ? (0, _browser.TimeUtils).toSecondsFromDate(result.expiresOn) : 0, result.extExpiresOn ? (0, _browser.TimeUtils).toSecondsFromDate(result.extExpiresOn) : 0, (0, _base64DecodeMjs.base64Decode), undefined, result.tokenType, undefined, request.sshKid, request.claims, claimsHash);
        const cacheRecord = {
            idToken: idTokenEntity,
            accessToken: accessTokenEntity
        };
        return this.saveCacheRecord(cacheRecord, result.correlationId, (0, _browser.AuthToken).isKmsi((0, _browser.AuthToken).extractTokenClaims(result.idToken, (0, _base64DecodeMjs.base64Decode))));
    }
    /**
     * saves a cache record
     * @param cacheRecord {CacheRecord}
     * @param storeInCache {?StoreInCache}
     * @param correlationId {?string} correlation id
     */ async saveCacheRecord(cacheRecord, correlationId, kmsi, storeInCache) {
        try {
            await super.saveCacheRecord(cacheRecord, correlationId, kmsi, storeInCache);
        } catch (e) {
            if (e instanceof (0, _browser.CacheError) && this.performanceClient && correlationId) try {
                const tokenKeys = this.getTokenKeys();
                this.performanceClient.addFields({
                    cacheRtCount: tokenKeys.refreshToken.length,
                    cacheIdCount: tokenKeys.idToken.length,
                    cacheAtCount: tokenKeys.accessToken.length
                }, correlationId);
            } catch (e) {}
            throw e;
        }
    }
}
/**
 * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.
 * @param cacheLocation
 */ function getStorageImplementation(clientId, cacheLocation, logger, performanceClient) {
    try {
        switch(cacheLocation){
            case (0, _browserConstantsMjs.BrowserCacheLocation).LocalStorage:
                return new (0, _localStorageMjs.LocalStorage)(clientId, logger, performanceClient);
            case (0, _browserConstantsMjs.BrowserCacheLocation).SessionStorage:
                return new (0, _sessionStorageMjs.SessionStorage)();
            case (0, _browserConstantsMjs.BrowserCacheLocation).MemoryStorage:
            default:
                break;
        }
    } catch (e) {
        logger.error(e);
    }
    return new (0, _memoryStorageMjs.MemoryStorage)();
}
const DEFAULT_BROWSER_CACHE_MANAGER = (clientId, logger, performanceClient, eventHandler)=>{
    const cacheOptions = {
        cacheLocation: (0, _browserConstantsMjs.BrowserCacheLocation).MemoryStorage,
        cacheRetentionDays: 5,
        temporaryCacheLocation: (0, _browserConstantsMjs.BrowserCacheLocation).MemoryStorage,
        storeAuthStateInCookie: false,
        secureCookies: false,
        cacheMigrationEnabled: false,
        claimsBasedCachingEnabled: false
    };
    return new BrowserCacheManager(clientId, cacheOptions, (0, _browser.DEFAULT_CRYPTO_IMPLEMENTATION), logger, performanceClient, eventHandler);
};

},{"@azure/msal-common/browser":"aaatw","../error/BrowserAuthError.mjs":"dg1Z3","../utils/BrowserConstants.mjs":"kJowt","./CacheKeys.mjs":"aZQPA","./LocalStorage.mjs":"b5jZ7","./SessionStorage.mjs":"i3Dzb","./MemoryStorage.mjs":"6BqHT","../encode/Base64Decode.mjs":"llQUH","../encode/Base64Encode.mjs":"bWn1N","./CookieStorage.mjs":"7WSw7","./CacheHelpers.mjs":"1UjHh","../event/EventType.mjs":"aw4MU","../utils/BrowserUtils.mjs":"77mxR","../packageMetadata.mjs":"5lj1t","../utils/Helpers.mjs":"5D1vh","./EncryptedData.mjs":"edzYr","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"b5jZ7":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LocalStorage", ()=>LocalStorage);
var _browser = require("@azure/msal-common/browser");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
var _base64DecodeMjs = require("../encode/Base64Decode.mjs");
var _base64EncodeMjs = require("../encode/Base64Encode.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserConfigurationAuthErrorMjs = require("../error/BrowserConfigurationAuthError.mjs");
var _cookieStorageMjs = require("./CookieStorage.mjs");
var _memoryStorageMjs = require("./MemoryStorage.mjs");
var _cacheHelpersMjs = require("./CacheHelpers.mjs");
var _cacheKeysMjs = require("./CacheKeys.mjs");
var _encryptedDataMjs = require("./EncryptedData.mjs");
var _browserConfigurationAuthErrorCodesMjs = require("../error/BrowserConfigurationAuthErrorCodes.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const ENCRYPTION_KEY = "msal.cache.encryption";
const BROADCAST_CHANNEL_NAME = "msal.broadcast.cache";
class LocalStorage {
    constructor(clientId, logger, performanceClient){
        if (!window.localStorage) throw (0, _browserConfigurationAuthErrorMjs.createBrowserConfigurationAuthError)((0, _browserConfigurationAuthErrorCodesMjs.storageNotSupported));
        this.memoryStorage = new (0, _memoryStorageMjs.MemoryStorage)();
        this.initialized = false;
        this.clientId = clientId;
        this.logger = logger;
        this.performanceClient = performanceClient;
        this.broadcast = new BroadcastChannel(BROADCAST_CHANNEL_NAME);
    }
    async initialize(correlationId) {
        const cookies = new (0, _cookieStorageMjs.CookieStorage)();
        const cookieString = cookies.getItem(ENCRYPTION_KEY);
        let parsedCookie = {
            key: "",
            id: ""
        };
        if (cookieString) try {
            parsedCookie = JSON.parse(cookieString);
        } catch (e) {}
        if (parsedCookie.key && parsedCookie.id) {
            // Encryption key already exists, import
            const baseKey = (0, _browser.invoke)((0, _base64DecodeMjs.base64DecToArr), (0, _browser.PerformanceEvents).Base64Decode, this.logger, this.performanceClient, correlationId)(parsedCookie.key);
            this.encryptionCookie = {
                id: parsedCookie.id,
                key: await (0, _browser.invokeAsync)((0, _browserCryptoMjs.generateHKDF), (0, _browser.PerformanceEvents).GenerateHKDF, this.logger, this.performanceClient, correlationId)(baseKey)
            };
        } else {
            // Encryption key doesn't exist or is invalid, generate a new one
            const id = (0, _browserCryptoMjs.createNewGuid)();
            const baseKey = await (0, _browser.invokeAsync)((0, _browserCryptoMjs.generateBaseKey), (0, _browser.PerformanceEvents).GenerateBaseKey, this.logger, this.performanceClient, correlationId)();
            const keyStr = (0, _browser.invoke)((0, _base64EncodeMjs.urlEncodeArr), (0, _browser.PerformanceEvents).UrlEncodeArr, this.logger, this.performanceClient, correlationId)(new Uint8Array(baseKey));
            this.encryptionCookie = {
                id: id,
                key: await (0, _browser.invokeAsync)((0, _browserCryptoMjs.generateHKDF), (0, _browser.PerformanceEvents).GenerateHKDF, this.logger, this.performanceClient, correlationId)(baseKey)
            };
            const cookieData = {
                id: id,
                key: keyStr
            };
            cookies.setItem(ENCRYPTION_KEY, JSON.stringify(cookieData), 0, true, (0, _cookieStorageMjs.SameSiteOptions).None // SameSite must be None to support iframed apps
            );
        }
        await (0, _browser.invokeAsync)(this.importExistingCache.bind(this), (0, _browser.PerformanceEvents).ImportExistingCache, this.logger, this.performanceClient, correlationId)(correlationId);
        // Register listener for cache updates in other tabs
        this.broadcast.addEventListener("message", this.updateCache.bind(this));
        this.initialized = true;
    }
    getItem(key) {
        return window.localStorage.getItem(key);
    }
    getUserData(key) {
        if (!this.initialized) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.uninitializedPublicClientApplication));
        return this.memoryStorage.getItem(key);
    }
    async decryptData(key, data, correlationId) {
        if (!this.initialized || !this.encryptionCookie) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.uninitializedPublicClientApplication));
        if (data.id !== this.encryptionCookie.id) {
            // Data was encrypted with a different key. It must be removed because it is from a previous session.
            this.performanceClient.incrementFields({
                encryptedCacheExpiredCount: 1
            }, correlationId);
            return null;
        }
        const decryptedData = await (0, _browser.invokeAsync)((0, _browserCryptoMjs.decrypt), (0, _browser.PerformanceEvents).Decrypt, this.logger, this.performanceClient, correlationId)(this.encryptionCookie.key, data.nonce, this.getContext(key), data.data);
        if (!decryptedData) return null;
        try {
            return {
                ...JSON.parse(decryptedData),
                lastUpdatedAt: data.lastUpdatedAt
            };
        } catch (e) {
            this.performanceClient.incrementFields({
                encryptedCacheCorruptionCount: 1
            }, correlationId);
            return null;
        }
    }
    setItem(key, value) {
        window.localStorage.setItem(key, value);
    }
    async setUserData(key, value, correlationId, timestamp, kmsi) {
        if (!this.initialized || !this.encryptionCookie) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.uninitializedPublicClientApplication));
        if (kmsi) this.setItem(key, value);
        else {
            const { data, nonce } = await (0, _browser.invokeAsync)((0, _browserCryptoMjs.encrypt), (0, _browser.PerformanceEvents).Encrypt, this.logger, this.performanceClient, correlationId)(this.encryptionCookie.key, value, this.getContext(key));
            const encryptedData = {
                id: this.encryptionCookie.id,
                nonce: nonce,
                data: data,
                lastUpdatedAt: timestamp
            };
            this.setItem(key, JSON.stringify(encryptedData));
        }
        this.memoryStorage.setItem(key, value);
        // Notify other frames to update their in-memory cache
        this.broadcast.postMessage({
            key: key,
            value: value,
            context: this.getContext(key)
        });
    }
    removeItem(key) {
        if (this.memoryStorage.containsKey(key)) {
            this.memoryStorage.removeItem(key);
            this.broadcast.postMessage({
                key: key,
                value: null,
                context: this.getContext(key)
            });
        }
        window.localStorage.removeItem(key);
    }
    getKeys() {
        return Object.keys(window.localStorage);
    }
    containsKey(key) {
        return window.localStorage.hasOwnProperty(key);
    }
    /**
     * Removes all known MSAL keys from the cache
     */ clear() {
        // Removes all remaining MSAL cache items
        this.memoryStorage.clear();
        const accountKeys = (0, _cacheHelpersMjs.getAccountKeys)(this);
        accountKeys.forEach((key)=>this.removeItem(key));
        const tokenKeys = (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this);
        tokenKeys.idToken.forEach((key)=>this.removeItem(key));
        tokenKeys.accessToken.forEach((key)=>this.removeItem(key));
        tokenKeys.refreshToken.forEach((key)=>this.removeItem(key));
        // Clean up anything left
        this.getKeys().forEach((cacheKey)=>{
            if (cacheKey.startsWith((0, _cacheKeysMjs.PREFIX)) || cacheKey.indexOf(this.clientId) !== -1) this.removeItem(cacheKey);
        });
    }
    /**
     * Helper to decrypt all known MSAL keys in localStorage and save them to inMemory storage
     * @returns
     */ async importExistingCache(correlationId) {
        if (!this.encryptionCookie) return;
        let accountKeys = (0, _cacheHelpersMjs.getAccountKeys)(this);
        accountKeys = await this.importArray(accountKeys, correlationId);
        // Write valid account keys back to map
        if (accountKeys.length) this.setItem((0, _cacheKeysMjs.getAccountKeysCacheKey)(), JSON.stringify(accountKeys));
        else this.removeItem((0, _cacheKeysMjs.getAccountKeysCacheKey)());
        const tokenKeys = (0, _cacheHelpersMjs.getTokenKeys)(this.clientId, this);
        tokenKeys.idToken = await this.importArray(tokenKeys.idToken, correlationId);
        tokenKeys.accessToken = await this.importArray(tokenKeys.accessToken, correlationId);
        tokenKeys.refreshToken = await this.importArray(tokenKeys.refreshToken, correlationId);
        // Write valid token keys back to map
        if (tokenKeys.idToken.length || tokenKeys.accessToken.length || tokenKeys.refreshToken.length) this.setItem((0, _cacheKeysMjs.getTokenKeysCacheKey)(this.clientId), JSON.stringify(tokenKeys));
        else this.removeItem((0, _cacheKeysMjs.getTokenKeysCacheKey)(this.clientId));
    }
    /**
     * Helper to decrypt and save cache entries
     * @param key
     * @returns
     */ async getItemFromEncryptedCache(key, correlationId) {
        if (!this.encryptionCookie) return null;
        const rawCache = this.getItem(key);
        if (!rawCache) return null;
        let encObj;
        try {
            encObj = JSON.parse(rawCache);
        } catch (e) {
            // Not a valid encrypted object, remove
            return null;
        }
        if (!(0, _encryptedDataMjs.isEncrypted)(encObj)) {
            // Data is not encrypted
            this.performanceClient.incrementFields({
                unencryptedCacheCount: 1
            }, correlationId);
            return rawCache;
        }
        if (encObj.id !== this.encryptionCookie.id) {
            // Data was encrypted with a different key. It must be removed because it is from a previous session.
            this.performanceClient.incrementFields({
                encryptedCacheExpiredCount: 1
            }, correlationId);
            return null;
        }
        this.performanceClient.incrementFields({
            encryptedCacheCount: 1
        }, correlationId);
        return (0, _browser.invokeAsync)((0, _browserCryptoMjs.decrypt), (0, _browser.PerformanceEvents).Decrypt, this.logger, this.performanceClient, correlationId)(this.encryptionCookie.key, encObj.nonce, this.getContext(key), encObj.data);
    }
    /**
     * Helper to decrypt and save an array of cache keys
     * @param arr
     * @returns Array of keys successfully imported
     */ async importArray(arr, correlationId) {
        const importedArr = [];
        const promiseArr = [];
        arr.forEach((key)=>{
            const promise = this.getItemFromEncryptedCache(key, correlationId).then((value)=>{
                if (value) {
                    this.memoryStorage.setItem(key, value);
                    importedArr.push(key);
                } else // If value is empty, unencrypted or expired remove
                this.removeItem(key);
            });
            promiseArr.push(promise);
        });
        await Promise.all(promiseArr);
        return importedArr;
    }
    /**
     * Gets encryption context for a given cache entry. This is clientId for app specific entries, empty string for shared entries
     * @param key
     * @returns
     */ getContext(key) {
        let context = "";
        if (key.includes(this.clientId)) context = this.clientId; // Used to bind encryption key to this appId
        return context;
    }
    updateCache(event) {
        this.logger.trace("Updating internal cache from broadcast event");
        const perfMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).LocalStorageUpdated);
        perfMeasurement.add({
            isBackground: true
        });
        const { key, value, context } = event.data;
        if (!key) {
            this.logger.error("Broadcast event missing key");
            perfMeasurement.end({
                success: false,
                errorCode: "noKey"
            });
            return;
        }
        if (context && context !== this.clientId) {
            this.logger.trace(`Ignoring broadcast event from clientId: ${context}`);
            perfMeasurement.end({
                success: false,
                errorCode: "contextMismatch"
            });
            return;
        }
        if (!value) {
            this.memoryStorage.removeItem(key);
            this.logger.verbose("Removed item from internal cache");
        } else {
            this.memoryStorage.setItem(key, value);
            this.logger.verbose("Updated item in internal cache");
        }
        perfMeasurement.end({
            success: true
        });
    }
}

},{"@azure/msal-common/browser":"aaatw","../crypto/BrowserCrypto.mjs":"8sZR9","../encode/Base64Decode.mjs":"llQUH","../encode/Base64Encode.mjs":"bWn1N","../error/BrowserAuthError.mjs":"dg1Z3","../error/BrowserConfigurationAuthError.mjs":"gAGzP","./CookieStorage.mjs":"7WSw7","./MemoryStorage.mjs":"6BqHT","./CacheHelpers.mjs":"1UjHh","./CacheKeys.mjs":"aZQPA","./EncryptedData.mjs":"edzYr","../error/BrowserConfigurationAuthErrorCodes.mjs":"1PmN9","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7WSw7":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CookieStorage", ()=>CookieStorage);
parcelHelpers.export(exports, "SameSiteOptions", ()=>SameSiteOptions);
parcelHelpers.export(exports, "getCookieExpirationTime", ()=>getCookieExpirationTime);
var _browser = require("@azure/msal-common/browser");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Cookie life calculation (hours * minutes * seconds * ms)
const COOKIE_LIFE_MULTIPLIER = 86400000;
const SameSiteOptions = {
    Lax: "Lax",
    None: "None"
};
class CookieStorage {
    initialize() {
        return Promise.resolve();
    }
    getItem(key) {
        const name = `${encodeURIComponent(key)}`;
        const cookieList = document.cookie.split(";");
        for(let i = 0; i < cookieList.length; i++){
            const cookie = cookieList[i];
            const [key, ...rest] = decodeURIComponent(cookie).trim().split("=");
            const value = rest.join("=");
            if (key === name) return value;
        }
        return "";
    }
    getUserData() {
        throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).methodNotImplemented);
    }
    setItem(key, value, cookieLifeDays, secure = true, sameSite = SameSiteOptions.Lax) {
        let cookieStr = `${encodeURIComponent(key)}=${encodeURIComponent(value)};path=/;SameSite=${sameSite};`;
        if (cookieLifeDays) {
            const expireTime = getCookieExpirationTime(cookieLifeDays);
            cookieStr += `expires=${expireTime};`;
        }
        if (secure || sameSite === SameSiteOptions.None) // SameSite None requires Secure flag
        cookieStr += "Secure;";
        document.cookie = cookieStr;
    }
    async setUserData() {
        return Promise.reject((0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).methodNotImplemented));
    }
    removeItem(key) {
        // Setting expiration to -1 removes it
        this.setItem(key, "", -1);
    }
    getKeys() {
        const cookieList = document.cookie.split(";");
        const keys = [];
        cookieList.forEach((cookie)=>{
            const cookieParts = decodeURIComponent(cookie).trim().split("=");
            keys.push(cookieParts[0]);
        });
        return keys;
    }
    containsKey(key) {
        return this.getKeys().includes(key);
    }
    decryptData() {
        // Cookie storage does not support encryption, so this method is a no-op
        return Promise.resolve(null);
    }
}
/**
 * Get cookie expiration time
 * @param cookieLifeDays
 */ function getCookieExpirationTime(cookieLifeDays) {
    const today = new Date();
    const expr = new Date(today.getTime() + cookieLifeDays * COOKIE_LIFE_MULTIPLIER);
    return expr.toUTCString();
}

},{"@azure/msal-common/browser":"aaatw","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"1UjHh":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAccountKeys", ()=>getAccountKeys);
parcelHelpers.export(exports, "getTokenKeys", ()=>getTokenKeys);
var _cacheKeysMjs = require("./CacheKeys.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Returns a list of cache keys for all known accounts
 * @param storage
 * @returns
 */ function getAccountKeys(storage, schemaVersion) {
    const accountKeys = storage.getItem((0, _cacheKeysMjs.getAccountKeysCacheKey)(schemaVersion));
    if (accountKeys) return JSON.parse(accountKeys);
    return [];
}
/**
 * Returns a list of cache keys for all known tokens
 * @param clientId
 * @param storage
 * @returns
 */ function getTokenKeys(clientId, storage, schemaVersion) {
    const item = storage.getItem((0, _cacheKeysMjs.getTokenKeysCacheKey)(clientId, schemaVersion));
    if (item) {
        const tokenKeys = JSON.parse(item);
        if (tokenKeys && tokenKeys.hasOwnProperty("idToken") && tokenKeys.hasOwnProperty("accessToken") && tokenKeys.hasOwnProperty("refreshToken")) return tokenKeys;
    }
    return {
        idToken: [],
        accessToken: [],
        refreshToken: []
    };
}

},{"./CacheKeys.mjs":"aZQPA","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"edzYr":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isEncrypted", ()=>isEncrypted);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function isEncrypted(data) {
    return data.hasOwnProperty("id") && data.hasOwnProperty("nonce") && data.hasOwnProperty("data");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"i3Dzb":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SessionStorage", ()=>SessionStorage);
var _browserConfigurationAuthErrorMjs = require("../error/BrowserConfigurationAuthError.mjs");
var _browserConfigurationAuthErrorCodesMjs = require("../error/BrowserConfigurationAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class SessionStorage {
    constructor(){
        if (!window.sessionStorage) throw (0, _browserConfigurationAuthErrorMjs.createBrowserConfigurationAuthError)((0, _browserConfigurationAuthErrorCodesMjs.storageNotSupported));
    }
    async initialize() {
    // Session storage does not require initialization
    }
    getItem(key) {
        return window.sessionStorage.getItem(key);
    }
    getUserData(key) {
        return this.getItem(key);
    }
    setItem(key, value) {
        window.sessionStorage.setItem(key, value);
    }
    async setUserData(key, value) {
        this.setItem(key, value);
    }
    removeItem(key) {
        window.sessionStorage.removeItem(key);
    }
    getKeys() {
        return Object.keys(window.sessionStorage);
    }
    containsKey(key) {
        return window.sessionStorage.hasOwnProperty(key);
    }
    decryptData() {
        // Session storage does not support encryption, so this method is a no-op
        return Promise.resolve(null);
    }
}

},{"../error/BrowserConfigurationAuthError.mjs":"gAGzP","../error/BrowserConfigurationAuthErrorCodes.mjs":"1PmN9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"aw4MU":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventType", ()=>EventType);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const EventType = {
    INITIALIZE_START: "msal:initializeStart",
    INITIALIZE_END: "msal:initializeEnd",
    ACCOUNT_ADDED: "msal:accountAdded",
    ACCOUNT_REMOVED: "msal:accountRemoved",
    ACTIVE_ACCOUNT_CHANGED: "msal:activeAccountChanged",
    LOGIN_START: "msal:loginStart",
    LOGIN_SUCCESS: "msal:loginSuccess",
    LOGIN_FAILURE: "msal:loginFailure",
    ACQUIRE_TOKEN_START: "msal:acquireTokenStart",
    ACQUIRE_TOKEN_SUCCESS: "msal:acquireTokenSuccess",
    ACQUIRE_TOKEN_FAILURE: "msal:acquireTokenFailure",
    ACQUIRE_TOKEN_NETWORK_START: "msal:acquireTokenFromNetworkStart",
    SSO_SILENT_START: "msal:ssoSilentStart",
    SSO_SILENT_SUCCESS: "msal:ssoSilentSuccess",
    SSO_SILENT_FAILURE: "msal:ssoSilentFailure",
    ACQUIRE_TOKEN_BY_CODE_START: "msal:acquireTokenByCodeStart",
    ACQUIRE_TOKEN_BY_CODE_SUCCESS: "msal:acquireTokenByCodeSuccess",
    ACQUIRE_TOKEN_BY_CODE_FAILURE: "msal:acquireTokenByCodeFailure",
    HANDLE_REDIRECT_START: "msal:handleRedirectStart",
    HANDLE_REDIRECT_END: "msal:handleRedirectEnd",
    POPUP_OPENED: "msal:popupOpened",
    LOGOUT_START: "msal:logoutStart",
    LOGOUT_SUCCESS: "msal:logoutSuccess",
    LOGOUT_FAILURE: "msal:logoutFailure",
    LOGOUT_END: "msal:logoutEnd",
    RESTORE_FROM_BFCACHE: "msal:restoreFromBFCache",
    BROKER_CONNECTION_ESTABLISHED: "msal:brokerConnectionEstablished"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"5D1vh":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "removeElementFromArray", ()=>removeElementFromArray);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Utility function to remove an element from an array in place.
 * @param array - The array from which to remove the element.
 * @param element - The element to remove from the array.
 */ function removeElementFromArray(array, element) {
    const index = array.indexOf(element);
    if (index > -1) array.splice(index, 1);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"6Nrot":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAccount", ()=>getAccount);
parcelHelpers.export(exports, "getAccountByHomeId", ()=>getAccountByHomeId);
parcelHelpers.export(exports, "getAccountByLocalId", ()=>getAccountByLocalId);
parcelHelpers.export(exports, "getAccountByUsername", ()=>getAccountByUsername);
parcelHelpers.export(exports, "getActiveAccount", ()=>getActiveAccount);
parcelHelpers.export(exports, "getAllAccounts", ()=>getAllAccounts);
parcelHelpers.export(exports, "setActiveAccount", ()=>setActiveAccount);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.
 * @param accountFilter - (Optional) filter to narrow down the accounts returned
 * @returns Array of AccountInfo objects in cache
 */ function getAllAccounts(logger, browserStorage, isInBrowser, correlationId, accountFilter) {
    logger.verbose("getAllAccounts called");
    return isInBrowser ? browserStorage.getAllAccounts(accountFilter || {}, correlationId) : [];
}
/**
 * Returns the first account found in the cache that matches the account filter passed in.
 * @param accountFilter
 * @returns The first account found in the cache matching the provided filter or null if no account could be found.
 */ function getAccount(accountFilter, logger, browserStorage, correlationId) {
    const account = browserStorage.getAccountInfoFilteredBy(accountFilter, correlationId);
    if (account) {
        logger.verbose("getAccount: Account matching provided filter found, returning");
        return account;
    } else {
        logger.verbose("getAccount: No matching account found, returning null");
        return null;
    }
}
/**
 * Returns the signed in account matching username.
 * (the account object is created at the time of successful login)
 * or null when no matching account is found.
 * This API is provided for convenience but getAccountById should be used for best reliability
 * @param username
 * @returns The account object stored in MSAL
 */ function getAccountByUsername(username, logger, browserStorage, correlationId) {
    logger.trace("getAccountByUsername called");
    if (!username) {
        logger.warning("getAccountByUsername: No username provided");
        return null;
    }
    const account = browserStorage.getAccountInfoFilteredBy({
        username
    }, correlationId);
    if (account) {
        logger.verbose("getAccountByUsername: Account matching username found, returning");
        logger.verbosePii(`getAccountByUsername: Returning signed-in accounts matching username: ${username}`);
        return account;
    } else {
        logger.verbose("getAccountByUsername: No matching account found, returning null");
        return null;
    }
}
/**
 * Returns the signed in account matching homeAccountId.
 * (the account object is created at the time of successful login)
 * or null when no matching account is found
 * @param homeAccountId
 * @returns The account object stored in MSAL
 */ function getAccountByHomeId(homeAccountId, logger, browserStorage, correlationId) {
    logger.trace("getAccountByHomeId called");
    if (!homeAccountId) {
        logger.warning("getAccountByHomeId: No homeAccountId provided");
        return null;
    }
    const account = browserStorage.getAccountInfoFilteredBy({
        homeAccountId
    }, correlationId);
    if (account) {
        logger.verbose("getAccountByHomeId: Account matching homeAccountId found, returning");
        logger.verbosePii(`getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${homeAccountId}`);
        return account;
    } else {
        logger.verbose("getAccountByHomeId: No matching account found, returning null");
        return null;
    }
}
/**
 * Returns the signed in account matching localAccountId.
 * (the account object is created at the time of successful login)
 * or null when no matching account is found
 * @param localAccountId
 * @returns The account object stored in MSAL
 */ function getAccountByLocalId(localAccountId, logger, browserStorage, correlationId) {
    logger.trace("getAccountByLocalId called");
    if (!localAccountId) {
        logger.warning("getAccountByLocalId: No localAccountId provided");
        return null;
    }
    const account = browserStorage.getAccountInfoFilteredBy({
        localAccountId
    }, correlationId);
    if (account) {
        logger.verbose("getAccountByLocalId: Account matching localAccountId found, returning");
        logger.verbosePii(`getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${localAccountId}`);
        return account;
    } else {
        logger.verbose("getAccountByLocalId: No matching account found, returning null");
        return null;
    }
}
/**
 * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
 * @param account
 */ function setActiveAccount(account, browserStorage, correlationId) {
    browserStorage.setActiveAccount(account, correlationId);
}
/**
 * Gets the currently active account
 */ function getActiveAccount(browserStorage, correlationId) {
    return browserStorage.getActiveAccount(correlationId);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"ked8H":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventHandler", ()=>EventHandler);
var _browser = require("@azure/msal-common/browser");
var _eventTypeMjs = require("./EventType.mjs");
var _browserUtilsMjs = require("../utils/BrowserUtils.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const BROADCAST_CHANNEL_NAME = "msal.broadcast.event";
class EventHandler {
    constructor(logger){
        this.eventCallbacks = new Map();
        this.logger = logger || new (0, _browser.Logger)({});
        if (typeof BroadcastChannel !== "undefined") this.broadcastChannel = new BroadcastChannel(BROADCAST_CHANNEL_NAME);
        this.invokeCrossTabCallbacks = this.invokeCrossTabCallbacks.bind(this);
    }
    /**
     * Adds event callbacks to array
     * @param callback - callback to be invoked when an event is raised
     * @param eventTypes - list of events that this callback will be invoked for, if not provided callback will be invoked for all events
     * @param callbackId - Identifier for the callback, used to locate and remove the callback when no longer required
     */ addEventCallback(callback, eventTypes, callbackId) {
        if (typeof window !== "undefined") {
            const id = callbackId || (0, _browserUtilsMjs.createGuid)();
            if (this.eventCallbacks.has(id)) {
                this.logger.error(`Event callback with id: ${id} is already registered. Please provide a unique id or remove the existing callback and try again.`);
                return null;
            }
            this.eventCallbacks.set(id, [
                callback,
                eventTypes || []
            ]);
            this.logger.verbose(`Event callback registered with id: ${id}`);
            return id;
        }
        return null;
    }
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */ removeEventCallback(callbackId) {
        this.eventCallbacks.delete(callbackId);
        this.logger.verbose(`Event callback ${callbackId} removed.`);
    }
    /**
     * Emits events by calling callback with event message
     * @param eventType
     * @param interactionType
     * @param payload
     * @param error
     */ emitEvent(eventType, interactionType, payload, error) {
        const message = {
            eventType: eventType,
            interactionType: interactionType || null,
            payload: payload || null,
            error: error || null,
            timestamp: Date.now()
        };
        switch(eventType){
            case (0, _eventTypeMjs.EventType).ACCOUNT_ADDED:
            case (0, _eventTypeMjs.EventType).ACCOUNT_REMOVED:
            case (0, _eventTypeMjs.EventType).ACTIVE_ACCOUNT_CHANGED:
                // Send event to other open tabs / MSAL instances on same domain
                this.broadcastChannel?.postMessage(message);
                break;
            default:
                // Emit event to callbacks registered in this instance
                this.invokeCallbacks(message);
                break;
        }
    }
    /**
     * Invoke registered callbacks
     * @param message
     */ invokeCallbacks(message) {
        this.eventCallbacks.forEach(([callback, eventTypes], callbackId)=>{
            if (eventTypes.length === 0 || eventTypes.includes(message.eventType)) {
                this.logger.verbose(`Emitting event to callback ${callbackId}: ${message.eventType}`);
                callback.apply(null, [
                    message
                ]);
            }
        });
    }
    /**
     * Wrapper around invokeCallbacks to handle broadcast events received from other tabs/instances
     * @param event
     */ invokeCrossTabCallbacks(event) {
        const message = event.data;
        this.invokeCallbacks(message);
    }
    /**
     * Listen for events broadcasted from other tabs/instances
     */ subscribeCrossTab() {
        this.broadcastChannel?.addEventListener("message", this.invokeCrossTabCallbacks);
    }
    /**
     * Unsubscribe from broadcast events
     */ unsubscribeCrossTab() {
        this.broadcastChannel?.removeEventListener("message", this.invokeCrossTabCallbacks);
    }
}

},{"@azure/msal-common/browser":"aaatw","./EventType.mjs":"aw4MU","../utils/BrowserUtils.mjs":"77mxR","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"kReSG":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopupClient", ()=>PopupClient);
var _browser = require("@azure/msal-common/browser");
var _standardInteractionClientMjs = require("./StandardInteractionClient.mjs");
var _eventTypeMjs = require("../event/EventType.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _browserUtilsMjs = require("../utils/BrowserUtils.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _responseHandlerMjs = require("../response/ResponseHandler.mjs");
var _authorizeMjs = require("../protocol/Authorize.mjs");
var _pkceGeneratorMjs = require("../crypto/PkceGenerator.mjs");
var _platformAuthProviderMjs = require("../broker/nativeBroker/PlatformAuthProvider.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
var _requestHelpersMjs = require("../request/RequestHelpers.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class PopupClient extends (0, _standardInteractionClientMjs.StandardInteractionClient) {
    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, platformAuthHandler, correlationId){
        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, platformAuthHandler, correlationId);
        // Properly sets this reference for the unload event.
        this.unloadWindow = this.unloadWindow.bind(this);
        this.nativeStorage = nativeStorageImpl;
        this.eventHandler = eventHandler;
    }
    /**
     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority
     * @param request
     * @param pkceCodes
     */ acquireToken(request, pkceCodes) {
        let popupParams = undefined;
        try {
            const popupName = this.generatePopupName(request.scopes || (0, _browser.OIDC_DEFAULT_SCOPES), request.authority || this.config.auth.authority);
            popupParams = {
                popupName,
                popupWindowAttributes: request.popupWindowAttributes || {},
                popupWindowParent: request.popupWindowParent ?? window
            };
            this.performanceClient.addFields({
                isAsyncPopup: this.config.system.asyncPopups
            }, this.correlationId);
            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
            if (this.config.system.asyncPopups) {
                this.logger.verbose("asyncPopups set to true, acquiring token");
                // Passes on popup position and dimensions if in request
                return this.acquireTokenPopupAsync(request, popupParams, pkceCodes);
            } else {
                // Pre-validate request method to avoid opening popup if the request is invalid
                const validatedRequest = {
                    ...request,
                    httpMethod: (0, _requestHelpersMjs.validateRequestMethod)(request, this.config.auth.protocolMode)
                };
                // asyncPopups flag is set to false. Opens popup before acquiring token.
                this.logger.verbose("asyncPopup set to false, opening popup before acquiring token");
                popupParams.popup = this.openSizedPopup("about:blank", popupParams);
                return this.acquireTokenPopupAsync(validatedRequest, popupParams, pkceCodes);
            }
        } catch (e) {
            return Promise.reject(e);
        }
    }
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */ logout(logoutRequest) {
        try {
            this.logger.verbose("logoutPopup called");
            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
            const popupParams = {
                popupName: this.generateLogoutPopupName(validLogoutRequest),
                popupWindowAttributes: logoutRequest?.popupWindowAttributes || {},
                popupWindowParent: logoutRequest?.popupWindowParent ?? window
            };
            const authority = logoutRequest && logoutRequest.authority;
            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;
            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
            if (this.config.system.asyncPopups) {
                this.logger.verbose("asyncPopups set to true");
                // Passes on popup position and dimensions if in request
                return this.logoutPopupAsync(validLogoutRequest, popupParams, authority, mainWindowRedirectUri);
            } else {
                // asyncPopups flag is set to false. Opens popup before logging out.
                this.logger.verbose("asyncPopup set to false, opening popup");
                popupParams.popup = this.openSizedPopup("about:blank", popupParams);
                return this.logoutPopupAsync(validLogoutRequest, popupParams, authority, mainWindowRedirectUri);
            }
        } catch (e) {
            // Since this function is synchronous we need to reject
            return Promise.reject(e);
        }
    }
    /**
     * Helper which obtains an access_token for your API via opening a popup window in the user's browser
     * @param request
     * @param popupParams
     * @param pkceCodes
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ async acquireTokenPopupAsync(request, popupParams, pkceCodes) {
        this.logger.verbose("acquireTokenPopupAsync called");
        const validRequest = await (0, _browser.invokeAsync)(this.initializeAuthorizationRequest.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, this.correlationId)(request, (0, _browserConstantsMjs.InteractionType).Popup);
        /*
         * Skip pre-connect for async popups to reduce time between user interaction and popup window creation to avoid
         * popup from being blocked by browsers with shorter popup timers
         */ if (popupParams.popup) (0, _browserUtilsMjs.preconnect)(validRequest.authority);
        const isPlatformBroker = (0, _platformAuthProviderMjs.isPlatformAuthAllowed)(this.config, this.logger, this.platformAuthProvider, request.authenticationScheme);
        validRequest.platformBroker = isPlatformBroker;
        if (this.config.auth.protocolMode === (0, _browser.ProtocolMode).EAR) return this.executeEarFlow(validRequest, popupParams);
        else return this.executeCodeFlow(validRequest, popupParams, pkceCodes);
    }
    /**
     * Executes auth code + PKCE flow
     * @param request
     * @param popupParams
     * @param pkceCodes
     * @returns
     */ async executeCodeFlow(request, popupParams, pkceCodes) {
        const correlationId = request.correlationId;
        const serverTelemetryManager = this.initializeServerTelemetryManager((0, _browserConstantsMjs.ApiId).acquireTokenPopup);
        const pkce = pkceCodes || await (0, _browser.invokeAsync)((0, _pkceGeneratorMjs.generatePkceCodes), (0, _browser.PerformanceEvents).GeneratePkceCodes, this.logger, this.performanceClient, correlationId)(this.performanceClient, this.logger, correlationId);
        const popupRequest = {
            ...request,
            codeChallenge: pkce.challenge
        };
        try {
            // Initialize the client
            const authClient = await (0, _browser.invokeAsync)(this.createAuthCodeClient.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, correlationId)({
                serverTelemetryManager,
                requestAuthority: popupRequest.authority,
                requestAzureCloudOptions: popupRequest.azureCloudOptions,
                requestExtraQueryParameters: popupRequest.extraQueryParameters,
                account: popupRequest.account
            });
            if (popupRequest.httpMethod === (0, _browser.HttpMethod).POST) return await this.executeCodeFlowWithPost(popupRequest, popupParams, authClient, pkce.verifier);
            else {
                // Create acquire token url.
                const navigateUrl = await (0, _browser.invokeAsync)((0, _authorizeMjs.getAuthCodeRequestUrl), (0, _browser.PerformanceEvents).GetAuthCodeUrl, this.logger, this.performanceClient, correlationId)(this.config, authClient.authority, popupRequest, this.logger, this.performanceClient);
                // Show the UI once the url has been created. Get the window handle for the popup.
                const popupWindow = this.initiateAuthRequest(navigateUrl, popupParams);
                this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).POPUP_OPENED, (0, _browserConstantsMjs.InteractionType).Popup, {
                    popupWindow
                }, null);
                // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.
                const responseString = await this.monitorPopupForHash(popupWindow, popupParams.popupWindowParent);
                const serverParams = (0, _browser.invoke)((0, _responseHandlerMjs.deserializeResponse), (0, _browser.PerformanceEvents).DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, this.config.auth.OIDCOptions.serverResponseType, this.logger);
                return await (0, _browser.invokeAsync)((0, _authorizeMjs.handleResponseCode), (0, _browser.PerformanceEvents).HandleResponseCode, this.logger, this.performanceClient, correlationId)(request, serverParams, pkce.verifier, (0, _browserConstantsMjs.ApiId).acquireTokenPopup, this.config, authClient, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.platformAuthProvider);
            }
        } catch (e) {
            // Close the synchronous popup if an error is thrown before the window unload event is registered
            popupParams.popup?.close();
            if (e instanceof (0, _browser.AuthError)) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            throw e;
        }
    }
    /**
     * Executes EAR flow
     * @param request
     */ async executeEarFlow(request, popupParams) {
        const correlationId = request.correlationId;
        // Get the frame handle for the silent request
        const discoveredAuthority = await (0, _browser.invokeAsync)(this.getDiscoveredAuthority.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, correlationId)({
            requestAuthority: request.authority,
            requestAzureCloudOptions: request.azureCloudOptions,
            requestExtraQueryParameters: request.extraQueryParameters,
            account: request.account
        });
        const earJwk = await (0, _browser.invokeAsync)((0, _browserCryptoMjs.generateEarKey), (0, _browser.PerformanceEvents).GenerateEarKey, this.logger, this.performanceClient, correlationId)();
        const popupRequest = {
            ...request,
            earJwk: earJwk
        };
        const popupWindow = popupParams.popup || this.openPopup("about:blank", popupParams);
        const form = await (0, _authorizeMjs.getEARForm)(popupWindow.document, this.config, discoveredAuthority, popupRequest, this.logger, this.performanceClient);
        form.submit();
        // Monitor the popup for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.
        const responseString = await (0, _browser.invokeAsync)(this.monitorPopupForHash.bind(this), (0, _browser.PerformanceEvents).SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(popupWindow, popupParams.popupWindowParent);
        const serverParams = (0, _browser.invoke)((0, _responseHandlerMjs.deserializeResponse), (0, _browser.PerformanceEvents).DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, this.config.auth.OIDCOptions.serverResponseType, this.logger);
        return (0, _browser.invokeAsync)((0, _authorizeMjs.handleResponseEAR), (0, _browser.PerformanceEvents).HandleResponseEar, this.logger, this.performanceClient, correlationId)(popupRequest, serverParams, (0, _browserConstantsMjs.ApiId).acquireTokenPopup, this.config, discoveredAuthority, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.platformAuthProvider);
    }
    async executeCodeFlowWithPost(request, popupParams, authClient, pkceVerifier) {
        const correlationId = request.correlationId;
        // Get the frame handle for the silent request
        const discoveredAuthority = await (0, _browser.invokeAsync)(this.getDiscoveredAuthority.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, correlationId)({
            requestAuthority: request.authority,
            requestAzureCloudOptions: request.azureCloudOptions,
            requestExtraQueryParameters: request.extraQueryParameters,
            account: request.account
        });
        const popupWindow = popupParams.popup || this.openPopup("about:blank", popupParams);
        const form = await (0, _authorizeMjs.getCodeForm)(popupWindow.document, this.config, discoveredAuthority, request, this.logger, this.performanceClient);
        form.submit();
        // Monitor the popup for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.
        const responseString = await (0, _browser.invokeAsync)(this.monitorPopupForHash.bind(this), (0, _browser.PerformanceEvents).SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(popupWindow, popupParams.popupWindowParent);
        const serverParams = (0, _browser.invoke)((0, _responseHandlerMjs.deserializeResponse), (0, _browser.PerformanceEvents).DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, this.config.auth.OIDCOptions.serverResponseType, this.logger);
        return (0, _browser.invokeAsync)((0, _authorizeMjs.handleResponseCode), (0, _browser.PerformanceEvents).HandleResponseCode, this.logger, this.performanceClient, correlationId)(request, serverParams, pkceVerifier, (0, _browserConstantsMjs.ApiId).acquireTokenPopup, this.config, authClient, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.platformAuthProvider);
    }
    /**
     *
     * @param validRequest
     * @param popupName
     * @param requestAuthority
     * @param popup
     * @param mainWindowRedirectUri
     * @param popupWindowAttributes
     */ async logoutPopupAsync(validRequest, popupParams, requestAuthority, mainWindowRedirectUri) {
        this.logger.verbose("logoutPopupAsync called");
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_START, (0, _browserConstantsMjs.InteractionType).Popup, validRequest);
        const serverTelemetryManager = this.initializeServerTelemetryManager((0, _browserConstantsMjs.ApiId).logoutPopup);
        try {
            // Clear cache on logout
            await this.clearCacheOnLogout(this.correlationId, validRequest.account);
            // Initialize the client
            const authClient = await (0, _browser.invokeAsync)(this.createAuthCodeClient.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({
                serverTelemetryManager,
                requestAuthority: requestAuthority,
                account: validRequest.account || undefined
            });
            try {
                authClient.authority.endSessionEndpoint;
            } catch  {
                if (validRequest.account?.homeAccountId && validRequest.postLogoutRedirectUri && authClient.authority.protocolMode === (0, _browser.ProtocolMode).OIDC) {
                    this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_SUCCESS, (0, _browserConstantsMjs.InteractionType).Popup, validRequest);
                    if (mainWindowRedirectUri) {
                        const navigationOptions = {
                            apiId: (0, _browserConstantsMjs.ApiId).logoutPopup,
                            timeout: this.config.system.redirectNavigationTimeout,
                            noHistory: false
                        };
                        const absoluteUrl = (0, _browser.UrlString).getAbsoluteUrl(mainWindowRedirectUri, (0, _browserUtilsMjs.getCurrentUri)());
                        await this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);
                    }
                    popupParams.popup?.close();
                    return;
                }
            }
            // Create logout string and navigate user window to logout.
            const logoutUri = authClient.getLogoutUri(validRequest);
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_SUCCESS, (0, _browserConstantsMjs.InteractionType).Popup, validRequest);
            // Open the popup window to requestUrl.
            const popupWindow = this.openPopup(logoutUri, popupParams);
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).POPUP_OPENED, (0, _browserConstantsMjs.InteractionType).Popup, {
                popupWindow
            }, null);
            await this.monitorPopupForHash(popupWindow, popupParams.popupWindowParent).catch(()=>{
            // Swallow any errors related to monitoring the window. Server logout is best effort
            });
            if (mainWindowRedirectUri) {
                const navigationOptions = {
                    apiId: (0, _browserConstantsMjs.ApiId).logoutPopup,
                    timeout: this.config.system.redirectNavigationTimeout,
                    noHistory: false
                };
                const absoluteUrl = (0, _browser.UrlString).getAbsoluteUrl(mainWindowRedirectUri, (0, _browserUtilsMjs.getCurrentUri)());
                this.logger.verbose("Redirecting main window to url specified in the request");
                this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);
                await this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);
            } else this.logger.verbose("No main window navigation requested");
        } catch (e) {
            // Close the synchronous popup if an error is thrown before the window unload event is registered
            popupParams.popup?.close();
            if (e instanceof (0, _browser.AuthError)) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_FAILURE, (0, _browserConstantsMjs.InteractionType).Popup, null, e);
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_END, (0, _browserConstantsMjs.InteractionType).Popup);
            throw e;
        }
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_END, (0, _browserConstantsMjs.InteractionType).Popup);
    }
    /**
     * Opens a popup window with given request Url.
     * @param requestUrl
     */ initiateAuthRequest(requestUrl, params) {
        // Check that request url is not empty.
        if (requestUrl) {
            this.logger.infoPii(`Navigate to: ${requestUrl}`);
            // Open the popup window to requestUrl.
            return this.openPopup(requestUrl, params);
        } else {
            // Throw error if request URL is empty.
            this.logger.error("Navigate url is empty");
            throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.emptyNavigateUri));
        }
    }
    /**
     * Monitors a window until it loads a url with the same origin.
     * @param popupWindow - window that is being monitored
     * @param timeout - timeout for processing hash once popup is redirected back to application
     */ monitorPopupForHash(popupWindow, popupWindowParent) {
        return new Promise((resolve, reject)=>{
            this.logger.verbose("PopupHandler.monitorPopupForHash - polling started");
            const intervalId = setInterval(()=>{
                // Window is closed
                if (popupWindow.closed) {
                    this.logger.error("PopupHandler.monitorPopupForHash - window closed");
                    clearInterval(intervalId);
                    reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.userCancelled)));
                    return;
                }
                let href = "";
                try {
                    /*
                     * Will throw if cross origin,
                     * which should be caught and ignored
                     * since we need the interval to keep running while on STS UI.
                     */ href = popupWindow.location.href;
                } catch (e) {}
                // Don't process blank pages or cross domain
                if (!href || href === "about:blank") return;
                clearInterval(intervalId);
                let responseString = "";
                const responseType = this.config.auth.OIDCOptions.serverResponseType;
                if (popupWindow) {
                    if (responseType === (0, _browser.ServerResponseType).QUERY) responseString = popupWindow.location.search;
                    else responseString = popupWindow.location.hash;
                }
                this.logger.verbose("PopupHandler.monitorPopupForHash - popup window is on same origin as caller");
                resolve(responseString);
            }, this.config.system.pollIntervalMilliseconds);
        }).finally(()=>{
            this.cleanPopup(popupWindow, popupWindowParent);
        });
    }
    /**
     * @hidden
     *
     * Configures popup window for login.
     *
     * @param urlNavigate
     * @param title
     * @param popUpWidth
     * @param popUpHeight
     * @param popupWindowAttributes
     * @ignore
     * @hidden
     */ openPopup(urlNavigate, popupParams) {
        try {
            let popupWindow;
            // Popup window passed in, setting url to navigate to
            if (popupParams.popup) {
                popupWindow = popupParams.popup;
                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);
                popupWindow.location.assign(urlNavigate);
            } else if (typeof popupParams.popup === "undefined") {
                // Popup will be undefined if it was not passed in
                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);
                popupWindow = this.openSizedPopup(urlNavigate, popupParams);
            }
            // Popup will be null if popups are blocked
            if (!popupWindow) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.emptyWindowError));
            if (popupWindow.focus) popupWindow.focus();
            this.currentWindow = popupWindow;
            popupParams.popupWindowParent.addEventListener("beforeunload", this.unloadWindow);
            return popupWindow;
        } catch (e) {
            this.logger.error("error opening popup " + e.message);
            throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.popupWindowError));
        }
    }
    /**
     * Helper function to set popup window dimensions and position
     * @param urlNavigate
     * @param popupName
     * @param popupWindowAttributes
     * @returns
     */ openSizedPopup(urlNavigate, { popupName, popupWindowAttributes, popupWindowParent }) {
        /**
         * adding winLeft and winTop to account for dual monitor
         * using screenLeft and screenTop for IE8 and earlier
         */ const winLeft = popupWindowParent.screenLeft ? popupWindowParent.screenLeft : popupWindowParent.screenX;
        const winTop = popupWindowParent.screenTop ? popupWindowParent.screenTop : popupWindowParent.screenY;
        /**
         * window.innerWidth displays browser window"s height and width excluding toolbars
         * using document.documentElement.clientWidth for IE8 and earlier
         */ const winWidth = popupWindowParent.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        const winHeight = popupWindowParent.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        let width = popupWindowAttributes.popupSize?.width;
        let height = popupWindowAttributes.popupSize?.height;
        let top = popupWindowAttributes.popupPosition?.top;
        let left = popupWindowAttributes.popupPosition?.left;
        if (!width || width < 0 || width > winWidth) {
            this.logger.verbose("Default popup window width used. Window width not configured or invalid.");
            width = (0, _browserConstantsMjs.BrowserConstants).POPUP_WIDTH;
        }
        if (!height || height < 0 || height > winHeight) {
            this.logger.verbose("Default popup window height used. Window height not configured or invalid.");
            height = (0, _browserConstantsMjs.BrowserConstants).POPUP_HEIGHT;
        }
        if (!top || top < 0 || top > winHeight) {
            this.logger.verbose("Default popup window top position used. Window top not configured or invalid.");
            top = Math.max(0, winHeight / 2 - (0, _browserConstantsMjs.BrowserConstants).POPUP_HEIGHT / 2 + winTop);
        }
        if (!left || left < 0 || left > winWidth) {
            this.logger.verbose("Default popup window left position used. Window left not configured or invalid.");
            left = Math.max(0, winWidth / 2 - (0, _browserConstantsMjs.BrowserConstants).POPUP_WIDTH / 2 + winLeft);
        }
        return popupWindowParent.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);
    }
    /**
     * Event callback to unload main window.
     */ unloadWindow(e) {
        if (this.currentWindow) this.currentWindow.close();
        // Guarantees browser unload will happen, so no other errors will be thrown.
        e.preventDefault();
    }
    /**
     * Closes popup, removes any state vars created during popup calls.
     * @param popupWindow
     */ cleanPopup(popupWindow, popupWindowParent) {
        // Close window.
        popupWindow.close();
        // Remove window unload function
        popupWindowParent.removeEventListener("beforeunload", this.unloadWindow);
    }
    /**
     * Generates the name for the popup based on the client id and request
     * @param clientId
     * @param request
     */ generatePopupName(scopes, authority) {
        return `${(0, _browserConstantsMjs.BrowserConstants).POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${scopes.join("-")}.${authority}.${this.correlationId}`;
    }
    /**
     * Generates the name for the popup based on the client id and request for logouts
     * @param clientId
     * @param request
     */ generateLogoutPopupName(request) {
        const homeAccountId = request.account && request.account.homeAccountId;
        return `${(0, _browserConstantsMjs.BrowserConstants).POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;
    }
}

},{"@azure/msal-common/browser":"aaatw","./StandardInteractionClient.mjs":"7vHoG","../event/EventType.mjs":"aw4MU","../utils/BrowserConstants.mjs":"kJowt","../utils/BrowserUtils.mjs":"77mxR","../error/BrowserAuthError.mjs":"dg1Z3","../response/ResponseHandler.mjs":"iJMqg","../protocol/Authorize.mjs":"aDMIM","../crypto/PkceGenerator.mjs":"2JzjF","../broker/nativeBroker/PlatformAuthProvider.mjs":"9DUuE","../crypto/BrowserCrypto.mjs":"8sZR9","../request/RequestHelpers.mjs":"h8Zsw","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7vHoG":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandardInteractionClient", ()=>StandardInteractionClient);
var _browser = require("@azure/msal-common/browser");
var _baseInteractionClientMjs = require("./BaseInteractionClient.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _packageMetadataMjs = require("../packageMetadata.mjs");
var _browserUtilsMjs = require("../utils/BrowserUtils.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
var _requestHelpersMjs = require("../request/RequestHelpers.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Defines the class structure and helper functions used by the "standard", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))
 */ class StandardInteractionClient extends (0, _baseInteractionClientMjs.BaseInteractionClient) {
    /**
     * Initializer for the logout request.
     * @param logoutRequest
     */ initializeLogoutRequest(logoutRequest) {
        this.logger.verbose("initializeLogoutRequest called", logoutRequest?.correlationId);
        const validLogoutRequest = {
            correlationId: this.correlationId || (0, _browserCryptoMjs.createNewGuid)(),
            ...logoutRequest
        };
        /**
         * Set logout_hint to be login_hint from ID Token Claims if present
         * and logoutHint attribute wasn't manually set in logout request
         */ if (logoutRequest) {
            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims
            if (!logoutRequest.logoutHint) {
                if (logoutRequest.account) {
                    const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);
                    if (logoutHint) {
                        this.logger.verbose("Setting logoutHint to login_hint ID Token Claim value for the account provided");
                        validLogoutRequest.logoutHint = logoutHint;
                    }
                } else this.logger.verbose("logoutHint was not set and account was not passed into logout request, logoutHint will not be set");
            } else this.logger.verbose("logoutHint has already been set in logoutRequest");
        } else this.logger.verbose("logoutHint will not be set since no logout request was configured");
        /*
         * Only set redirect uri if logout request isn't provided or the set uri isn't null.
         * Otherwise, use passed uri, config, or current page.
         */ if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {
            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {
                this.logger.verbose("Setting postLogoutRedirectUri to uri set on logout request", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = (0, _browser.UrlString).getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, (0, _browserUtilsMjs.getCurrentUri)());
            } else if (this.config.auth.postLogoutRedirectUri === null) this.logger.verbose("postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect", validLogoutRequest.correlationId);
            else if (this.config.auth.postLogoutRedirectUri) {
                this.logger.verbose("Setting postLogoutRedirectUri to configured uri", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = (0, _browser.UrlString).getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, (0, _browserUtilsMjs.getCurrentUri)());
            } else {
                this.logger.verbose("Setting postLogoutRedirectUri to current page", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = (0, _browser.UrlString).getAbsoluteUrl((0, _browserUtilsMjs.getCurrentUri)(), (0, _browserUtilsMjs.getCurrentUri)());
            }
        } else this.logger.verbose("postLogoutRedirectUri passed as null, not setting post logout redirect uri", validLogoutRequest.correlationId);
        return validLogoutRequest;
    }
    /**
     * Parses login_hint ID Token Claim out of AccountInfo object to be used as
     * logout_hint in end session request.
     * @param account
     */ getLogoutHintFromIdTokenClaims(account) {
        const idTokenClaims = account.idTokenClaims;
        if (idTokenClaims) {
            if (idTokenClaims.login_hint) return idTokenClaims.login_hint;
            else this.logger.verbose("The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request");
        } else this.logger.verbose("The provided account does not contain ID Token Claims, logoutHint will not be added to logout request");
        return null;
    }
    /**
     * Creates an Authorization Code Client with the given authority, or the default authority.
     * @param params {
     *         serverTelemetryManager: ServerTelemetryManager;
     *         authorityUrl?: string;
     *         requestAzureCloudOptions?: AzureCloudOptions;
     *         requestExtraQueryParameters?: StringDict;
     *         account?: AccountInfo;
     *        }
     */ async createAuthCodeClient(params) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).StandardInteractionClientCreateAuthCodeClient, this.correlationId);
        // Create auth module.
        const clientConfig = await (0, _browser.invokeAsync)(this.getClientConfiguration.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(params);
        return new (0, _browser.AuthorizationCodeClient)(clientConfig, this.performanceClient);
    }
    /**
     * Creates a Client Configuration object with the given request authority, or the default authority.
     * @param params {
     *         serverTelemetryManager: ServerTelemetryManager;
     *         requestAuthority?: string;
     *         requestAzureCloudOptions?: AzureCloudOptions;
     *         requestExtraQueryParameters?: boolean;
     *         account?: AccountInfo;
     *        }
     */ async getClientConfiguration(params) {
        const { serverTelemetryManager, requestAuthority, requestAzureCloudOptions, requestExtraQueryParameters, account } = params;
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).StandardInteractionClientGetClientConfiguration, this.correlationId);
        const discoveredAuthority = await (0, _browser.invokeAsync)(this.getDiscoveredAuthority.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, this.correlationId)({
            requestAuthority,
            requestAzureCloudOptions,
            requestExtraQueryParameters,
            account
        });
        const logger = this.config.system.loggerOptions;
        return {
            authOptions: {
                clientId: this.config.auth.clientId,
                authority: discoveredAuthority,
                clientCapabilities: this.config.auth.clientCapabilities,
                redirectUri: this.config.auth.redirectUri
            },
            systemOptions: {
                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,
                preventCorsPreflight: true
            },
            loggerOptions: {
                loggerCallback: logger.loggerCallback,
                piiLoggingEnabled: logger.piiLoggingEnabled,
                logLevel: logger.logLevel,
                correlationId: this.correlationId
            },
            cacheOptions: {
                claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled
            },
            cryptoInterface: this.browserCrypto,
            networkInterface: this.networkClient,
            storageInterface: this.browserStorage,
            serverTelemetryManager: serverTelemetryManager,
            libraryInfo: {
                sku: (0, _browserConstantsMjs.BrowserConstants).MSAL_SKU,
                version: (0, _packageMetadataMjs.version),
                cpu: (0, _browser.Constants).EMPTY_STRING,
                os: (0, _browser.Constants).EMPTY_STRING
            },
            telemetry: this.config.telemetry
        };
    }
    /**
     * Helper to initialize required request parameters for interactive APIs and ssoSilent()
     * @param request
     * @param interactionType
     */ async initializeAuthorizationRequest(request, interactionType) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);
        const redirectUri = this.getRedirectUri(request.redirectUri);
        const browserState = {
            interactionType: interactionType
        };
        const state = (0, _browser.ProtocolUtils).setRequestState(this.browserCrypto, request && request.state || (0, _browser.Constants).EMPTY_STRING, browserState);
        const baseRequest = await (0, _browser.invokeAsync)((0, _requestHelpersMjs.initializeBaseRequest), (0, _browser.PerformanceEvents).InitializeBaseRequest, this.logger, this.performanceClient, this.correlationId)({
            ...request,
            correlationId: this.correlationId
        }, this.config, this.performanceClient, this.logger);
        const interactionRequest = {
            ...baseRequest,
            redirectUri: redirectUri,
            state: state,
            nonce: request.nonce || (0, _browserCryptoMjs.createNewGuid)(),
            responseMode: this.config.auth.OIDCOptions.serverResponseType
        };
        const validatedRequest = {
            ...interactionRequest,
            httpMethod: (0, _requestHelpersMjs.validateRequestMethod)(interactionRequest, this.config.auth.protocolMode)
        };
        // Skip active account lookup if either login hint or session id is set
        if (request.loginHint || request.sid) return validatedRequest;
        const account = request.account || this.browserStorage.getActiveAccount(this.correlationId);
        if (account) {
            this.logger.verbose("Setting validated request account", this.correlationId);
            this.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, this.correlationId);
            validatedRequest.account = account;
        }
        return validatedRequest;
    }
}

},{"@azure/msal-common/browser":"aaatw","./BaseInteractionClient.mjs":"8aSyi","../utils/BrowserConstants.mjs":"kJowt","../packageMetadata.mjs":"5lj1t","../utils/BrowserUtils.mjs":"77mxR","../crypto/BrowserCrypto.mjs":"8sZR9","../request/RequestHelpers.mjs":"h8Zsw","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"8aSyi":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseInteractionClient", ()=>BaseInteractionClient);
var _browser = require("@azure/msal-common/browser");
var _packageMetadataMjs = require("../packageMetadata.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _browserUtilsMjs = require("../utils/BrowserUtils.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class BaseInteractionClient {
    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, platformAuthProvider, correlationId){
        this.config = config;
        this.browserStorage = storageImpl;
        this.browserCrypto = browserCrypto;
        this.networkClient = this.config.system.networkClient;
        this.eventHandler = eventHandler;
        this.navigationClient = navigationClient;
        this.platformAuthProvider = platformAuthProvider;
        this.correlationId = correlationId || (0, _browserCryptoMjs.createNewGuid)();
        this.logger = logger.clone((0, _browserConstantsMjs.BrowserConstants).MSAL_SKU, (0, _packageMetadataMjs.version), this.correlationId);
        this.performanceClient = performanceClient;
    }
    async clearCacheOnLogout(correlationId, account) {
        if (account) // Clear given account.
        try {
            this.browserStorage.removeAccount(account, correlationId);
            this.logger.verbose("Cleared cache items belonging to the account provided in the logout request.");
        } catch (error) {
            this.logger.error("Account provided in logout request was not found. Local cache unchanged.");
        }
        else try {
            this.logger.verbose("No account provided in logout request, clearing all cache items.", this.correlationId);
            // Clear all accounts and tokens
            this.browserStorage.clear(correlationId);
            // Clear any stray keys from IndexedDB
            await this.browserCrypto.clearKeystore();
        } catch (e) {
            this.logger.error("Attempted to clear all MSAL cache items and failed. Local cache unchanged.");
        }
    }
    /**
     *
     * Use to get the redirect uri configured in MSAL or null.
     * @param requestRedirectUri
     * @returns Redirect URL
     *
     */ getRedirectUri(requestRedirectUri) {
        this.logger.verbose("getRedirectUri called");
        const redirectUri = requestRedirectUri || this.config.auth.redirectUri;
        return (0, _browser.UrlString).getAbsoluteUrl(redirectUri, (0, _browserUtilsMjs.getCurrentUri)());
    }
    /**
     *
     * @param apiId
     * @param correlationId
     * @param forceRefresh
     */ initializeServerTelemetryManager(apiId, forceRefresh) {
        this.logger.verbose("initializeServerTelemetryManager called");
        const telemetryPayload = {
            clientId: this.config.auth.clientId,
            correlationId: this.correlationId,
            apiId: apiId,
            forceRefresh: forceRefresh || false,
            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],
            wrapperVer: this.browserStorage.getWrapperMetadata()[1]
        };
        return new (0, _browser.ServerTelemetryManager)(telemetryPayload, this.browserStorage);
    }
    /**
     * Used to get a discovered version of the default authority.
     * @param params {
     *         requestAuthority?: string;
     *         requestAzureCloudOptions?: AzureCloudOptions;
     *         requestExtraQueryParameters?: StringDict;
     *         account?: AccountInfo;
     *        }
     */ async getDiscoveredAuthority(params) {
        const { account } = params;
        const instanceAwareEQ = params.requestExtraQueryParameters && params.requestExtraQueryParameters.hasOwnProperty("instance_aware") ? params.requestExtraQueryParameters["instance_aware"] : undefined;
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).StandardInteractionClientGetDiscoveredAuthority, this.correlationId);
        const authorityOptions = {
            protocolMode: this.config.auth.protocolMode,
            OIDCOptions: this.config.auth.OIDCOptions,
            knownAuthorities: this.config.auth.knownAuthorities,
            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
            authorityMetadata: this.config.auth.authorityMetadata,
            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache
        };
        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority
        const resolvedAuthority = params.requestAuthority || this.config.auth.authority;
        const resolvedInstanceAware = instanceAwareEQ?.length ? instanceAwareEQ === "true" : this.config.auth.instanceAware;
        const userAuthority = account && resolvedInstanceAware ? this.config.auth.authority.replace((0, _browser.UrlString).getDomainFromUrl(resolvedAuthority), account.environment) : resolvedAuthority;
        // fall back to the authority from config
        const builtAuthority = (0, _browser.Authority).generateAuthority(userAuthority, params.requestAzureCloudOptions || this.config.auth.azureCloudOptions);
        const discoveredAuthority = await (0, _browser.invokeAsync)((0, _browser.AuthorityFactory).createDiscoveredInstance, (0, _browser.PerformanceEvents).AuthorityFactoryCreateDiscoveredInstance, this.logger, this.performanceClient, this.correlationId)(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.correlationId, this.performanceClient);
        if (account && !discoveredAuthority.isAlias(account.environment)) throw (0, _browser.createClientConfigurationError)((0, _browser.ClientConfigurationErrorCodes).authorityMismatch);
        return discoveredAuthority;
    }
}

},{"@azure/msal-common/browser":"aaatw","../packageMetadata.mjs":"5lj1t","../utils/BrowserConstants.mjs":"kJowt","../utils/BrowserUtils.mjs":"77mxR","../crypto/BrowserCrypto.mjs":"8sZR9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"h8Zsw":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initializeBaseRequest", ()=>initializeBaseRequest);
parcelHelpers.export(exports, "initializeSilentRequest", ()=>initializeSilentRequest);
parcelHelpers.export(exports, "validateRequestMethod", ()=>validateRequestMethod);
var _browser = require("@azure/msal-common/browser");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Initializer function for all request APIs
 * @param request
 */ async function initializeBaseRequest(request, config, performanceClient, logger) {
    performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).InitializeBaseRequest, request.correlationId);
    const authority = request.authority || config.auth.authority;
    const scopes = [
        ...request && request.scopes || []
    ];
    const validatedRequest = {
        ...request,
        correlationId: request.correlationId,
        authority,
        scopes
    };
    // Set authenticationScheme to BEARER if not explicitly set in the request
    if (!validatedRequest.authenticationScheme) {
        validatedRequest.authenticationScheme = (0, _browser.AuthenticationScheme).BEARER;
        logger.verbose('Authentication Scheme wasn\'t explicitly set in request, defaulting to "Bearer" request');
    } else {
        if (validatedRequest.authenticationScheme === (0, _browser.AuthenticationScheme).SSH) {
            if (!request.sshJwk) throw (0, _browser.createClientConfigurationError)((0, _browser.ClientConfigurationErrorCodes).missingSshJwk);
            if (!request.sshKid) throw (0, _browser.createClientConfigurationError)((0, _browser.ClientConfigurationErrorCodes).missingSshKid);
        }
        logger.verbose(`Authentication Scheme set to "${validatedRequest.authenticationScheme}" as configured in Auth request`);
    }
    // Set requested claims hash if claims-based caching is enabled and claims were requested
    if (config.cache.claimsBasedCachingEnabled && request.claims && // Checks for empty stringified object "{}" which doesn't qualify as requested claims
    !(0, _browser.StringUtils).isEmptyObj(request.claims)) validatedRequest.requestedClaimsHash = await (0, _browserCryptoMjs.hashString)(request.claims);
    return validatedRequest;
}
async function initializeSilentRequest(request, account, config, performanceClient, logger) {
    performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).InitializeSilentRequest, request.correlationId);
    const baseRequest = await (0, _browser.invokeAsync)(initializeBaseRequest, (0, _browser.PerformanceEvents).InitializeBaseRequest, logger, performanceClient, request.correlationId)(request, config, performanceClient, logger);
    return {
        ...request,
        ...baseRequest,
        account: account,
        forceRefresh: request.forceRefresh || false
    };
}
/**
 * Validates that the combination of request method, protocol mode and authorize body parameters is correct.
 * Returns the validated or defaulted HTTP method or throws if the configured combination is invalid.
 * @param interactionRequest
 * @param protocolMode
 * @returns
 */ function validateRequestMethod(interactionRequest, protocolMode) {
    let httpMethod;
    const requestMethod = interactionRequest.httpMethod;
    if (protocolMode === (0, _browser.ProtocolMode).EAR) {
        // Don't override httpMethod if it is already set, default to POST if not set
        httpMethod = requestMethod || (0, _browser.HttpMethod).POST;
        // Validate that method is not GET if protocol mode is EAR
        if (httpMethod !== (0, _browser.HttpMethod).POST) throw (0, _browser.createClientConfigurationError)((0, _browser.ClientConfigurationErrorCodes).invalidRequestMethodForEAR);
    } else // For non-EAR protocol modes, default to GET if httpMethod is not set
    httpMethod = requestMethod || (0, _browser.HttpMethod).GET;
    // Regardless of protocolMode, if there are authorizePostBodyParameters, validate the request method is POST
    if (interactionRequest.authorizePostBodyParameters && httpMethod !== (0, _browser.HttpMethod).POST) throw (0, _browser.createClientConfigurationError)((0, _browser.ClientConfigurationErrorCodes).invalidAuthorizePostBodyParameters);
    return httpMethod;
}

},{"@azure/msal-common/browser":"aaatw","../crypto/BrowserCrypto.mjs":"8sZR9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"iJMqg":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deserializeResponse", ()=>deserializeResponse);
parcelHelpers.export(exports, "validateInteractionType", ()=>validateInteractionType);
var _browser = require("@azure/msal-common/browser");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserProtocolUtilsMjs = require("../utils/BrowserProtocolUtils.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function deserializeResponse(responseString, responseLocation, logger) {
    // Deserialize hash fragment response parameters.
    const serverParams = (0, _browser.UrlUtils).getDeserializedResponse(responseString);
    if (!serverParams) {
        if (!(0, _browser.UrlUtils).stripLeadingHashOrQuery(responseString)) {
            // Hash or Query string is empty
            logger.error(`The request has returned to the redirectUri but a ${responseLocation} is not present. It's likely that the ${responseLocation} has been removed or the page has been redirected by code running on the redirectUri page.`);
            throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.hashEmptyError));
        } else {
            logger.error(`A ${responseLocation} is present in the iframe but it does not contain known properties. It's likely that the ${responseLocation} has been replaced by code running on the redirectUri page.`);
            logger.errorPii(`The ${responseLocation} detected is: ${responseString}`);
            throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.hashDoesNotContainKnownProperties));
        }
    }
    return serverParams;
}
/**
 * Returns the interaction type that the response object belongs to
 */ function validateInteractionType(response, browserCrypto, interactionType) {
    if (!response.state) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.noStateInHash));
    const platformStateObj = (0, _browserProtocolUtilsMjs.extractBrowserRequestState)(browserCrypto, response.state);
    if (!platformStateObj) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.unableToParseState));
    if (platformStateObj.interactionType !== interactionType) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.stateInteractionTypeMismatch));
}

},{"@azure/msal-common/browser":"aaatw","../error/BrowserAuthError.mjs":"dg1Z3","../utils/BrowserProtocolUtils.mjs":"3x57s","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"3x57s":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extractBrowserRequestState", ()=>extractBrowserRequestState);
var _browser = require("@azure/msal-common/browser");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Extracts the BrowserStateObject from the state string.
 * @param browserCrypto
 * @param state
 */ function extractBrowserRequestState(browserCrypto, state) {
    if (!state) return null;
    try {
        const requestStateObj = (0, _browser.ProtocolUtils).parseRequestState(browserCrypto, state);
        return requestStateObj.libraryState.meta;
    } catch (e) {
        throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).invalidState);
    }
}

},{"@azure/msal-common/browser":"aaatw","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"aDMIM":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAuthCodeRequestUrl", ()=>getAuthCodeRequestUrl);
parcelHelpers.export(exports, "getCodeForm", ()=>getCodeForm);
parcelHelpers.export(exports, "getEARForm", ()=>getEARForm);
parcelHelpers.export(exports, "handleResponseCode", ()=>handleResponseCode);
parcelHelpers.export(exports, "handleResponseEAR", ()=>handleResponseEAR);
parcelHelpers.export(exports, "handleResponsePlatformBroker", ()=>handleResponsePlatformBroker);
var _browser = require("@azure/msal-common/browser");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _packageMetadataMjs = require("../packageMetadata.mjs");
var _cryptoOpsMjs = require("../crypto/CryptoOps.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _interactionHandlerMjs = require("../interaction_handler/InteractionHandler.mjs");
var _platformAuthInteractionClientMjs = require("../interaction_client/PlatformAuthInteractionClient.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Returns map of parameters that are applicable to all calls to /authorize whether using PKCE or EAR
 * @param config
 * @param authority
 * @param request
 * @param logger
 * @param performanceClient
 * @returns
 */ async function getStandardParameters(config, authority, request, logger, performanceClient) {
    const parameters = (0, _browser.AuthorizeProtocol).getStandardAuthorizeRequestParameters({
        ...config.auth,
        authority: authority
    }, request, logger, performanceClient);
    (0, _browser.RequestParameterBuilder).addLibraryInfo(parameters, {
        sku: (0, _browserConstantsMjs.BrowserConstants).MSAL_SKU,
        version: (0, _packageMetadataMjs.version),
        os: "",
        cpu: ""
    });
    if (config.auth.protocolMode !== (0, _browser.ProtocolMode).OIDC) (0, _browser.RequestParameterBuilder).addApplicationTelemetry(parameters, config.telemetry.application);
    if (request.platformBroker) {
        // signal ests that this is a WAM call
        (0, _browser.RequestParameterBuilder).addNativeBroker(parameters);
        // instrument JS-platform bridge specific fields
        performanceClient.addFields({
            isPlatformAuthorizeRequest: true
        }, request.correlationId);
        // pass the req_cnf for POP
        if (request.authenticationScheme === (0, _browser.AuthenticationScheme).POP) {
            const cryptoOps = new (0, _cryptoOpsMjs.CryptoOps)(logger, performanceClient);
            const popTokenGenerator = new (0, _browser.PopTokenGenerator)(cryptoOps);
            // req_cnf is always sent as a string for SPAs
            let reqCnfData;
            if (!request.popKid) {
                const generatedReqCnfData = await (0, _browser.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), (0, _browser.PerformanceEvents).PopTokenGenerateCnf, logger, performanceClient, request.correlationId)(request, logger);
                reqCnfData = generatedReqCnfData.reqCnfString;
            } else reqCnfData = cryptoOps.encodeKid(request.popKid);
            (0, _browser.RequestParameterBuilder).addPopToken(parameters, reqCnfData);
        }
    }
    (0, _browser.RequestParameterBuilder).instrumentBrokerParams(parameters, request.correlationId, performanceClient);
    return parameters;
}
/**
 * Gets the full /authorize URL with request parameters when using Auth Code + PKCE
 * @param config
 * @param authority
 * @param request
 * @param logger
 * @param performanceClient
 * @returns
 */ async function getAuthCodeRequestUrl(config, authority, request, logger, performanceClient) {
    if (!request.codeChallenge) throw (0, _browser.createClientConfigurationError)((0, _browser.ClientConfigurationErrorCodes).pkceParamsMissing);
    const parameters = await (0, _browser.invokeAsync)(getStandardParameters, (0, _browser.PerformanceEvents).GetStandardParams, logger, performanceClient, request.correlationId)(config, authority, request, logger, performanceClient);
    (0, _browser.RequestParameterBuilder).addResponseType(parameters, (0, _browser.OAuthResponseType).CODE);
    (0, _browser.RequestParameterBuilder).addCodeChallengeParams(parameters, request.codeChallenge, (0, _browser.Constants).S256_CODE_CHALLENGE_METHOD);
    (0, _browser.RequestParameterBuilder).addExtraQueryParameters(parameters, request.extraQueryParameters || {});
    return (0, _browser.AuthorizeProtocol).getAuthorizeUrl(authority, parameters, config.auth.encodeExtraQueryParams, request.extraQueryParameters);
}
/**
 * Gets the form that will be posted to /authorize with request parameters when using EAR
 */ async function getEARForm(frame, config, authority, request, logger, performanceClient) {
    if (!request.earJwk) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.earJwkEmpty));
    const parameters = await getStandardParameters(config, authority, request, logger, performanceClient);
    (0, _browser.RequestParameterBuilder).addResponseType(parameters, (0, _browser.OAuthResponseType).IDTOKEN_TOKEN_REFRESHTOKEN);
    (0, _browser.RequestParameterBuilder).addEARParameters(parameters, request.earJwk);
    const queryParams = new Map();
    (0, _browser.RequestParameterBuilder).addExtraQueryParameters(queryParams, request.extraQueryParameters || {});
    const url = (0, _browser.AuthorizeProtocol).getAuthorizeUrl(authority, queryParams, config.auth.encodeExtraQueryParams, request.extraQueryParameters);
    return createForm(frame, url, parameters);
}
/**
 * Gets the form that will be posted to /authorize with request parameters when using POST method
 */ async function getCodeForm(frame, config, authority, request, logger, performanceClient) {
    const parameters = await getStandardParameters(config, authority, request, logger, performanceClient);
    (0, _browser.RequestParameterBuilder).addResponseType(parameters, (0, _browser.OAuthResponseType).CODE);
    (0, _browser.RequestParameterBuilder).addCodeChallengeParams(parameters, request.codeChallenge, request.codeChallengeMethod || (0, _browser.Constants).S256_CODE_CHALLENGE_METHOD);
    (0, _browser.RequestParameterBuilder).addPostBodyParameters(parameters, request.authorizePostBodyParameters || {});
    const queryParams = new Map();
    (0, _browser.RequestParameterBuilder).addExtraQueryParameters(queryParams, request.extraQueryParameters || {});
    const url = (0, _browser.AuthorizeProtocol).getAuthorizeUrl(authority, queryParams, config.auth.encodeExtraQueryParams, request.extraQueryParameters);
    return createForm(frame, url, parameters);
}
/**
 * Creates form element in the provided document with auth parameters in the post body
 * @param frame
 * @param authorizeUrl
 * @param parameters
 * @returns
 */ function createForm(frame, authorizeUrl, parameters) {
    const form = frame.createElement("form");
    form.method = "post";
    form.action = authorizeUrl;
    parameters.forEach((value, key)=>{
        const param = frame.createElement("input");
        param.hidden = true;
        param.name = key;
        param.value = value;
        form.appendChild(param);
    });
    frame.body.appendChild(form);
    return form;
}
/**
 * Response handler when server returns accountId on the /authorize request
 * @param request
 * @param accountId
 * @param apiId
 * @param config
 * @param browserStorage
 * @param nativeStorage
 * @param eventHandler
 * @param logger
 * @param performanceClient
 * @param nativeMessageHandler
 * @returns
 */ async function handleResponsePlatformBroker(request, accountId, apiId, config, browserStorage, nativeStorage, eventHandler, logger, performanceClient, platformAuthProvider) {
    logger.verbose("Account id found, calling WAM for token");
    if (!platformAuthProvider) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.nativeConnectionNotEstablished));
    const browserCrypto = new (0, _cryptoOpsMjs.CryptoOps)(logger, performanceClient);
    const nativeInteractionClient = new (0, _platformAuthInteractionClientMjs.PlatformAuthInteractionClient)(config, browserStorage, browserCrypto, logger, eventHandler, config.system.navigationClient, apiId, performanceClient, platformAuthProvider, accountId, nativeStorage, request.correlationId);
    const { userRequestState } = (0, _browser.ProtocolUtils).parseRequestState(browserCrypto, request.state);
    return (0, _browser.invokeAsync)(nativeInteractionClient.acquireToken.bind(nativeInteractionClient), (0, _browser.PerformanceEvents).NativeInteractionClientAcquireToken, logger, performanceClient, request.correlationId)({
        ...request,
        state: userRequestState,
        prompt: undefined
    });
}
/**
 * Response handler when server returns code on the /authorize request
 * @param request
 * @param response
 * @param codeVerifier
 * @param authClient
 * @param browserStorage
 * @param logger
 * @param performanceClient
 * @returns
 */ async function handleResponseCode(request, response, codeVerifier, apiId, config, authClient, browserStorage, nativeStorage, eventHandler, logger, performanceClient, platformAuthProvider) {
    // Remove throttle if it exists
    (0, _browser.ThrottlingUtils).removeThrottle(browserStorage, config.auth.clientId, request);
    if (response.accountId) return (0, _browser.invokeAsync)(handleResponsePlatformBroker, (0, _browser.PerformanceEvents).HandleResponsePlatformBroker, logger, performanceClient, request.correlationId)(request, response.accountId, apiId, config, browserStorage, nativeStorage, eventHandler, logger, performanceClient, platformAuthProvider);
    const authCodeRequest = {
        ...request,
        code: response.code || "",
        codeVerifier: codeVerifier
    };
    // Create popup interaction handler.
    const interactionHandler = new (0, _interactionHandlerMjs.InteractionHandler)(authClient, browserStorage, authCodeRequest, logger, performanceClient);
    // Handle response from hash string.
    const result = await (0, _browser.invokeAsync)(interactionHandler.handleCodeResponse.bind(interactionHandler), (0, _browser.PerformanceEvents).HandleCodeResponse, logger, performanceClient, request.correlationId)(response, request);
    return result;
}
/**
 * Response handler when server returns ear_jwe on the /authorize request
 * @param request
 * @param response
 * @param apiId
 * @param config
 * @param authority
 * @param browserStorage
 * @param nativeStorage
 * @param eventHandler
 * @param logger
 * @param performanceClient
 * @param nativeMessageHandler
 * @returns
 */ async function handleResponseEAR(request, response, apiId, config, authority, browserStorage, nativeStorage, eventHandler, logger, performanceClient, platformAuthProvider) {
    // Remove throttle if it exists
    (0, _browser.ThrottlingUtils).removeThrottle(browserStorage, config.auth.clientId, request);
    // Validate state & check response for errors
    (0, _browser.AuthorizeProtocol).validateAuthorizationResponse(response, request.state);
    if (!response.ear_jwe) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.earJweEmpty));
    if (!request.earJwk) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.earJwkEmpty));
    const decryptedData = JSON.parse(await (0, _browser.invokeAsync)((0, _browserCryptoMjs.decryptEarResponse), (0, _browser.PerformanceEvents).DecryptEarResponse, logger, performanceClient, request.correlationId)(request.earJwk, response.ear_jwe));
    if (decryptedData.accountId) return (0, _browser.invokeAsync)(handleResponsePlatformBroker, (0, _browser.PerformanceEvents).HandleResponsePlatformBroker, logger, performanceClient, request.correlationId)(request, decryptedData.accountId, apiId, config, browserStorage, nativeStorage, eventHandler, logger, performanceClient, platformAuthProvider);
    const responseHandler = new (0, _browser.ResponseHandler)(config.auth.clientId, browserStorage, new (0, _cryptoOpsMjs.CryptoOps)(logger, performanceClient), logger, null, null, performanceClient);
    // Validate response. This function throws a server error if an error is returned by the server.
    responseHandler.validateTokenResponse(decryptedData);
    // Temporary until response handler is refactored to be more flow agnostic.
    const additionalData = {
        code: "",
        state: request.state,
        nonce: request.nonce,
        client_info: decryptedData.client_info,
        cloud_graph_host_name: decryptedData.cloud_graph_host_name,
        cloud_instance_host_name: decryptedData.cloud_instance_host_name,
        cloud_instance_name: decryptedData.cloud_instance_name,
        msgraph_host: decryptedData.msgraph_host
    };
    return await (0, _browser.invokeAsync)(responseHandler.handleServerTokenResponse.bind(responseHandler), (0, _browser.PerformanceEvents).HandleServerTokenResponse, logger, performanceClient, request.correlationId)(decryptedData, authority, (0, _browser.TimeUtils).nowSeconds(), request, additionalData, undefined, undefined, undefined, undefined);
}

},{"@azure/msal-common/browser":"aaatw","../utils/BrowserConstants.mjs":"kJowt","../packageMetadata.mjs":"5lj1t","../crypto/CryptoOps.mjs":"6UNxs","../error/BrowserAuthError.mjs":"dg1Z3","../interaction_handler/InteractionHandler.mjs":"60nk3","../interaction_client/PlatformAuthInteractionClient.mjs":"e7hC2","../crypto/BrowserCrypto.mjs":"8sZR9","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"60nk3":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InteractionHandler", ()=>InteractionHandler);
var _browser = require("@azure/msal-common/browser");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Abstract class which defines operations for a browser interaction handling class.
 */ class InteractionHandler {
    constructor(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient){
        this.authModule = authCodeModule;
        this.browserStorage = storageImpl;
        this.authCodeRequest = authCodeRequest;
        this.logger = logger;
        this.performanceClient = performanceClient;
    }
    /**
     * Function to handle response parameters from hash.
     * @param locationHash
     */ async handleCodeResponse(response, request) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).HandleCodeResponse, request.correlationId);
        let authCodeResponse;
        try {
            authCodeResponse = (0, _browser.AuthorizeProtocol).getAuthorizationCodePayload(response, request.state);
        } catch (e) {
            if (e instanceof (0, _browser.ServerError) && e.subError === (0, _browserAuthErrorCodesMjs.userCancelled)) // Translate server error caused by user closing native prompt to corresponding first class MSAL error
            throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.userCancelled));
            else throw e;
        }
        return (0, _browser.invokeAsync)(this.handleCodeResponseFromServer.bind(this), (0, _browser.PerformanceEvents).HandleCodeResponseFromServer, this.logger, this.performanceClient, request.correlationId)(authCodeResponse, request);
    }
    /**
     * Process auth code response from AAD
     * @param authCodeResponse
     * @param state
     * @param authority
     * @param networkModule
     * @returns
     */ async handleCodeResponseFromServer(authCodeResponse, request, validateNonce = true) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).HandleCodeResponseFromServer, request.correlationId);
        this.logger.trace("InteractionHandler.handleCodeResponseFromServer called");
        // Assign code to request
        this.authCodeRequest.code = authCodeResponse.code;
        // Check for new cloud instance
        if (authCodeResponse.cloud_instance_host_name) await (0, _browser.invokeAsync)(this.authModule.updateAuthority.bind(this.authModule), (0, _browser.PerformanceEvents).UpdateTokenEndpointAuthority, this.logger, this.performanceClient, request.correlationId)(authCodeResponse.cloud_instance_host_name, request.correlationId);
        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)
        if (validateNonce) // TODO: Assigning "response nonce" to "request nonce" is confusing. Refactor the function doing validation to accept request nonce directly
        authCodeResponse.nonce = request.nonce || undefined;
        authCodeResponse.state = request.state;
        // Add CCS parameters if available
        if (authCodeResponse.client_info) this.authCodeRequest.clientInfo = authCodeResponse.client_info;
        else {
            const ccsCred = this.createCcsCredentials(request);
            if (ccsCred) this.authCodeRequest.ccsCredential = ccsCred;
        }
        // Acquire token with retrieved code.
        const tokenResponse = await (0, _browser.invokeAsync)(this.authModule.acquireToken.bind(this.authModule), (0, _browser.PerformanceEvents).AuthClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(this.authCodeRequest, authCodeResponse);
        return tokenResponse;
    }
    /**
     * Build ccs creds if available
     */ createCcsCredentials(request) {
        if (request.account) return {
            credential: request.account.homeAccountId,
            type: (0, _browser.CcsCredentialType).HOME_ACCOUNT_ID
        };
        else if (request.loginHint) return {
            credential: request.loginHint,
            type: (0, _browser.CcsCredentialType).UPN
        };
        return null;
    }
}

},{"@azure/msal-common/browser":"aaatw","../error/BrowserAuthError.mjs":"dg1Z3","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"e7hC2":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PlatformAuthInteractionClient", ()=>PlatformAuthInteractionClient);
var _browser = require("@azure/msal-common/browser");
var _baseInteractionClientMjs = require("./BaseInteractionClient.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _nativeAuthErrorMjs = require("../error/NativeAuthError.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _silentCacheClientMjs = require("./SilentCacheClient.mjs");
var _base64DecodeMjs = require("../encode/Base64Decode.mjs");
var _packageMetadataMjs = require("../packageMetadata.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
var _nativeAuthErrorCodesMjs = require("../error/NativeAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class PlatformAuthInteractionClient extends (0, _baseInteractionClientMjs.BaseInteractionClient) {
    constructor(config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, provider, accountId, nativeStorageImpl, correlationId){
        super(config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, performanceClient, provider, correlationId);
        this.apiId = apiId;
        this.accountId = accountId;
        this.platformAuthProvider = provider;
        this.nativeStorageManager = nativeStorageImpl;
        this.silentCacheClient = new (0, _silentCacheClientMjs.SilentCacheClient)(config, this.nativeStorageManager, browserCrypto, logger, eventHandler, navigationClient, performanceClient, provider, correlationId);
        const extensionName = this.platformAuthProvider.getExtensionName();
        this.skus = (0, _browser.ServerTelemetryManager).makeExtraSkuString({
            libraryName: (0, _browserConstantsMjs.BrowserConstants).MSAL_SKU,
            libraryVersion: (0, _packageMetadataMjs.version),
            extensionName: extensionName,
            extensionVersion: this.platformAuthProvider.getExtensionVersion()
        });
    }
    /**
     * Adds SKUs to request extra query parameters
     * @param request {PlatformAuthRequest}
     * @private
     */ addRequestSKUs(request) {
        request.extraParameters = {
            ...request.extraParameters,
            [(0, _browser.AADServerParamKeys).X_CLIENT_EXTRA_SKU]: this.skus
        };
    }
    /**
     * Acquire token from native platform via browser extension
     * @param request
     */ async acquireToken(request, cacheLookupPolicy) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).NativeInteractionClientAcquireToken, this.correlationId);
        this.logger.trace("NativeInteractionClient - acquireToken called.");
        // start the perf measurement
        const nativeATMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).NativeInteractionClientAcquireToken, this.correlationId);
        const reqTimestamp = (0, _browser.TimeUtils).nowSeconds();
        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
        try {
            // initialize native request
            const nativeRequest = await this.initializeNativeRequest(request);
            // check if the tokens can be retrieved from internal cache
            try {
                const result = await this.acquireTokensFromCache(this.accountId, nativeRequest);
                nativeATMeasurement.end({
                    success: true,
                    isNativeBroker: false,
                    fromCache: true
                });
                return result;
            } catch (e) {
                if (cacheLookupPolicy === (0, _browserConstantsMjs.CacheLookupPolicy).AccessToken) {
                    this.logger.info("MSAL internal Cache does not contain tokens, return error as per cache policy");
                    nativeATMeasurement.end({
                        success: false,
                        brokerErrorCode: "cache_request_failed"
                    });
                    throw e;
                }
                // continue with a native call for any and all errors
                this.logger.info("MSAL internal Cache does not contain tokens, proceed to make a native call");
            }
            const validatedResponse = await this.platformAuthProvider.sendMessage(nativeRequest);
            return await this.handleNativeResponse(validatedResponse, nativeRequest, reqTimestamp).then((result)=>{
                nativeATMeasurement.end({
                    success: true,
                    isNativeBroker: true,
                    requestId: result.requestId
                });
                serverTelemetryManager.clearNativeBrokerErrorCode();
                return result;
            }).catch((error)=>{
                nativeATMeasurement.end({
                    success: false,
                    errorCode: error.errorCode,
                    subErrorCode: error.subError
                });
                throw error;
            });
        } catch (e) {
            if (e instanceof (0, _nativeAuthErrorMjs.NativeAuthError)) serverTelemetryManager.setNativeBrokerErrorCode(e.errorCode);
            nativeATMeasurement.end({
                success: false
            });
            throw e;
        }
    }
    /**
     * Creates silent flow request
     * @param request
     * @param cachedAccount
     * @returns CommonSilentFlowRequest
     */ createSilentCacheRequest(request, cachedAccount) {
        return {
            authority: request.authority,
            correlationId: this.correlationId,
            scopes: (0, _browser.ScopeSet).fromString(request.scope).asArray(),
            account: cachedAccount,
            forceRefresh: false
        };
    }
    /**
     * Fetches the tokens from the cache if un-expired
     * @param nativeAccountId
     * @param request
     * @returns authenticationResult
     */ async acquireTokensFromCache(nativeAccountId, request) {
        if (!nativeAccountId) {
            this.logger.warning("NativeInteractionClient:acquireTokensFromCache - No nativeAccountId provided");
            throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).noAccountFound);
        }
        // fetch the account from browser cache
        const account = this.browserStorage.getBaseAccountInfo({
            nativeAccountId
        }, this.correlationId);
        if (!account) throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).noAccountFound);
        // leverage silent flow for cached tokens retrieval
        try {
            const silentRequest = this.createSilentCacheRequest(request, account);
            const result = await this.silentCacheClient.acquireToken(silentRequest);
            const fullAccount = {
                ...account,
                idTokenClaims: result?.idTokenClaims,
                idToken: result?.idToken
            };
            return {
                ...result,
                account: fullAccount
            };
        } catch (e) {
            throw e;
        }
    }
    /**
     * Acquires a token from native platform then redirects to the redirectUri instead of returning the response
     * @param {RedirectRequest} request
     * @param {InProgressPerformanceEvent} rootMeasurement
     */ async acquireTokenRedirect(request, rootMeasurement) {
        this.logger.trace("NativeInteractionClient - acquireTokenRedirect called.");
        const { ...remainingParameters } = request;
        delete remainingParameters.onRedirectNavigate;
        const nativeRequest = await this.initializeNativeRequest(remainingParameters);
        try {
            await this.platformAuthProvider.sendMessage(nativeRequest);
        } catch (e) {
            // Only throw fatal errors here to allow application to fallback to regular redirect. Otherwise proceed and the error will be thrown in handleRedirectPromise
            if (e instanceof (0, _nativeAuthErrorMjs.NativeAuthError)) {
                const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
                serverTelemetryManager.setNativeBrokerErrorCode(e.errorCode);
                if ((0, _nativeAuthErrorMjs.isFatalNativeAuthError)(e)) throw e;
            }
        }
        this.browserStorage.setTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).NATIVE_REQUEST, JSON.stringify(nativeRequest), true);
        const navigationOptions = {
            apiId: (0, _browserConstantsMjs.ApiId).acquireTokenRedirect,
            timeout: this.config.system.redirectNavigationTimeout,
            noHistory: false
        };
        const redirectUri = this.config.auth.navigateToLoginRequestUrl ? window.location.href : this.getRedirectUri(request.redirectUri);
        rootMeasurement.end({
            success: true
        });
        await this.navigationClient.navigateExternal(redirectUri, navigationOptions); // Need to treat this as external to ensure handleRedirectPromise is run again
    }
    /**
     * If the previous page called native platform for a token using redirect APIs, send the same request again and return the response
     * @param performanceClient {IPerformanceClient?}
     * @param correlationId {string?} correlation identifier
     */ async handleRedirectPromise(performanceClient, correlationId) {
        this.logger.trace("NativeInteractionClient - handleRedirectPromise called.");
        if (!this.browserStorage.isInteractionInProgress(true)) {
            this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null.");
            return null;
        }
        // remove prompt from the request to prevent WAM from prompting twice
        const cachedRequest = this.browserStorage.getCachedNativeRequest();
        if (!cachedRequest) {
            this.logger.verbose("NativeInteractionClient - handleRedirectPromise called but there is no cached request, returning null.");
            if (performanceClient && correlationId) performanceClient?.addFields({
                errorCode: "no_cached_request"
            }, correlationId);
            return null;
        }
        const { prompt, ...request } = cachedRequest;
        if (prompt) this.logger.verbose("NativeInteractionClient - handleRedirectPromise called and prompt was included in the original request, removing prompt from cached request to prevent second interaction with native broker window.");
        this.browserStorage.removeItem(this.browserStorage.generateCacheKey((0, _browserConstantsMjs.TemporaryCacheKeys).NATIVE_REQUEST));
        const reqTimestamp = (0, _browser.TimeUtils).nowSeconds();
        try {
            this.logger.verbose("NativeInteractionClient - handleRedirectPromise sending message to native broker.");
            const response = await this.platformAuthProvider.sendMessage(request);
            const authResult = await this.handleNativeResponse(response, request, reqTimestamp);
            const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
            serverTelemetryManager.clearNativeBrokerErrorCode();
            if (performanceClient && this.correlationId) this.performanceClient.addFields({
                isNativeBroker: true
            }, this.correlationId);
            return authResult;
        } catch (e) {
            throw e;
        }
    }
    /**
     * Logout from native platform via browser extension
     * @param request
     */ logout() {
        this.logger.trace("NativeInteractionClient - logout called.");
        return Promise.reject("Logout not implemented yet");
    }
    /**
     * Transform response from native platform into AuthenticationResult object which will be returned to the end user
     * @param response
     * @param request
     * @param reqTimestamp
     */ async handleNativeResponse(response, request, reqTimestamp) {
        this.logger.trace("NativeInteractionClient - handleNativeResponse called.");
        // generate identifiers
        const idTokenClaims = (0, _browser.AuthToken).extractTokenClaims(response.id_token, (0, _base64DecodeMjs.base64Decode));
        const homeAccountIdentifier = this.createHomeAccountIdentifier(response, idTokenClaims);
        const cachedhomeAccountId = this.browserStorage.getAccountInfoFilteredBy({
            nativeAccountId: request.accountId
        }, this.correlationId)?.homeAccountId;
        // add exception for double brokering, please note this is temporary and will be fortified in future
        if (request.extraParameters?.child_client_id && response.account.id !== request.accountId) this.logger.info("handleNativeServerResponse: Double broker flow detected, ignoring accountId mismatch");
        else if (homeAccountIdentifier !== cachedhomeAccountId && response.account.id !== request.accountId) // User switch in native broker prompt is not supported. All users must first sign in through web flow to ensure server state is in sync
        throw (0, _nativeAuthErrorMjs.createNativeAuthError)((0, _nativeAuthErrorCodesMjs.userSwitch));
        // Get the preferred_cache domain for the given authority
        const authority = await this.getDiscoveredAuthority({
            requestAuthority: request.authority
        });
        const baseAccount = (0, _browser.buildAccountToCache)(this.browserStorage, authority, homeAccountIdentifier, (0, _base64DecodeMjs.base64Decode), this.correlationId, idTokenClaims, response.client_info, undefined, idTokenClaims.tid, undefined, response.account.id, this.logger);
        // Ensure expires_in is in number format
        response.expires_in = Number(response.expires_in);
        // generate authenticationResult
        const result = await this.generateAuthenticationResult(response, request, idTokenClaims, baseAccount, authority.canonicalAuthority, reqTimestamp);
        // cache accounts and tokens in the appropriate storage
        await this.cacheAccount(baseAccount, this.correlationId, (0, _browser.AuthToken).isKmsi(idTokenClaims));
        await this.cacheNativeTokens(response, request, homeAccountIdentifier, idTokenClaims, response.access_token, result.tenantId, reqTimestamp);
        return result;
    }
    /**
     * creates an homeAccountIdentifier for the account
     * @param response
     * @param idTokenObj
     * @returns
     */ createHomeAccountIdentifier(response, idTokenClaims) {
        // Save account in browser storage
        const homeAccountIdentifier = (0, _browser.AccountEntity).generateHomeAccountId(response.client_info || (0, _browser.Constants).EMPTY_STRING, (0, _browser.AuthorityType).Default, this.logger, this.browserCrypto, idTokenClaims);
        return homeAccountIdentifier;
    }
    /**
     * Helper to generate scopes
     * @param response
     * @param request
     * @returns
     */ generateScopes(requestScopes, responseScopes) {
        return responseScopes ? (0, _browser.ScopeSet).fromString(responseScopes) : (0, _browser.ScopeSet).fromString(requestScopes);
    }
    /**
     * If PoP token is requesred, records the PoP token if returned from the WAM, else generates one in the browser
     * @param request
     * @param response
     */ async generatePopAccessToken(response, request) {
        if (request.tokenType === (0, _browser.AuthenticationScheme).POP && request.signPopToken) {
            /**
             * This code prioritizes SHR returned from the native layer. In case of error/SHR not calculated from WAM and the AT
             * is still received, SHR is calculated locally
             */ // Check if native layer returned an SHR token
            if (response.shr) {
                this.logger.trace("handleNativeServerResponse: SHR is enabled in native layer");
                return response.shr;
            }
            // Generate SHR in msal js if WAM does not compute it when POP is enabled
            const popTokenGenerator = new (0, _browser.PopTokenGenerator)(this.browserCrypto);
            const shrParameters = {
                resourceRequestMethod: request.resourceRequestMethod,
                resourceRequestUri: request.resourceRequestUri,
                shrClaims: request.shrClaims,
                shrNonce: request.shrNonce
            };
            /**
             * KeyID must be present in the native request from when the PoP key was generated in order for
             * PopTokenGenerator to query the full key for signing
             */ if (!request.keyId) throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).keyIdMissing);
            return popTokenGenerator.signPopToken(response.access_token, request.keyId, shrParameters);
        } else return response.access_token;
    }
    /**
     * Generates authentication result
     * @param response
     * @param request
     * @param idTokenObj
     * @param accountEntity
     * @param authority
     * @param reqTimestamp
     * @returns
     */ async generateAuthenticationResult(response, request, idTokenClaims, accountEntity, authority, reqTimestamp) {
        // Add Native Broker fields to Telemetry
        const mats = this.addTelemetryFromNativeResponse(response.properties.MATS);
        // If scopes not returned in server response, use request scopes
        const responseScopes = this.generateScopes(request.scope, response.scope);
        const accountProperties = response.account.properties || {};
        const uid = accountProperties["UID"] || idTokenClaims.oid || idTokenClaims.sub || (0, _browser.Constants).EMPTY_STRING;
        const tid = accountProperties["TenantId"] || idTokenClaims.tid || (0, _browser.Constants).EMPTY_STRING;
        const accountInfo = (0, _browser.updateAccountTenantProfileData)((0, _browser.AccountEntity).getAccountInfo(accountEntity), undefined, idTokenClaims, response.id_token);
        /**
         * In pairwise broker flows, this check prevents the broker's native account id
         * from being returned over the embedded app's account id.
         */ if (accountInfo.nativeAccountId !== response.account.id) accountInfo.nativeAccountId = response.account.id;
        // generate PoP token as needed
        const responseAccessToken = await this.generatePopAccessToken(response, request);
        const tokenType = request.tokenType === (0, _browser.AuthenticationScheme).POP ? (0, _browser.AuthenticationScheme).POP : (0, _browser.AuthenticationScheme).BEARER;
        const result = {
            authority: authority,
            uniqueId: uid,
            tenantId: tid,
            scopes: responseScopes.asArray(),
            account: accountInfo,
            idToken: response.id_token,
            idTokenClaims: idTokenClaims,
            accessToken: responseAccessToken,
            fromCache: mats ? this.isResponseFromCache(mats) : false,
            // Request timestamp and NativeResponse expires_in are in seconds, converting to Date for AuthenticationResult
            expiresOn: (0, _browser.TimeUtils).toDateFromSeconds(reqTimestamp + response.expires_in),
            tokenType: tokenType,
            correlationId: this.correlationId,
            state: response.state,
            fromNativeBroker: true
        };
        return result;
    }
    /**
     * cache the account entity in browser storage
     * @param accountEntity
     */ async cacheAccount(accountEntity, correlationId, kmsi) {
        // Store the account info and hence `nativeAccountId` in browser cache
        await this.browserStorage.setAccount(accountEntity, this.correlationId, kmsi);
        // Remove any existing cached tokens for this account in browser storage
        this.browserStorage.removeAccountContext((0, _browser.AccountEntity).getAccountInfo(accountEntity), correlationId);
    }
    /**
     * Stores the access_token and id_token in inmemory storage
     * @param response
     * @param request
     * @param homeAccountIdentifier
     * @param idTokenObj
     * @param responseAccessToken
     * @param tenantId
     * @param reqTimestamp
     */ cacheNativeTokens(response, request, homeAccountIdentifier, idTokenClaims, responseAccessToken, tenantId, reqTimestamp) {
        const cachedIdToken = (0, _browser.CacheHelpers).createIdTokenEntity(homeAccountIdentifier, request.authority, response.id_token || "", request.clientId, idTokenClaims.tid || "");
        // cache accessToken in inmemory storage
        const expiresIn = request.tokenType === (0, _browser.AuthenticationScheme).POP ? (0, _browser.Constants).SHR_NONCE_VALIDITY : (typeof response.expires_in === "string" ? parseInt(response.expires_in, 10) : response.expires_in) || 0;
        const tokenExpirationSeconds = reqTimestamp + expiresIn;
        const responseScopes = this.generateScopes(response.scope, request.scope);
        const cachedAccessToken = (0, _browser.CacheHelpers).createAccessTokenEntity(homeAccountIdentifier, request.authority, responseAccessToken, request.clientId, idTokenClaims.tid || tenantId, responseScopes.printScopes(), tokenExpirationSeconds, 0, (0, _base64DecodeMjs.base64Decode), undefined, request.tokenType, undefined, request.keyId);
        const nativeCacheRecord = {
            idToken: cachedIdToken,
            accessToken: cachedAccessToken
        };
        return this.nativeStorageManager.saveCacheRecord(nativeCacheRecord, this.correlationId, (0, _browser.AuthToken).isKmsi(idTokenClaims), request.storeInCache);
    }
    getExpiresInValue(tokenType, expiresIn) {
        return tokenType === (0, _browser.AuthenticationScheme).POP ? (0, _browser.Constants).SHR_NONCE_VALIDITY : (typeof expiresIn === "string" ? parseInt(expiresIn, 10) : expiresIn) || 0;
    }
    addTelemetryFromNativeResponse(matsResponse) {
        const mats = this.getMATSFromResponse(matsResponse);
        if (!mats) return null;
        this.performanceClient.addFields({
            extensionId: this.platformAuthProvider.getExtensionId(),
            extensionVersion: this.platformAuthProvider.getExtensionVersion(),
            matsBrokerVersion: mats.broker_version,
            matsAccountJoinOnStart: mats.account_join_on_start,
            matsAccountJoinOnEnd: mats.account_join_on_end,
            matsDeviceJoin: mats.device_join,
            matsPromptBehavior: mats.prompt_behavior,
            matsApiErrorCode: mats.api_error_code,
            matsUiVisible: mats.ui_visible,
            matsSilentCode: mats.silent_code,
            matsSilentBiSubCode: mats.silent_bi_sub_code,
            matsSilentMessage: mats.silent_message,
            matsSilentStatus: mats.silent_status,
            matsHttpStatus: mats.http_status,
            matsHttpEventCount: mats.http_event_count
        }, this.correlationId);
        return mats;
    }
    /**
     * Gets MATS telemetry from native response
     * @param response
     * @returns
     */ getMATSFromResponse(matsResponse) {
        if (matsResponse) try {
            return JSON.parse(matsResponse);
        } catch (e) {
            this.logger.error("NativeInteractionClient - Error parsing MATS telemetry, returning null instead");
        }
        return null;
    }
    /**
     * Returns whether or not response came from native cache
     * @param response
     * @returns
     */ isResponseFromCache(mats) {
        if (typeof mats.is_cached === "undefined") {
            this.logger.verbose("NativeInteractionClient - MATS telemetry does not contain field indicating if response was served from cache. Returning false.");
            return false;
        }
        return !!mats.is_cached;
    }
    /**
     * Translates developer provided request object into NativeRequest object
     * @param request
     */ async initializeNativeRequest(request) {
        this.logger.trace("NativeInteractionClient - initializeNativeRequest called");
        const canonicalAuthority = await this.getCanonicalAuthority(request);
        // scopes are expected to be received by the native broker as "scope" and will be added to the request below. Other properties that should be dropped from the request to the native broker can be included in the object destructuring here.
        const { scopes, ...remainingProperties } = request;
        const scopeSet = new (0, _browser.ScopeSet)(scopes || []);
        scopeSet.appendScopes((0, _browser.OIDC_DEFAULT_SCOPES));
        const validatedRequest = {
            ...remainingProperties,
            accountId: this.accountId,
            clientId: this.config.auth.clientId,
            authority: canonicalAuthority.urlString,
            scope: scopeSet.printScopes(),
            redirectUri: this.getRedirectUri(request.redirectUri),
            prompt: this.getPrompt(request.prompt),
            correlationId: this.correlationId,
            tokenType: request.authenticationScheme,
            windowTitleSubstring: document.title,
            extraParameters: {
                ...request.extraQueryParameters,
                ...request.tokenQueryParameters
            },
            extendedExpiryToken: false,
            keyId: request.popKid
        };
        // Check for PoP token requests: signPopToken should only be set to true if popKid is not set
        if (validatedRequest.signPopToken && !!request.popKid) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.invalidPopTokenRequest));
        this.handleExtraBrokerParams(validatedRequest);
        validatedRequest.extraParameters = validatedRequest.extraParameters || {};
        validatedRequest.extraParameters.telemetry = (0, _browserConstantsMjs.PlatformAuthConstants).MATS_TELEMETRY;
        if (request.authenticationScheme === (0, _browser.AuthenticationScheme).POP) {
            // add POP request type
            const shrParameters = {
                resourceRequestUri: request.resourceRequestUri,
                resourceRequestMethod: request.resourceRequestMethod,
                shrClaims: request.shrClaims,
                shrNonce: request.shrNonce
            };
            const popTokenGenerator = new (0, _browser.PopTokenGenerator)(this.browserCrypto);
            // generate reqCnf if not provided in the request
            let reqCnfData;
            if (!validatedRequest.keyId) {
                const generatedReqCnfData = await (0, _browser.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), (0, _browser.PerformanceEvents).PopTokenGenerateCnf, this.logger, this.performanceClient, this.correlationId)(shrParameters, this.logger);
                reqCnfData = generatedReqCnfData.reqCnfString;
                validatedRequest.keyId = generatedReqCnfData.kid;
                validatedRequest.signPopToken = true;
            } else {
                reqCnfData = this.browserCrypto.base64UrlEncode(JSON.stringify({
                    kid: validatedRequest.keyId
                }));
                validatedRequest.signPopToken = false;
            }
            // SPAs require whole string to be passed to broker
            validatedRequest.reqCnf = reqCnfData;
        }
        this.addRequestSKUs(validatedRequest);
        return validatedRequest;
    }
    async getCanonicalAuthority(request) {
        const requestAuthority = request.authority || this.config.auth.authority;
        if (request.account) // validate authority
        await this.getDiscoveredAuthority({
            requestAuthority,
            requestAzureCloudOptions: request.azureCloudOptions,
            account: request.account
        });
        const canonicalAuthority = new (0, _browser.UrlString)(requestAuthority);
        canonicalAuthority.validateAsUri();
        return canonicalAuthority;
    }
    getPrompt(prompt) {
        // If request is silent, prompt is always none
        switch(this.apiId){
            case (0, _browserConstantsMjs.ApiId).ssoSilent:
            case (0, _browserConstantsMjs.ApiId).acquireTokenSilent_silentFlow:
                this.logger.trace("initializeNativeRequest: silent request sets prompt to none");
                return (0, _browser.PromptValue).NONE;
        }
        // Prompt not provided, request may proceed and native broker decides if it needs to prompt
        if (!prompt) {
            this.logger.trace("initializeNativeRequest: prompt was not provided");
            return undefined;
        }
        // If request is interactive, check if prompt provided is allowed to go directly to native broker
        switch(prompt){
            case (0, _browser.PromptValue).NONE:
            case (0, _browser.PromptValue).CONSENT:
            case (0, _browser.PromptValue).LOGIN:
            case (0, _browser.PromptValue).SELECT_ACCOUNT:
                this.logger.trace("initializeNativeRequest: prompt is compatible with native flow");
                return prompt;
            default:
                this.logger.trace(`initializeNativeRequest: prompt = ${prompt} is not compatible with native flow`);
                throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.nativePromptNotSupported));
        }
    }
    /**
     * Handles extra broker request parameters
     * @param request {PlatformAuthRequest}
     * @private
     */ handleExtraBrokerParams(request) {
        const hasExtraBrokerParams = request.extraParameters && request.extraParameters.hasOwnProperty((0, _browser.AADServerParamKeys).BROKER_CLIENT_ID) && request.extraParameters.hasOwnProperty((0, _browser.AADServerParamKeys).BROKER_REDIRECT_URI) && request.extraParameters.hasOwnProperty((0, _browser.AADServerParamKeys).CLIENT_ID);
        if (!request.embeddedClientId && !hasExtraBrokerParams) return;
        let child_client_id = "";
        const child_redirect_uri = request.redirectUri;
        if (request.embeddedClientId) {
            request.redirectUri = this.config.auth.redirectUri;
            child_client_id = request.embeddedClientId;
        } else if (request.extraParameters) {
            request.redirectUri = request.extraParameters[(0, _browser.AADServerParamKeys).BROKER_REDIRECT_URI];
            child_client_id = request.extraParameters[(0, _browser.AADServerParamKeys).CLIENT_ID];
        }
        request.extraParameters = {
            child_client_id,
            child_redirect_uri
        };
        this.performanceClient?.addFields({
            embeddedClientId: child_client_id,
            embeddedRedirectUri: child_redirect_uri
        }, this.correlationId);
    }
}

},{"@azure/msal-common/browser":"aaatw","./BaseInteractionClient.mjs":"8aSyi","../utils/BrowserConstants.mjs":"kJowt","../error/NativeAuthError.mjs":"9Vr4p","../error/BrowserAuthError.mjs":"dg1Z3","./SilentCacheClient.mjs":"jAB2C","../encode/Base64Decode.mjs":"llQUH","../packageMetadata.mjs":"5lj1t","../error/BrowserAuthErrorCodes.mjs":"dwOM5","../error/NativeAuthErrorCodes.mjs":"9o4A3","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9Vr4p":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NativeAuthError", ()=>NativeAuthError);
parcelHelpers.export(exports, "NativeAuthErrorMessages", ()=>NativeAuthErrorMessages);
parcelHelpers.export(exports, "createNativeAuthError", ()=>createNativeAuthError);
parcelHelpers.export(exports, "isFatalNativeAuthError", ()=>isFatalNativeAuthError);
var _browser = require("@azure/msal-common/browser");
var _browserAuthErrorMjs = require("./BrowserAuthError.mjs");
var _nativeAuthErrorCodesMjs = require("./NativeAuthErrorCodes.mjs");
var _nativeStatusCodesMjs = require("../broker/nativeBroker/NativeStatusCodes.mjs");
var _browserAuthErrorCodesMjs = require("./BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const INVALID_METHOD_ERROR = -2147186943;
const NativeAuthErrorMessages = {
    [(0, _nativeAuthErrorCodesMjs.userSwitch)]: "User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again."
};
class NativeAuthError extends (0, _browser.AuthError) {
    constructor(errorCode, description, ext){
        super(errorCode, description);
        Object.setPrototypeOf(this, NativeAuthError.prototype);
        this.name = "NativeAuthError";
        this.ext = ext;
    }
}
/**
 * These errors should result in a fallback to the 'standard' browser based auth flow.
 */ function isFatalNativeAuthError(error) {
    if (error.ext && error.ext.status && error.ext.status === (0, _nativeStatusCodesMjs.DISABLED)) return true;
    if (error.ext && error.ext.error && error.ext.error === INVALID_METHOD_ERROR) return true;
    switch(error.errorCode){
        case 0, _nativeAuthErrorCodesMjs.contentError:
        case 0, _nativeAuthErrorCodesMjs.pageException:
            return true;
        default:
            return false;
    }
}
/**
 * Create the appropriate error object based on the WAM status code.
 * @param code
 * @param description
 * @param ext
 * @returns
 */ function createNativeAuthError(code, description, ext) {
    if (ext && ext.status) switch(ext.status){
        case 0, _nativeStatusCodesMjs.ACCOUNT_UNAVAILABLE:
            return (0, _browser.createInteractionRequiredAuthError)((0, _browser.InteractionRequiredAuthErrorCodes).nativeAccountUnavailable);
        case 0, _nativeStatusCodesMjs.USER_INTERACTION_REQUIRED:
            return new (0, _browser.InteractionRequiredAuthError)(code, description);
        case 0, _nativeStatusCodesMjs.USER_CANCEL:
            return (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.userCancelled));
        case 0, _nativeStatusCodesMjs.NO_NETWORK:
            return (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.noNetworkConnectivity));
        case 0, _nativeStatusCodesMjs.UX_NOT_ALLOWED:
            return (0, _browser.createInteractionRequiredAuthError)((0, _browser.InteractionRequiredAuthErrorCodes).uxNotAllowed);
    }
    return new NativeAuthError(code, NativeAuthErrorMessages[code] || description, ext);
}

},{"@azure/msal-common/browser":"aaatw","./BrowserAuthError.mjs":"dg1Z3","./NativeAuthErrorCodes.mjs":"9o4A3","../broker/nativeBroker/NativeStatusCodes.mjs":"3TDFJ","./BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9o4A3":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contentError", ()=>contentError);
parcelHelpers.export(exports, "pageException", ()=>pageException);
parcelHelpers.export(exports, "userSwitch", ()=>userSwitch);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ const contentError = "ContentError";
const pageException = "PageException";
const userSwitch = "user_switch";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"3TDFJ":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ACCOUNT_UNAVAILABLE", ()=>ACCOUNT_UNAVAILABLE);
parcelHelpers.export(exports, "DISABLED", ()=>DISABLED);
parcelHelpers.export(exports, "NO_NETWORK", ()=>NO_NETWORK);
parcelHelpers.export(exports, "USER_CANCEL", ()=>USER_CANCEL);
parcelHelpers.export(exports, "USER_INTERACTION_REQUIRED", ()=>USER_INTERACTION_REQUIRED);
parcelHelpers.export(exports, "UX_NOT_ALLOWED", ()=>UX_NOT_ALLOWED);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Status Codes that can be thrown by WAM
const USER_INTERACTION_REQUIRED = "USER_INTERACTION_REQUIRED";
const USER_CANCEL = "USER_CANCEL";
const NO_NETWORK = "NO_NETWORK";
const DISABLED = "DISABLED";
const ACCOUNT_UNAVAILABLE = "ACCOUNT_UNAVAILABLE";
const UX_NOT_ALLOWED = "UX_NOT_ALLOWED";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jAB2C":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentCacheClient", ()=>SilentCacheClient);
var _standardInteractionClientMjs = require("./StandardInteractionClient.mjs");
var _browser = require("@azure/msal-common/browser");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class SilentCacheClient extends (0, _standardInteractionClientMjs.StandardInteractionClient) {
    /**
     * Returns unexpired tokens from the cache, if available
     * @param silentRequest
     */ async acquireToken(silentRequest) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).SilentCacheClientAcquireToken, silentRequest.correlationId);
        // Telemetry manager only used to increment cacheHits here
        const serverTelemetryManager = this.initializeServerTelemetryManager((0, _browserConstantsMjs.ApiId).acquireTokenSilent_silentFlow);
        const clientConfig = await (0, _browser.invokeAsync)(this.getClientConfiguration.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)({
            serverTelemetryManager,
            requestAuthority: silentRequest.authority,
            requestAzureCloudOptions: silentRequest.azureCloudOptions,
            account: silentRequest.account
        });
        const silentAuthClient = new (0, _browser.SilentFlowClient)(clientConfig, this.performanceClient);
        this.logger.verbose("Silent auth client created");
        try {
            const response = await (0, _browser.invokeAsync)(silentAuthClient.acquireCachedToken.bind(silentAuthClient), (0, _browser.PerformanceEvents).SilentFlowClientAcquireCachedToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);
            const authResponse = response[0];
            this.performanceClient.addFields({
                fromCache: true
            }, silentRequest.correlationId);
            return authResponse;
        } catch (error) {
            if (error instanceof (0, _browserAuthErrorMjs.BrowserAuthError) && error.errorCode === (0, _browserAuthErrorCodesMjs.cryptoKeyNotFound)) this.logger.verbose("Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.");
            throw error;
        }
    }
    /**
     * API to silenty clear the browser cache.
     * @param logoutRequest
     */ logout(logoutRequest) {
        this.logger.verbose("logoutRedirect called");
        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
        return this.clearCacheOnLogout(validLogoutRequest.correlationId, validLogoutRequest?.account);
    }
}

},{"./StandardInteractionClient.mjs":"7vHoG","@azure/msal-common/browser":"aaatw","../utils/BrowserConstants.mjs":"kJowt","../error/BrowserAuthError.mjs":"dg1Z3","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"2JzjF":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generatePkceCodes", ()=>generatePkceCodes);
var _browser = require("@azure/msal-common/browser");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _base64EncodeMjs = require("../encode/Base64Encode.mjs");
var _browserCryptoMjs = require("./BrowserCrypto.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Constant byte array length
const RANDOM_BYTE_ARR_LENGTH = 32;
/**
 * This file defines APIs to generate PKCE codes and code verifiers.
 */ /**
 * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636
 */ async function generatePkceCodes(performanceClient, logger, correlationId) {
    performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).GeneratePkceCodes, correlationId);
    const codeVerifier = (0, _browser.invoke)(generateCodeVerifier, (0, _browser.PerformanceEvents).GenerateCodeVerifier, logger, performanceClient, correlationId)(performanceClient, logger, correlationId);
    const codeChallenge = await (0, _browser.invokeAsync)(generateCodeChallengeFromVerifier, (0, _browser.PerformanceEvents).GenerateCodeChallengeFromVerifier, logger, performanceClient, correlationId)(codeVerifier, performanceClient, logger, correlationId);
    return {
        verifier: codeVerifier,
        challenge: codeChallenge
    };
}
/**
 * Generates a random 32 byte buffer and returns the base64
 * encoded string to be used as a PKCE Code Verifier
 */ function generateCodeVerifier(performanceClient, logger, correlationId) {
    try {
        // Generate random values as utf-8
        const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);
        (0, _browser.invoke)((0, _browserCryptoMjs.getRandomValues), (0, _browser.PerformanceEvents).GetRandomValues, logger, performanceClient, correlationId)(buffer);
        // encode verifier as base64
        const pkceCodeVerifierB64 = (0, _base64EncodeMjs.urlEncodeArr)(buffer);
        return pkceCodeVerifierB64;
    } catch (e) {
        throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.pkceNotCreated));
    }
}
/**
 * Creates a base64 encoded PKCE Code Challenge string from the
 * hash created from the PKCE Code Verifier supplied
 */ async function generateCodeChallengeFromVerifier(pkceCodeVerifier, performanceClient, logger, correlationId) {
    performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).GenerateCodeChallengeFromVerifier, correlationId);
    try {
        // hashed verifier
        const pkceHashedCodeVerifier = await (0, _browser.invokeAsync)((0, _browserCryptoMjs.sha256Digest), (0, _browser.PerformanceEvents).Sha256Digest, logger, performanceClient, correlationId)(pkceCodeVerifier, performanceClient, correlationId);
        // encode hash as base64
        return (0, _base64EncodeMjs.urlEncodeArr)(new Uint8Array(pkceHashedCodeVerifier));
    } catch (e) {
        throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.pkceNotCreated));
    }
}

},{"@azure/msal-common/browser":"aaatw","../error/BrowserAuthError.mjs":"dg1Z3","../encode/Base64Encode.mjs":"bWn1N","./BrowserCrypto.mjs":"8sZR9","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9DUuE":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPlatformAuthProvider", ()=>getPlatformAuthProvider);
parcelHelpers.export(exports, "isDomEnabledForPlatformAuth", ()=>isDomEnabledForPlatformAuth);
parcelHelpers.export(exports, "isPlatformAuthAllowed", ()=>isPlatformAuthAllowed);
parcelHelpers.export(exports, "isPlatformBrokerAvailable", ()=>isPlatformBrokerAvailable);
var _browser = require("@azure/msal-common/browser");
var _packageMetadataMjs = require("../../packageMetadata.mjs");
var _configurationMjs = require("../../config/Configuration.mjs");
var _platformAuthExtensionHandlerMjs = require("./PlatformAuthExtensionHandler.mjs");
var _platformAuthDOMHandlerMjs = require("./PlatformAuthDOMHandler.mjs");
var _browserCryptoMjs = require("../../crypto/BrowserCrypto.mjs");
var _browserConstantsMjs = require("../../utils/BrowserConstants.mjs");
var _cacheKeysMjs = require("../../cache/CacheKeys.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Checks if the platform broker is available in the current environment.
 * @param loggerOptions
 * @param perfClient
 * @returns
 */ async function isPlatformBrokerAvailable(loggerOptions, perfClient, correlationId) {
    const logger = new (0, _browser.Logger)(loggerOptions || {}, (0, _packageMetadataMjs.name), (0, _packageMetadataMjs.version));
    logger.trace("isPlatformBrokerAvailable called");
    const performanceClient = perfClient || new (0, _browser.StubPerformanceClient)();
    if (typeof window === "undefined") {
        logger.trace("Non-browser environment detected, returning false");
        return false;
    }
    return !!await getPlatformAuthProvider(logger, performanceClient, correlationId || (0, _browserCryptoMjs.createNewGuid)());
}
async function getPlatformAuthProvider(logger, performanceClient, correlationId, nativeBrokerHandshakeTimeout) {
    logger.trace("getPlatformAuthProvider called", correlationId);
    const enablePlatformBrokerDOMSupport = isDomEnabledForPlatformAuth();
    logger.trace("Has client allowed platform auth via DOM API: " + enablePlatformBrokerDOMSupport);
    let platformAuthProvider;
    try {
        if (enablePlatformBrokerDOMSupport) // Check if DOM platform API is supported first
        platformAuthProvider = await (0, _platformAuthDOMHandlerMjs.PlatformAuthDOMHandler).createProvider(logger, performanceClient, correlationId);
        if (!platformAuthProvider) {
            logger.trace("Platform auth via DOM API not available, checking for extension");
            /*
             * If DOM APIs are not available, check if browser extension is available.
             * Platform authentication via DOM APIs is preferred over extension APIs.
             */ platformAuthProvider = await (0, _platformAuthExtensionHandlerMjs.PlatformAuthExtensionHandler).createProvider(logger, nativeBrokerHandshakeTimeout || (0, _configurationMjs.DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS), performanceClient);
        }
    } catch (e) {
        logger.trace("Platform auth not available", e);
    }
    return platformAuthProvider;
}
/**
 * Returns true if the DOM API support for platform auth is enabled in session storage
 * @returns boolean
 * @deprecated
 */ function isDomEnabledForPlatformAuth() {
    let sessionStorage;
    try {
        sessionStorage = window[(0, _browserConstantsMjs.BrowserCacheLocation).SessionStorage];
        // Mute errors if it's a non-browser environment or cookies are blocked.
        return sessionStorage?.getItem((0, _cacheKeysMjs.PLATFORM_AUTH_DOM_SUPPORT)) === "true";
    } catch (e) {
        return false;
    }
}
/**
 * Returns boolean indicating whether or not the request should attempt to use native broker
 * @param logger
 * @param config
 * @param platformAuthProvider
 * @param authenticationScheme
 */ function isPlatformAuthAllowed(config, logger, platformAuthProvider, authenticationScheme) {
    logger.trace("isPlatformAuthAllowed called");
    if (!config.system.allowPlatformBroker) {
        logger.trace("isPlatformAuthAllowed: allowPlatformBroker is not enabled, returning false");
        // Developer disabled WAM
        return false;
    }
    if (!platformAuthProvider) {
        logger.trace("isPlatformAuthAllowed: Platform auth provider is not initialized, returning false");
        // Platform broker auth providers are not available
        return false;
    }
    if (authenticationScheme) switch(authenticationScheme){
        case (0, _browser.AuthenticationScheme).BEARER:
        case (0, _browser.AuthenticationScheme).POP:
            logger.trace("isPlatformAuthAllowed: authenticationScheme is supported, returning true");
            return true;
        default:
            logger.trace("isPlatformAuthAllowed: authenticationScheme is not supported, returning false");
            return false;
    }
    return true;
}

},{"@azure/msal-common/browser":"aaatw","../../packageMetadata.mjs":"5lj1t","../../config/Configuration.mjs":"6o3nA","./PlatformAuthExtensionHandler.mjs":"c4XvU","./PlatformAuthDOMHandler.mjs":"92dYg","../../crypto/BrowserCrypto.mjs":"8sZR9","../../utils/BrowserConstants.mjs":"kJowt","../../cache/CacheKeys.mjs":"aZQPA","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"c4XvU":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PlatformAuthExtensionHandler", ()=>PlatformAuthExtensionHandler);
var _browserConstantsMjs = require("../../utils/BrowserConstants.mjs");
var _browser = require("@azure/msal-common/browser");
var _nativeAuthErrorMjs = require("../../error/NativeAuthError.mjs");
var _browserAuthErrorMjs = require("../../error/BrowserAuthError.mjs");
var _browserCryptoMjs = require("../../crypto/BrowserCrypto.mjs");
var _browserAuthErrorCodesMjs = require("../../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class PlatformAuthExtensionHandler {
    constructor(logger, handshakeTimeoutMs, performanceClient, extensionId){
        this.logger = logger;
        this.handshakeTimeoutMs = handshakeTimeoutMs;
        this.extensionId = extensionId;
        this.resolvers = new Map(); // Used for non-handshake messages
        this.handshakeResolvers = new Map(); // Used for handshake messages
        this.messageChannel = new MessageChannel();
        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound
        this.performanceClient = performanceClient;
        this.handshakeEvent = performanceClient.startMeasurement((0, _browser.PerformanceEvents).NativeMessageHandlerHandshake);
        this.platformAuthType = (0, _browserConstantsMjs.PlatformAuthConstants).PLATFORM_EXTENSION_PROVIDER;
    }
    /**
     * Sends a given message to the extension and resolves with the extension response
     * @param request
     */ async sendMessage(request) {
        this.logger.trace(this.platformAuthType + " - sendMessage called.");
        // fall back to native calls
        const messageBody = {
            method: (0, _browserConstantsMjs.NativeExtensionMethod).GetToken,
            request: request
        };
        const req = {
            channel: (0, _browserConstantsMjs.PlatformAuthConstants).CHANNEL_ID,
            extensionId: this.extensionId,
            responseId: (0, _browserCryptoMjs.createNewGuid)(),
            body: messageBody
        };
        this.logger.trace(this.platformAuthType + " - Sending request to browser extension");
        this.logger.tracePii(this.platformAuthType + ` - Sending request to browser extension: ${JSON.stringify(req)}`);
        this.messageChannel.port1.postMessage(req);
        const response = await new Promise((resolve, reject)=>{
            this.resolvers.set(req.responseId, {
                resolve,
                reject
            });
        });
        const validatedResponse = this.validatePlatformBrokerResponse(response);
        return validatedResponse;
    }
    /**
     * Returns an instance of the MessageHandler that has successfully established a connection with an extension
     * @param {Logger} logger
     * @param {number} handshakeTimeoutMs
     * @param {IPerformanceClient} performanceClient
     * @param {ICrypto} crypto
     */ static async createProvider(logger, handshakeTimeoutMs, performanceClient) {
        logger.trace("PlatformAuthExtensionHandler - createProvider called.");
        try {
            const preferredProvider = new PlatformAuthExtensionHandler(logger, handshakeTimeoutMs, performanceClient, (0, _browserConstantsMjs.PlatformAuthConstants).PREFERRED_EXTENSION_ID);
            await preferredProvider.sendHandshakeRequest();
            return preferredProvider;
        } catch (e) {
            // If preferred extension fails for whatever reason, fallback to using any installed extension
            const backupProvider = new PlatformAuthExtensionHandler(logger, handshakeTimeoutMs, performanceClient);
            await backupProvider.sendHandshakeRequest();
            return backupProvider;
        }
    }
    /**
     * Send handshake request helper.
     */ async sendHandshakeRequest() {
        this.logger.trace(this.platformAuthType + " - sendHandshakeRequest called.");
        // Register this event listener before sending handshake
        window.addEventListener("message", this.windowListener, false); // false is important, because content script message processing should work first
        const req = {
            channel: (0, _browserConstantsMjs.PlatformAuthConstants).CHANNEL_ID,
            extensionId: this.extensionId,
            responseId: (0, _browserCryptoMjs.createNewGuid)(),
            body: {
                method: (0, _browserConstantsMjs.NativeExtensionMethod).HandshakeRequest
            }
        };
        this.handshakeEvent.add({
            extensionId: this.extensionId,
            extensionHandshakeTimeoutMs: this.handshakeTimeoutMs
        });
        this.messageChannel.port1.onmessage = (event)=>{
            this.onChannelMessage(event);
        };
        window.postMessage(req, window.origin, [
            this.messageChannel.port2
        ]);
        return new Promise((resolve, reject)=>{
            this.handshakeResolvers.set(req.responseId, {
                resolve,
                reject
            });
            this.timeoutId = window.setTimeout(()=>{
                /*
                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.
                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port
                 */ window.removeEventListener("message", this.windowListener, false);
                this.messageChannel.port1.close();
                this.messageChannel.port2.close();
                this.handshakeEvent.end({
                    extensionHandshakeTimedOut: true,
                    success: false
                });
                reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.nativeHandshakeTimeout)));
                this.handshakeResolvers.delete(req.responseId);
            }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here
        });
    }
    /**
     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.
     * @param event
     */ onWindowMessage(event) {
        this.logger.trace(this.platformAuthType + " - onWindowMessage called");
        // We only accept messages from ourselves
        if (event.source !== window) return;
        const request = event.data;
        if (!request.channel || request.channel !== (0, _browserConstantsMjs.PlatformAuthConstants).CHANNEL_ID) return;
        if (request.extensionId && request.extensionId !== this.extensionId) return;
        if (request.body.method === (0, _browserConstantsMjs.NativeExtensionMethod).HandshakeRequest) {
            const handshakeResolver = this.handshakeResolvers.get(request.responseId);
            /*
             * Filter out responses with no matched resolvers sooner to keep channel ports open while waiting for
             * the proper response.
             */ if (!handshakeResolver) {
                this.logger.trace(this.platformAuthType + `.onWindowMessage - resolver can't be found for request ${request.responseId}`);
                return;
            }
            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed
            this.logger.verbose(request.extensionId ? `Extension with id: ${request.extensionId} not installed` : "No extension installed");
            clearTimeout(this.timeoutId);
            this.messageChannel.port1.close();
            this.messageChannel.port2.close();
            window.removeEventListener("message", this.windowListener, false);
            this.handshakeEvent.end({
                success: false,
                extensionInstalled: false
            });
            handshakeResolver.reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.nativeExtensionNotInstalled)));
        }
    }
    /**
     * Invoked when a message is received from the extension on the MessageChannel port
     * @param event
     */ onChannelMessage(event) {
        this.logger.trace(this.platformAuthType + " - onChannelMessage called.");
        const request = event.data;
        const resolver = this.resolvers.get(request.responseId);
        const handshakeResolver = this.handshakeResolvers.get(request.responseId);
        try {
            const method = request.body.method;
            if (method === (0, _browserConstantsMjs.NativeExtensionMethod).Response) {
                if (!resolver) return;
                const response = request.body.response;
                this.logger.trace(this.platformAuthType + " - Received response from browser extension");
                this.logger.tracePii(this.platformAuthType + ` - Received response from browser extension: ${JSON.stringify(response)}`);
                if (response.status !== "Success") resolver.reject((0, _nativeAuthErrorMjs.createNativeAuthError)(response.code, response.description, response.ext));
                else if (response.result) {
                    if (response.result["code"] && response.result["description"]) resolver.reject((0, _nativeAuthErrorMjs.createNativeAuthError)(response.result["code"], response.result["description"], response.result["ext"]));
                    else resolver.resolve(response.result);
                } else throw (0, _browser.createAuthError)((0, _browser.AuthErrorCodes).unexpectedError, "Event does not contain result.");
                this.resolvers.delete(request.responseId);
            } else if (method === (0, _browserConstantsMjs.NativeExtensionMethod).HandshakeResponse) {
                if (!handshakeResolver) {
                    this.logger.trace(this.platformAuthType + `.onChannelMessage - resolver can't be found for request ${request.responseId}`);
                    return;
                }
                clearTimeout(this.timeoutId); // Clear setTimeout
                window.removeEventListener("message", this.windowListener, false); // Remove 'No extension' listener
                this.extensionId = request.extensionId;
                this.extensionVersion = request.body.version;
                this.logger.verbose(this.platformAuthType + ` - Received HandshakeResponse from extension: ${this.extensionId}`);
                this.handshakeEvent.end({
                    extensionInstalled: true,
                    success: true
                });
                handshakeResolver.resolve();
                this.handshakeResolvers.delete(request.responseId);
            }
        // Do nothing if method is not Response or HandshakeResponse
        } catch (err) {
            this.logger.error("Error parsing response from WAM Extension");
            this.logger.errorPii(`Error parsing response from WAM Extension: ${err}`);
            this.logger.errorPii(`Unable to parse ${event}`);
            if (resolver) resolver.reject(err);
            else if (handshakeResolver) handshakeResolver.reject(err);
        }
    }
    /**
     * Validates native platform response before processing
     * @param response
     */ validatePlatformBrokerResponse(response) {
        if (response.hasOwnProperty("access_token") && response.hasOwnProperty("id_token") && response.hasOwnProperty("client_info") && response.hasOwnProperty("account") && response.hasOwnProperty("scope") && response.hasOwnProperty("expires_in")) return response;
        else throw (0, _browser.createAuthError)((0, _browser.AuthErrorCodes).unexpectedError, "Response missing expected properties.");
    }
    /**
     * Returns the Id for the browser extension this handler is communicating with
     * @returns
     */ getExtensionId() {
        return this.extensionId;
    }
    /**
     * Returns the version for the browser extension this handler is communicating with
     * @returns
     */ getExtensionVersion() {
        return this.extensionVersion;
    }
    getExtensionName() {
        return this.getExtensionId() === (0, _browserConstantsMjs.PlatformAuthConstants).PREFERRED_EXTENSION_ID ? "chrome" : this.getExtensionId()?.length ? "unknown" : undefined;
    }
}

},{"../../utils/BrowserConstants.mjs":"kJowt","@azure/msal-common/browser":"aaatw","../../error/NativeAuthError.mjs":"9Vr4p","../../error/BrowserAuthError.mjs":"dg1Z3","../../crypto/BrowserCrypto.mjs":"8sZR9","../../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"92dYg":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PlatformAuthDOMHandler", ()=>PlatformAuthDOMHandler);
var _browser = require("@azure/msal-common/browser");
var _browserConstantsMjs = require("../../utils/BrowserConstants.mjs");
var _nativeAuthErrorMjs = require("../../error/NativeAuthError.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class PlatformAuthDOMHandler {
    constructor(logger, performanceClient, correlationId){
        this.logger = logger;
        this.performanceClient = performanceClient;
        this.correlationId = correlationId;
        this.platformAuthType = (0, _browserConstantsMjs.PlatformAuthConstants).PLATFORM_DOM_PROVIDER;
    }
    static async createProvider(logger, performanceClient, correlationId) {
        logger.trace("PlatformAuthDOMHandler: createProvider called");
        // @ts-ignore
        if (window.navigator?.platformAuthentication) {
            const supportedContracts = // @ts-ignore
            await window.navigator.platformAuthentication.getSupportedContracts((0, _browserConstantsMjs.PlatformAuthConstants).MICROSOFT_ENTRA_BROKERID);
            if (supportedContracts?.includes((0, _browserConstantsMjs.PlatformAuthConstants).PLATFORM_DOM_APIS)) {
                logger.trace("Platform auth api available in DOM");
                return new PlatformAuthDOMHandler(logger, performanceClient, correlationId);
            }
        }
        return undefined;
    }
    /**
     * Returns the Id for the broker extension this handler is communicating with
     * @returns
     */ getExtensionId() {
        return (0, _browserConstantsMjs.PlatformAuthConstants).MICROSOFT_ENTRA_BROKERID;
    }
    getExtensionVersion() {
        return "";
    }
    getExtensionName() {
        return (0, _browserConstantsMjs.PlatformAuthConstants).DOM_API_NAME;
    }
    /**
     * Send token request to platform broker via browser DOM API
     * @param request
     * @returns
     */ async sendMessage(request) {
        this.logger.trace(this.platformAuthType + " - Sending request to browser DOM API");
        try {
            const platformDOMRequest = this.initializePlatformDOMRequest(request);
            const response = // @ts-ignore
            await window.navigator.platformAuthentication.executeGetToken(platformDOMRequest);
            return this.validatePlatformBrokerResponse(response);
        } catch (e) {
            this.logger.error(this.platformAuthType + " - executeGetToken DOM API error");
            throw e;
        }
    }
    initializePlatformDOMRequest(request) {
        this.logger.trace(this.platformAuthType + " - initializeNativeDOMRequest called");
        const { accountId, clientId, authority, scope, redirectUri, correlationId, state, storeInCache, embeddedClientId, extraParameters, ...remainingProperties } = request;
        const validExtraParameters = this.getDOMExtraParams(remainingProperties);
        const platformDOMRequest = {
            accountId: accountId,
            brokerId: this.getExtensionId(),
            authority: authority,
            clientId: clientId,
            correlationId: correlationId || this.correlationId,
            extraParameters: {
                ...extraParameters,
                ...validExtraParameters
            },
            isSecurityTokenService: false,
            redirectUri: redirectUri,
            scope: scope,
            state: state,
            storeInCache: storeInCache,
            embeddedClientId: embeddedClientId
        };
        return platformDOMRequest;
    }
    validatePlatformBrokerResponse(response) {
        if (response.hasOwnProperty("isSuccess")) {
            if (response.hasOwnProperty("accessToken") && response.hasOwnProperty("idToken") && response.hasOwnProperty("clientInfo") && response.hasOwnProperty("account") && response.hasOwnProperty("scopes") && response.hasOwnProperty("expiresIn")) {
                this.logger.trace(this.platformAuthType + " - platform broker returned successful and valid response");
                return this.convertToPlatformBrokerResponse(response);
            } else if (response.hasOwnProperty("error")) {
                const errorResponse = response;
                if (errorResponse.isSuccess === false && errorResponse.error && errorResponse.error.code) {
                    this.logger.trace(this.platformAuthType + " - platform broker returned error response");
                    throw (0, _nativeAuthErrorMjs.createNativeAuthError)(errorResponse.error.code, errorResponse.error.description, {
                        error: parseInt(errorResponse.error.errorCode),
                        protocol_error: errorResponse.error.protocolError,
                        status: errorResponse.error.status,
                        properties: errorResponse.error.properties
                    });
                }
            }
        }
        throw (0, _browser.createAuthError)((0, _browser.AuthErrorCodes).unexpectedError, "Response missing expected properties.");
    }
    convertToPlatformBrokerResponse(response) {
        this.logger.trace(this.platformAuthType + " - convertToNativeResponse called");
        const nativeResponse = {
            access_token: response.accessToken,
            id_token: response.idToken,
            client_info: response.clientInfo,
            account: response.account,
            expires_in: response.expiresIn,
            scope: response.scopes,
            state: response.state || "",
            properties: response.properties || {},
            extendedLifetimeToken: response.extendedLifetimeToken ?? false,
            shr: response.proofOfPossessionPayload
        };
        return nativeResponse;
    }
    getDOMExtraParams(extraParameters) {
        const stringifiedParams = Object.entries(extraParameters).reduce((record, [key, value])=>{
            record[key] = String(value);
            return record;
        }, {});
        const validExtraParams = {
            ...stringifiedParams
        };
        return validExtraParams;
    }
}

},{"@azure/msal-common/browser":"aaatw","../../utils/BrowserConstants.mjs":"kJowt","../../error/NativeAuthError.mjs":"9Vr4p","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"ijbOg":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RedirectClient", ()=>RedirectClient);
var _browser = require("@azure/msal-common/browser");
var _standardInteractionClientMjs = require("./StandardInteractionClient.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _browserUtilsMjs = require("../utils/BrowserUtils.mjs");
var _eventTypeMjs = require("../event/EventType.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _responseHandlerMjs = require("../response/ResponseHandler.mjs");
var _authorizeMjs = require("../protocol/Authorize.mjs");
var _pkceGeneratorMjs = require("../crypto/PkceGenerator.mjs");
var _platformAuthProviderMjs = require("../broker/nativeBroker/PlatformAuthProvider.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function getNavigationType() {
    if (typeof window === "undefined" || typeof window.performance === "undefined" || typeof window.performance.getEntriesByType !== "function") return undefined;
    const navigationEntries = window.performance.getEntriesByType("navigation");
    const navigation = navigationEntries.length ? navigationEntries[0] : undefined;
    return navigation?.type;
}
class RedirectClient extends (0, _standardInteractionClientMjs.StandardInteractionClient) {
    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, platformAuthHandler, correlationId){
        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, platformAuthHandler, correlationId);
        this.nativeStorage = nativeStorageImpl;
    }
    /**
     * Redirects the page to the /authorize endpoint of the IDP
     * @param request
     */ async acquireToken(request) {
        const validRequest = await (0, _browser.invokeAsync)(this.initializeAuthorizationRequest.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, this.correlationId)(request, (0, _browserConstantsMjs.InteractionType).Redirect);
        validRequest.platformBroker = (0, _platformAuthProviderMjs.isPlatformAuthAllowed)(this.config, this.logger, this.platformAuthProvider, request.authenticationScheme);
        const handleBackButton = (event)=>{
            // Clear temporary cache if the back button is clicked during the redirect flow.
            if (event.persisted) {
                this.logger.verbose("Page was restored from back/forward cache. Clearing temporary cache.");
                this.browserStorage.resetRequestCache();
                this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).RESTORE_FROM_BFCACHE, (0, _browserConstantsMjs.InteractionType).Redirect);
            }
        };
        const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);
        this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);
        // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true
        this.browserStorage.setTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).ORIGIN_URI, redirectStartPage, true);
        // Clear temporary cache if the back button is clicked during the redirect flow.
        window.addEventListener("pageshow", handleBackButton);
        try {
            if (this.config.auth.protocolMode === (0, _browser.ProtocolMode).EAR) await this.executeEarFlow(validRequest);
            else await this.executeCodeFlow(validRequest, request.onRedirectNavigate);
        } catch (e) {
            if (e instanceof (0, _browser.AuthError)) e.setCorrelationId(this.correlationId);
            window.removeEventListener("pageshow", handleBackButton);
            throw e;
        }
    }
    /**
     * Executes auth code + PKCE flow
     * @param request
     * @returns
     */ async executeCodeFlow(request, onRedirectNavigate) {
        const correlationId = request.correlationId;
        const serverTelemetryManager = this.initializeServerTelemetryManager((0, _browserConstantsMjs.ApiId).acquireTokenRedirect);
        const pkceCodes = await (0, _browser.invokeAsync)((0, _pkceGeneratorMjs.generatePkceCodes), (0, _browser.PerformanceEvents).GeneratePkceCodes, this.logger, this.performanceClient, correlationId)(this.performanceClient, this.logger, correlationId);
        const redirectRequest = {
            ...request,
            codeChallenge: pkceCodes.challenge
        };
        this.browserStorage.cacheAuthorizeRequest(redirectRequest, pkceCodes.verifier);
        try {
            if (redirectRequest.httpMethod === (0, _browser.HttpMethod).POST) return await this.executeCodeFlowWithPost(redirectRequest);
            else {
                // Initialize the client
                const authClient = await (0, _browser.invokeAsync)(this.createAuthCodeClient.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({
                    serverTelemetryManager,
                    requestAuthority: redirectRequest.authority,
                    requestAzureCloudOptions: redirectRequest.azureCloudOptions,
                    requestExtraQueryParameters: redirectRequest.extraQueryParameters,
                    account: redirectRequest.account
                });
                // Create acquire token url.
                const navigateUrl = await (0, _browser.invokeAsync)((0, _authorizeMjs.getAuthCodeRequestUrl), (0, _browser.PerformanceEvents).GetAuthCodeUrl, this.logger, this.performanceClient, request.correlationId)(this.config, authClient.authority, redirectRequest, this.logger, this.performanceClient);
                // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.
                return await this.initiateAuthRequest(navigateUrl, onRedirectNavigate);
            }
        } catch (e) {
            if (e instanceof (0, _browser.AuthError)) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            throw e;
        }
    }
    /**
     * Executes EAR flow
     * @param request
     */ async executeEarFlow(request) {
        const correlationId = request.correlationId;
        // Get the frame handle for the silent request
        const discoveredAuthority = await (0, _browser.invokeAsync)(this.getDiscoveredAuthority.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, correlationId)({
            requestAuthority: request.authority,
            requestAzureCloudOptions: request.azureCloudOptions,
            requestExtraQueryParameters: request.extraQueryParameters,
            account: request.account
        });
        const earJwk = await (0, _browser.invokeAsync)((0, _browserCryptoMjs.generateEarKey), (0, _browser.PerformanceEvents).GenerateEarKey, this.logger, this.performanceClient, correlationId)();
        const redirectRequest = {
            ...request,
            earJwk: earJwk
        };
        this.browserStorage.cacheAuthorizeRequest(redirectRequest);
        const form = await (0, _authorizeMjs.getEARForm)(document, this.config, discoveredAuthority, redirectRequest, this.logger, this.performanceClient);
        form.submit();
        return new Promise((resolve, reject)=>{
            setTimeout(()=>{
                reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.timedOut), "failed_to_redirect"));
            }, this.config.system.redirectNavigationTimeout);
        });
    }
    /**
     * Executes classic Authorization Code flow with a POST request.
     * @param request
     */ async executeCodeFlowWithPost(request) {
        const correlationId = request.correlationId;
        // Get the frame handle for the silent request
        const discoveredAuthority = await (0, _browser.invokeAsync)(this.getDiscoveredAuthority.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, correlationId)({
            requestAuthority: request.authority,
            requestAzureCloudOptions: request.azureCloudOptions,
            requestExtraQueryParameters: request.extraQueryParameters,
            account: request.account
        });
        this.browserStorage.cacheAuthorizeRequest(request);
        const form = await (0, _authorizeMjs.getCodeForm)(document, this.config, discoveredAuthority, request, this.logger, this.performanceClient);
        form.submit();
        return new Promise((resolve, reject)=>{
            setTimeout(()=>{
                reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.timedOut), "failed_to_redirect"));
            }, this.config.system.redirectNavigationTimeout);
        });
    }
    /**
     * Checks if navigateToLoginRequestUrl is set, and:
     * - if true, performs logic to cache and navigate
     * - if false, handles hash string and parses response
     * @param hash {string} url hash
     * @param parentMeasurement {InProgressPerformanceEvent} parent measurement
     */ async handleRedirectPromise(hash = "", request, pkceVerifier, parentMeasurement) {
        const serverTelemetryManager = this.initializeServerTelemetryManager((0, _browserConstantsMjs.ApiId).handleRedirectPromise);
        try {
            const [serverParams, responseString] = this.getRedirectResponse(hash || "");
            if (!serverParams) {
                // Not a recognized server response hash or hash not associated with a redirect request
                this.logger.info("handleRedirectPromise did not detect a response as a result of a redirect. Cleaning temporary cache.");
                this.browserStorage.resetRequestCache();
                // Do not instrument "no_server_response" if user clicked back button
                if (getNavigationType() !== "back_forward") parentMeasurement.event.errorCode = "no_server_response";
                else this.logger.verbose("Back navigation event detected. Muting no_server_response error");
                return null;
            }
            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated
            const loginRequestUrl = this.browserStorage.getTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).ORIGIN_URI, true) || (0, _browser.Constants).EMPTY_STRING;
            const loginRequestUrlNormalized = (0, _browser.UrlUtils).normalizeUrlForComparison(loginRequestUrl);
            const currentUrlNormalized = (0, _browser.UrlUtils).normalizeUrlForComparison(window.location.href);
            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {
                // We are on the page we need to navigate to - handle hash
                this.logger.verbose("Current page is loginRequestUrl, handling response");
                if (loginRequestUrl.indexOf("#") > -1) // Replace current hash with non-msal hash, if present
                (0, _browserUtilsMjs.replaceHash)(loginRequestUrl);
                const handleHashResult = await this.handleResponse(serverParams, request, pkceVerifier, serverTelemetryManager);
                return handleHashResult;
            } else if (!this.config.auth.navigateToLoginRequestUrl) {
                this.logger.verbose("NavigateToLoginRequestUrl set to false, handling response");
                return await this.handleResponse(serverParams, request, pkceVerifier, serverTelemetryManager);
            } else if (!(0, _browserUtilsMjs.isInIframe)() || this.config.system.allowRedirectInIframe) {
                /*
                 * Returned from authority using redirect - need to perform navigation before processing response
                 * Cache the hash to be retrieved after the next redirect
                 */ this.browserStorage.setTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).URL_HASH, responseString, true);
                const navigationOptions = {
                    apiId: (0, _browserConstantsMjs.ApiId).handleRedirectPromise,
                    timeout: this.config.system.redirectNavigationTimeout,
                    noHistory: true
                };
                /**
                 * Default behavior is to redirect to the start page and not process the hash now.
                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.
                 */ let processHashOnRedirect = true;
                if (!loginRequestUrl || loginRequestUrl === "null") {
                    // Redirect to home page if login request url is null (real null or the string null)
                    const homepage = (0, _browserUtilsMjs.getHomepage)();
                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage
                    this.browserStorage.setTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).ORIGIN_URI, homepage, true);
                    this.logger.warning("Unable to get valid login request url from cache, redirecting to home page");
                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);
                } else {
                    // Navigate to page that initiated the redirect request
                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);
                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);
                }
                // If navigateInternal implementation returns false, handle the hash now
                if (!processHashOnRedirect) return await this.handleResponse(serverParams, request, pkceVerifier, serverTelemetryManager);
            }
            return null;
        } catch (e) {
            if (e instanceof (0, _browser.AuthError)) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            throw e;
        }
    }
    /**
     * Gets the response hash for a redirect request
     * Returns null if interactionType in the state value is not "redirect" or the hash does not contain known properties
     * @param hash
     */ getRedirectResponse(userProvidedResponse) {
        this.logger.verbose("getRedirectResponseHash called");
        // Get current location hash from window or cache.
        let responseString = userProvidedResponse;
        if (!responseString) {
            if (this.config.auth.OIDCOptions.serverResponseType === (0, _browser.ServerResponseType).QUERY) responseString = window.location.search;
            else responseString = window.location.hash;
        }
        let response = (0, _browser.UrlUtils).getDeserializedResponse(responseString);
        if (response) {
            try {
                (0, _responseHandlerMjs.validateInteractionType)(response, this.browserCrypto, (0, _browserConstantsMjs.InteractionType).Redirect);
            } catch (e) {
                if (e instanceof (0, _browser.AuthError)) this.logger.error(`Interaction type validation failed due to ${e.errorCode}: ${e.errorMessage}`);
                return [
                    null,
                    ""
                ];
            }
            (0, _browserUtilsMjs.clearHash)(window);
            this.logger.verbose("Hash contains known properties, returning response hash");
            return [
                response,
                responseString
            ];
        }
        const cachedHash = this.browserStorage.getTemporaryCache((0, _browserConstantsMjs.TemporaryCacheKeys).URL_HASH, true);
        this.browserStorage.removeItem(this.browserStorage.generateCacheKey((0, _browserConstantsMjs.TemporaryCacheKeys).URL_HASH));
        if (cachedHash) {
            response = (0, _browser.UrlUtils).getDeserializedResponse(cachedHash);
            if (response) {
                this.logger.verbose("Hash does not contain known properties, returning cached hash");
                return [
                    response,
                    cachedHash
                ];
            }
        }
        return [
            null,
            ""
        ];
    }
    /**
     * Checks if hash exists and handles in window.
     * @param hash
     * @param state
     */ async handleResponse(serverParams, request, codeVerifier, serverTelemetryManager) {
        const state = serverParams.state;
        if (!state) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.noStateInHash));
        if (serverParams.ear_jwe) {
            const discoveredAuthority = await (0, _browser.invokeAsync)(this.getDiscoveredAuthority.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, request.correlationId)({
                requestAuthority: request.authority,
                requestAzureCloudOptions: request.azureCloudOptions,
                requestExtraQueryParameters: request.extraQueryParameters,
                account: request.account
            });
            return (0, _browser.invokeAsync)((0, _authorizeMjs.handleResponseEAR), (0, _browser.PerformanceEvents).HandleResponseEar, this.logger, this.performanceClient, request.correlationId)(request, serverParams, (0, _browserConstantsMjs.ApiId).acquireTokenRedirect, this.config, discoveredAuthority, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.platformAuthProvider);
        }
        const authClient = await (0, _browser.invokeAsync)(this.createAuthCodeClient.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({
            serverTelemetryManager,
            requestAuthority: request.authority
        });
        return (0, _browser.invokeAsync)((0, _authorizeMjs.handleResponseCode), (0, _browser.PerformanceEvents).HandleResponseCode, this.logger, this.performanceClient, request.correlationId)(request, serverParams, codeVerifier, (0, _browserConstantsMjs.ApiId).acquireTokenRedirect, this.config, authClient, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.platformAuthProvider);
    }
    /**
     * Redirects window to given URL.
     * @param urlNavigate
     * @param onRedirectNavigateRequest - onRedirectNavigate callback provided on the request
     */ async initiateAuthRequest(requestUrl, onRedirectNavigateRequest) {
        this.logger.verbose("RedirectHandler.initiateAuthRequest called");
        // Navigate if valid URL
        if (requestUrl) {
            this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);
            const navigationOptions = {
                apiId: (0, _browserConstantsMjs.ApiId).acquireTokenRedirect,
                timeout: this.config.system.redirectNavigationTimeout,
                noHistory: false
            };
            const onRedirectNavigate = onRedirectNavigateRequest || this.config.auth.onRedirectNavigate;
            // If onRedirectNavigate is implemented, invoke it and provide requestUrl
            if (typeof onRedirectNavigate === "function") {
                this.logger.verbose("RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback");
                const navigate = onRedirectNavigate(requestUrl);
                // Returning false from onRedirectNavigate will stop navigation
                if (navigate !== false) {
                    this.logger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating");
                    await this.navigationClient.navigateExternal(requestUrl, navigationOptions);
                    return;
                } else {
                    this.logger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation");
                    return;
                }
            } else {
                // Navigate window to request URL
                this.logger.verbose("RedirectHandler.initiateAuthRequest: Navigating window to navigate url");
                await this.navigationClient.navigateExternal(requestUrl, navigationOptions);
                return;
            }
        } else {
            // Throw error if request URL is empty.
            this.logger.info("RedirectHandler.initiateAuthRequest: Navigate url is empty");
            throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.emptyNavigateUri));
        }
    }
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */ async logout(logoutRequest) {
        this.logger.verbose("logoutRedirect called");
        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
        const serverTelemetryManager = this.initializeServerTelemetryManager((0, _browserConstantsMjs.ApiId).logout);
        try {
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_START, (0, _browserConstantsMjs.InteractionType).Redirect, logoutRequest);
            // Clear cache on logout
            await this.clearCacheOnLogout(this.correlationId, validLogoutRequest.account);
            const navigationOptions = {
                apiId: (0, _browserConstantsMjs.ApiId).logout,
                timeout: this.config.system.redirectNavigationTimeout,
                noHistory: false
            };
            const authClient = await (0, _browser.invokeAsync)(this.createAuthCodeClient.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({
                serverTelemetryManager,
                requestAuthority: logoutRequest && logoutRequest.authority,
                requestExtraQueryParameters: logoutRequest?.extraQueryParameters,
                account: logoutRequest && logoutRequest.account || undefined
            });
            if (authClient.authority.protocolMode === (0, _browser.ProtocolMode).OIDC) try {
                authClient.authority.endSessionEndpoint;
            } catch  {
                if (validLogoutRequest.account?.homeAccountId) {
                    this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_SUCCESS, (0, _browserConstantsMjs.InteractionType).Redirect, validLogoutRequest);
                    return;
                }
            }
            // Create logout string and navigate user window to logout.
            const logoutUri = authClient.getLogoutUri(validLogoutRequest);
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_SUCCESS, (0, _browserConstantsMjs.InteractionType).Redirect, validLogoutRequest);
            // Check if onRedirectNavigate is implemented, and invoke it if so
            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === "function") {
                const navigate = logoutRequest.onRedirectNavigate(logoutUri);
                if (navigate !== false) {
                    this.logger.verbose("Logout onRedirectNavigate did not return false, navigating");
                    // Ensure interaction is in progress
                    if (!this.browserStorage.getInteractionInProgress()) this.browserStorage.setInteractionInProgress(true, (0, _browserConstantsMjs.INTERACTION_TYPE).SIGNOUT);
                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);
                    return;
                } else {
                    // Ensure interaction is not in progress
                    this.browserStorage.setInteractionInProgress(false);
                    this.logger.verbose("Logout onRedirectNavigate returned false, stopping navigation");
                }
            } else {
                // Ensure interaction is in progress
                if (!this.browserStorage.getInteractionInProgress()) this.browserStorage.setInteractionInProgress(true, (0, _browserConstantsMjs.INTERACTION_TYPE).SIGNOUT);
                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);
                return;
            }
        } catch (e) {
            if (e instanceof (0, _browser.AuthError)) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_FAILURE, (0, _browserConstantsMjs.InteractionType).Redirect, null, e);
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_END, (0, _browserConstantsMjs.InteractionType).Redirect);
            throw e;
        }
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).LOGOUT_END, (0, _browserConstantsMjs.InteractionType).Redirect);
    }
    /**
     * Use to get the redirectStartPage either from request or use current window
     * @param requestStartPage
     */ getRedirectStartPage(requestStartPage) {
        const redirectStartPage = requestStartPage || window.location.href;
        return (0, _browser.UrlString).getAbsoluteUrl(redirectStartPage, (0, _browserUtilsMjs.getCurrentUri)());
    }
}

},{"@azure/msal-common/browser":"aaatw","./StandardInteractionClient.mjs":"7vHoG","../utils/BrowserConstants.mjs":"kJowt","../utils/BrowserUtils.mjs":"77mxR","../event/EventType.mjs":"aw4MU","../error/BrowserAuthError.mjs":"dg1Z3","../response/ResponseHandler.mjs":"iJMqg","../protocol/Authorize.mjs":"aDMIM","../crypto/PkceGenerator.mjs":"2JzjF","../broker/nativeBroker/PlatformAuthProvider.mjs":"9DUuE","../crypto/BrowserCrypto.mjs":"8sZR9","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"fhN9b":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentIframeClient", ()=>SilentIframeClient);
var _browser = require("@azure/msal-common/browser");
var _standardInteractionClientMjs = require("./StandardInteractionClient.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _silentHandlerMjs = require("../interaction_handler/SilentHandler.mjs");
var _browserUtilsMjs = require("../utils/BrowserUtils.mjs");
var _responseHandlerMjs = require("../response/ResponseHandler.mjs");
var _authorizeMjs = require("../protocol/Authorize.mjs");
var _pkceGeneratorMjs = require("../crypto/PkceGenerator.mjs");
var _platformAuthProviderMjs = require("../broker/nativeBroker/PlatformAuthProvider.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class SilentIframeClient extends (0, _standardInteractionClientMjs.StandardInteractionClient) {
    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, platformAuthProvider, correlationId){
        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, platformAuthProvider, correlationId);
        this.apiId = apiId;
        this.nativeStorage = nativeStorageImpl;
    }
    /**
     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session
     * @param request
     */ async acquireToken(request) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).SilentIframeClientAcquireToken, request.correlationId);
        // Check that we have some SSO data
        if (!request.loginHint && !request.sid && (!request.account || !request.account.username)) this.logger.warning("No user hint provided. The authorization server may need more information to complete this request.");
        // Check the prompt value
        const inputRequest = {
            ...request
        };
        if (inputRequest.prompt) {
            if (inputRequest.prompt !== (0, _browser.PromptValue).NONE && inputRequest.prompt !== (0, _browser.PromptValue).NO_SESSION) {
                this.logger.warning(`SilentIframeClient. Replacing invalid prompt ${inputRequest.prompt} with ${(0, _browser.PromptValue).NONE}`);
                inputRequest.prompt = (0, _browser.PromptValue).NONE;
            }
        } else inputRequest.prompt = (0, _browser.PromptValue).NONE;
        // Create silent request
        const silentRequest = await (0, _browser.invokeAsync)(this.initializeAuthorizationRequest.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(inputRequest, (0, _browserConstantsMjs.InteractionType).Silent);
        silentRequest.platformBroker = (0, _platformAuthProviderMjs.isPlatformAuthAllowed)(this.config, this.logger, this.platformAuthProvider, silentRequest.authenticationScheme);
        (0, _browserUtilsMjs.preconnect)(silentRequest.authority);
        if (this.config.auth.protocolMode === (0, _browser.ProtocolMode).EAR) return this.executeEarFlow(silentRequest);
        else return this.executeCodeFlow(silentRequest);
    }
    /**
     * Executes auth code + PKCE flow
     * @param request
     * @returns
     */ async executeCodeFlow(request) {
        let authClient;
        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
        try {
            // Initialize the client
            authClient = await (0, _browser.invokeAsync)(this.createAuthCodeClient.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, request.correlationId)({
                serverTelemetryManager,
                requestAuthority: request.authority,
                requestAzureCloudOptions: request.azureCloudOptions,
                requestExtraQueryParameters: request.extraQueryParameters,
                account: request.account
            });
            return await (0, _browser.invokeAsync)(this.silentTokenHelper.bind(this), (0, _browser.PerformanceEvents).SilentIframeClientTokenHelper, this.logger, this.performanceClient, request.correlationId)(authClient, request);
        } catch (e) {
            if (e instanceof (0, _browser.AuthError)) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            if (!authClient || !(e instanceof (0, _browser.AuthError)) || e.errorCode !== (0, _browserConstantsMjs.BrowserConstants).INVALID_GRANT_ERROR) throw e;
            this.performanceClient.addFields({
                retryError: e.errorCode
            }, this.correlationId);
            return await (0, _browser.invokeAsync)(this.silentTokenHelper.bind(this), (0, _browser.PerformanceEvents).SilentIframeClientTokenHelper, this.logger, this.performanceClient, this.correlationId)(authClient, request);
        }
    }
    /**
     * Executes EAR flow
     * @param request
     */ async executeEarFlow(request) {
        const correlationId = request.correlationId;
        const discoveredAuthority = await (0, _browser.invokeAsync)(this.getDiscoveredAuthority.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, correlationId)({
            requestAuthority: request.authority,
            requestAzureCloudOptions: request.azureCloudOptions,
            requestExtraQueryParameters: request.extraQueryParameters,
            account: request.account
        });
        const earJwk = await (0, _browser.invokeAsync)((0, _browserCryptoMjs.generateEarKey), (0, _browser.PerformanceEvents).GenerateEarKey, this.logger, this.performanceClient, correlationId)();
        const silentRequest = {
            ...request,
            earJwk: earJwk
        };
        const msalFrame = await (0, _browser.invokeAsync)((0, _silentHandlerMjs.initiateEarRequest), (0, _browser.PerformanceEvents).SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, correlationId)(this.config, discoveredAuthority, silentRequest, this.logger, this.performanceClient);
        const responseType = this.config.auth.OIDCOptions.serverResponseType;
        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.
        const responseString = await (0, _browser.invokeAsync)((0, _silentHandlerMjs.monitorIframeForHash), (0, _browser.PerformanceEvents).SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(msalFrame, this.config.system.iframeHashTimeout, this.config.system.pollIntervalMilliseconds, this.performanceClient, this.logger, correlationId, responseType);
        const serverParams = (0, _browser.invoke)((0, _responseHandlerMjs.deserializeResponse), (0, _browser.PerformanceEvents).DeserializeResponse, this.logger, this.performanceClient, correlationId)(responseString, responseType, this.logger);
        return (0, _browser.invokeAsync)((0, _authorizeMjs.handleResponseEAR), (0, _browser.PerformanceEvents).HandleResponseEar, this.logger, this.performanceClient, correlationId)(silentRequest, serverParams, this.apiId, this.config, discoveredAuthority, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.platformAuthProvider);
    }
    /**
     * Currently Unsupported
     */ logout() {
        // Synchronous so we must reject
        return Promise.reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.silentLogoutUnsupported)));
    }
    /**
     * Helper which acquires an authorization code silently using a hidden iframe from given url
     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.
     * @param navigateUrl
     * @param userRequestScopes
     */ async silentTokenHelper(authClient, request) {
        const correlationId = request.correlationId;
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).SilentIframeClientTokenHelper, correlationId);
        const pkceCodes = await (0, _browser.invokeAsync)((0, _pkceGeneratorMjs.generatePkceCodes), (0, _browser.PerformanceEvents).GeneratePkceCodes, this.logger, this.performanceClient, correlationId)(this.performanceClient, this.logger, correlationId);
        const silentRequest = {
            ...request,
            codeChallenge: pkceCodes.challenge
        };
        let msalFrame;
        if (request.httpMethod === (0, _browser.HttpMethod).POST) msalFrame = await (0, _browser.invokeAsync)((0, _silentHandlerMjs.initiateCodeFlowWithPost), (0, _browser.PerformanceEvents).SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, correlationId)(this.config, authClient.authority, silentRequest, this.logger, this.performanceClient);
        else {
            // Create authorize request url
            const navigateUrl = await (0, _browser.invokeAsync)((0, _authorizeMjs.getAuthCodeRequestUrl), (0, _browser.PerformanceEvents).GetAuthCodeUrl, this.logger, this.performanceClient, correlationId)(this.config, authClient.authority, silentRequest, this.logger, this.performanceClient);
            // Get the frame handle for the silent request
            msalFrame = await (0, _browser.invokeAsync)((0, _silentHandlerMjs.initiateCodeRequest), (0, _browser.PerformanceEvents).SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, correlationId)(navigateUrl, this.performanceClient, this.logger, correlationId, this.config.system.navigateFrameWait);
        }
        const responseType = this.config.auth.OIDCOptions.serverResponseType;
        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.
        const responseString = await (0, _browser.invokeAsync)((0, _silentHandlerMjs.monitorIframeForHash), (0, _browser.PerformanceEvents).SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(msalFrame, this.config.system.iframeHashTimeout, this.config.system.pollIntervalMilliseconds, this.performanceClient, this.logger, correlationId, responseType);
        const serverParams = (0, _browser.invoke)((0, _responseHandlerMjs.deserializeResponse), (0, _browser.PerformanceEvents).DeserializeResponse, this.logger, this.performanceClient, correlationId)(responseString, responseType, this.logger);
        return (0, _browser.invokeAsync)((0, _authorizeMjs.handleResponseCode), (0, _browser.PerformanceEvents).HandleResponseCode, this.logger, this.performanceClient, correlationId)(request, serverParams, pkceCodes.verifier, this.apiId, this.config, authClient, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.platformAuthProvider);
    }
}

},{"@azure/msal-common/browser":"aaatw","./StandardInteractionClient.mjs":"7vHoG","../error/BrowserAuthError.mjs":"dg1Z3","../utils/BrowserConstants.mjs":"kJowt","../interaction_handler/SilentHandler.mjs":"bVPZi","../utils/BrowserUtils.mjs":"77mxR","../response/ResponseHandler.mjs":"iJMqg","../protocol/Authorize.mjs":"aDMIM","../crypto/PkceGenerator.mjs":"2JzjF","../broker/nativeBroker/PlatformAuthProvider.mjs":"9DUuE","../crypto/BrowserCrypto.mjs":"8sZR9","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"bVPZi":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initiateCodeFlowWithPost", ()=>initiateCodeFlowWithPost);
parcelHelpers.export(exports, "initiateCodeRequest", ()=>initiateCodeRequest);
parcelHelpers.export(exports, "initiateEarRequest", ()=>initiateEarRequest);
parcelHelpers.export(exports, "monitorIframeForHash", ()=>monitorIframeForHash);
var _browser = require("@azure/msal-common/browser");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _configurationMjs = require("../config/Configuration.mjs");
var _authorizeMjs = require("../protocol/Authorize.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Creates a hidden iframe to given URL using user-requested scopes as an id.
 * @param urlNavigate
 * @param userRequestScopes
 */ async function initiateCodeRequest(requestUrl, performanceClient, logger, correlationId, navigateFrameWait) {
    performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).SilentHandlerInitiateAuthRequest, correlationId);
    if (!requestUrl) {
        // Throw error if request URL is empty.
        logger.info("Navigate url is empty");
        throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.emptyNavigateUri));
    }
    if (navigateFrameWait) return (0, _browser.invokeAsync)(loadFrame, (0, _browser.PerformanceEvents).SilentHandlerLoadFrame, logger, performanceClient, correlationId)(requestUrl, navigateFrameWait, performanceClient, correlationId);
    return (0, _browser.invoke)(loadFrameSync, (0, _browser.PerformanceEvents).SilentHandlerLoadFrameSync, logger, performanceClient, correlationId)(requestUrl);
}
async function initiateCodeFlowWithPost(config, authority, request, logger, performanceClient) {
    const frame = createHiddenIframe();
    if (!frame.contentDocument) throw "No document associated with iframe!";
    const form = await (0, _authorizeMjs.getCodeForm)(frame.contentDocument, config, authority, request, logger, performanceClient);
    form.submit();
    return frame;
}
async function initiateEarRequest(config, authority, request, logger, performanceClient) {
    const frame = createHiddenIframe();
    if (!frame.contentDocument) throw "No document associated with iframe!";
    const form = await (0, _authorizeMjs.getEARForm)(frame.contentDocument, config, authority, request, logger, performanceClient);
    form.submit();
    return frame;
}
/**
 * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.
 * @param iframe
 * @param timeout
 */ async function monitorIframeForHash(iframe, timeout, pollIntervalMilliseconds, performanceClient, logger, correlationId, responseType) {
    performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).SilentHandlerMonitorIframeForHash, correlationId);
    return new Promise((resolve, reject)=>{
        if (timeout < (0, _configurationMjs.DEFAULT_IFRAME_TIMEOUT_MS)) logger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${(0, _configurationMjs.DEFAULT_IFRAME_TIMEOUT_MS)}ms). This may result in timeouts.`);
        /*
         * Polling for iframes can be purely timing based,
         * since we don't need to account for interaction.
         */ const timeoutId = window.setTimeout(()=>{
            window.clearInterval(intervalId);
            reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.monitorWindowTimeout)));
        }, timeout);
        const intervalId = window.setInterval(()=>{
            let href = "";
            const contentWindow = iframe.contentWindow;
            try {
                /*
                 * Will throw if cross origin,
                 * which should be caught and ignored
                 * since we need the interval to keep running while on STS UI.
                 */ href = contentWindow ? contentWindow.location.href : "";
            } catch (e) {}
            if (!href || href === "about:blank") return;
            let responseString = "";
            if (contentWindow) {
                if (responseType === (0, _browser.ServerResponseType).QUERY) responseString = contentWindow.location.search;
                else responseString = contentWindow.location.hash;
            }
            window.clearTimeout(timeoutId);
            window.clearInterval(intervalId);
            resolve(responseString);
        }, pollIntervalMilliseconds);
    }).finally(()=>{
        (0, _browser.invoke)(removeHiddenIframe, (0, _browser.PerformanceEvents).RemoveHiddenIframe, logger, performanceClient, correlationId)(iframe);
    });
}
/**
 * @hidden
 * Loads iframe with authorization endpoint URL
 * @ignore
 * @deprecated
 */ function loadFrame(urlNavigate, navigateFrameWait, performanceClient, correlationId) {
    performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).SilentHandlerLoadFrame, correlationId);
    /*
     * This trick overcomes iframe navigation in IE
     * IE does not load the page consistently in iframe
     */ return new Promise((resolve, reject)=>{
        const frameHandle = createHiddenIframe();
        window.setTimeout(()=>{
            if (!frameHandle) {
                reject("Unable to load iframe");
                return;
            }
            frameHandle.src = urlNavigate;
            resolve(frameHandle);
        }, navigateFrameWait);
    });
}
/**
 * @hidden
 * Loads the iframe synchronously when the navigateTimeFrame is set to `0`
 * @param urlNavigate
 * @param frameName
 * @param logger
 */ function loadFrameSync(urlNavigate) {
    const frameHandle = createHiddenIframe();
    frameHandle.src = urlNavigate;
    return frameHandle;
}
/**
 * @hidden
 * Creates a new hidden iframe or gets an existing one for silent token renewal.
 * @ignore
 */ function createHiddenIframe() {
    const authFrame = document.createElement("iframe");
    authFrame.className = "msalSilentIframe";
    authFrame.style.visibility = "hidden";
    authFrame.style.position = "absolute";
    authFrame.style.width = authFrame.style.height = "0";
    authFrame.style.border = "0";
    authFrame.setAttribute("sandbox", "allow-scripts allow-same-origin allow-forms");
    document.body.appendChild(authFrame);
    return authFrame;
}
/**
 * @hidden
 * Removes a hidden iframe from the page.
 * @ignore
 */ function removeHiddenIframe(iframe) {
    if (document.body === iframe.parentNode) document.body.removeChild(iframe);
}

},{"@azure/msal-common/browser":"aaatw","../error/BrowserAuthError.mjs":"dg1Z3","../config/Configuration.mjs":"6o3nA","../protocol/Authorize.mjs":"aDMIM","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"12nHG":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentRefreshClient", ()=>SilentRefreshClient);
var _standardInteractionClientMjs = require("./StandardInteractionClient.mjs");
var _browser = require("@azure/msal-common/browser");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _requestHelpersMjs = require("../request/RequestHelpers.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class SilentRefreshClient extends (0, _standardInteractionClientMjs.StandardInteractionClient) {
    /**
     * Exchanges the refresh token for new tokens
     * @param request
     */ async acquireToken(request) {
        this.performanceClient.addQueueMeasurement((0, _browser.PerformanceEvents).SilentRefreshClientAcquireToken, request.correlationId);
        const baseRequest = await (0, _browser.invokeAsync)((0, _requestHelpersMjs.initializeBaseRequest), (0, _browser.PerformanceEvents).InitializeBaseRequest, this.logger, this.performanceClient, request.correlationId)(request, this.config, this.performanceClient, this.logger);
        const silentRequest = {
            ...request,
            ...baseRequest
        };
        if (request.redirectUri) // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided
        silentRequest.redirectUri = this.getRedirectUri(request.redirectUri);
        const serverTelemetryManager = this.initializeServerTelemetryManager((0, _browserConstantsMjs.ApiId).acquireTokenSilent_silentFlow);
        const refreshTokenClient = await this.createRefreshTokenClient({
            serverTelemetryManager,
            authorityUrl: silentRequest.authority,
            azureCloudOptions: silentRequest.azureCloudOptions,
            account: silentRequest.account
        });
        // Send request to renew token. Auth module will throw errors if token cannot be renewed.
        return (0, _browser.invokeAsync)(refreshTokenClient.acquireTokenByRefreshToken.bind(refreshTokenClient), (0, _browser.PerformanceEvents).RefreshTokenClientAcquireTokenByRefreshToken, this.logger, this.performanceClient, request.correlationId)(silentRequest).catch((e)=>{
            e.setCorrelationId(this.correlationId);
            serverTelemetryManager.cacheFailedRequest(e);
            throw e;
        });
    }
    /**
     * Currently Unsupported
     */ logout() {
        // Synchronous so we must reject
        return Promise.reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.silentLogoutUnsupported)));
    }
    /**
     * Creates a Refresh Client with the given authority, or the default authority.
     * @param params {
     *         serverTelemetryManager: ServerTelemetryManager;
     *         authorityUrl?: string;
     *         azureCloudOptions?: AzureCloudOptions;
     *         extraQueryParams?: StringDict;
     *         account?: AccountInfo;
     *        }
     */ async createRefreshTokenClient(params) {
        // Create auth module.
        const clientConfig = await (0, _browser.invokeAsync)(this.getClientConfiguration.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)({
            serverTelemetryManager: params.serverTelemetryManager,
            requestAuthority: params.authorityUrl,
            requestAzureCloudOptions: params.azureCloudOptions,
            requestExtraQueryParameters: params.extraQueryParameters,
            account: params.account
        });
        return new (0, _browser.RefreshTokenClient)(clientConfig, this.performanceClient);
    }
}

},{"./StandardInteractionClient.mjs":"7vHoG","@azure/msal-common/browser":"aaatw","../utils/BrowserConstants.mjs":"kJowt","../error/BrowserAuthError.mjs":"dg1Z3","../request/RequestHelpers.mjs":"h8Zsw","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"cPyab":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TokenCache", ()=>TokenCache);
var _browser = require("@azure/msal-common/browser");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _base64DecodeMjs = require("../encode/Base64Decode.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Token cache manager
 */ class TokenCache {
    constructor(configuration, storage, logger, cryptoObj){
        this.isBrowserEnvironment = typeof window !== "undefined";
        this.config = configuration;
        this.storage = storage;
        this.logger = logger;
        this.cryptoObj = cryptoObj;
    }
    // Move getAllAccounts here and cache utility APIs
    /**
     * API to load tokens to msal-browser cache.
     * @param request
     * @param response
     * @param options
     * @returns `AuthenticationResult` for the response that was loaded.
     */ async loadExternalTokens(request, response, options) {
        if (!this.isBrowserEnvironment) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.nonBrowserEnvironment));
        const correlationId = request.correlationId || (0, _browserCryptoMjs.createNewGuid)();
        const idTokenClaims = response.id_token ? (0, _browser.AuthToken).extractTokenClaims(response.id_token, (0, _base64DecodeMjs.base64Decode)) : undefined;
        const kmsi = (0, _browser.AuthToken).isKmsi(idTokenClaims || {});
        const authorityOptions = {
            protocolMode: this.config.auth.protocolMode,
            knownAuthorities: this.config.auth.knownAuthorities,
            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
            authorityMetadata: this.config.auth.authorityMetadata,
            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache
        };
        const authority = request.authority ? new (0, _browser.Authority)((0, _browser.Authority).generateAuthority(request.authority, request.azureCloudOptions), this.config.system.networkClient, this.storage, authorityOptions, this.logger, request.correlationId || (0, _browserCryptoMjs.createNewGuid)()) : undefined;
        const cacheRecordAccount = await this.loadAccount(request, options.clientInfo || response.client_info || "", correlationId, idTokenClaims, authority);
        const idToken = await this.loadIdToken(response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment, cacheRecordAccount.realm, correlationId, kmsi);
        const accessToken = await this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment, cacheRecordAccount.realm, options, correlationId, kmsi);
        const refreshToken = await this.loadRefreshToken(response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment, correlationId, kmsi);
        return this.generateAuthenticationResult(request, {
            account: cacheRecordAccount,
            idToken,
            accessToken,
            refreshToken
        }, idTokenClaims, authority);
    }
    /**
     * Helper function to load account to msal-browser cache
     * @param idToken
     * @param environment
     * @param clientInfo
     * @param authorityType
     * @param requestHomeAccountId
     * @returns `AccountEntity`
     */ async loadAccount(request, clientInfo, correlationId, idTokenClaims, authority) {
        this.logger.verbose("TokenCache - loading account");
        if (request.account) {
            const accountEntity = (0, _browser.AccountEntity).createFromAccountInfo(request.account);
            await this.storage.setAccount(accountEntity, correlationId, (0, _browser.AuthToken).isKmsi(idTokenClaims || {}));
            return accountEntity;
        } else if (!authority || !clientInfo && !idTokenClaims) {
            this.logger.error("TokenCache - if an account is not provided on the request, authority and either clientInfo or idToken must be provided instead.");
            throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.unableToLoadToken));
        }
        const homeAccountId = (0, _browser.AccountEntity).generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);
        const claimsTenantId = idTokenClaims?.tid;
        const cachedAccount = (0, _browser.buildAccountToCache)(this.storage, authority, homeAccountId, (0, _base64DecodeMjs.base64Decode), correlationId, idTokenClaims, clientInfo, authority.hostnameAndPort, claimsTenantId, undefined, undefined, this.logger);
        await this.storage.setAccount(cachedAccount, correlationId, (0, _browser.AuthToken).isKmsi(idTokenClaims || {}));
        return cachedAccount;
    }
    /**
     * Helper function to load id tokens to msal-browser cache
     * @param idToken
     * @param homeAccountId
     * @param environment
     * @param tenantId
     * @returns `IdTokenEntity`
     */ async loadIdToken(response, homeAccountId, environment, tenantId, correlationId, kmsi) {
        if (!response.id_token) {
            this.logger.verbose("TokenCache - no id token found in response");
            return null;
        }
        this.logger.verbose("TokenCache - loading id token");
        const idTokenEntity = (0, _browser.CacheHelpers).createIdTokenEntity(homeAccountId, environment, response.id_token, this.config.auth.clientId, tenantId);
        await this.storage.setIdTokenCredential(idTokenEntity, correlationId, kmsi);
        return idTokenEntity;
    }
    /**
     * Helper function to load access tokens to msal-browser cache
     * @param request
     * @param response
     * @param homeAccountId
     * @param environment
     * @param tenantId
     * @returns `AccessTokenEntity`
     */ async loadAccessToken(request, response, homeAccountId, environment, tenantId, options, correlationId, kmsi) {
        if (!response.access_token) {
            this.logger.verbose("TokenCache - no access token found in response");
            return null;
        } else if (!response.expires_in) {
            this.logger.error("TokenCache - no expiration set on the access token. Cannot add it to the cache.");
            return null;
        } else if (!response.scope && (!request.scopes || !request.scopes.length)) {
            this.logger.error("TokenCache - scopes not specified in the request or response. Cannot add token to the cache.");
            return null;
        }
        this.logger.verbose("TokenCache - loading access token");
        const scopes = response.scope ? (0, _browser.ScopeSet).fromString(response.scope) : new (0, _browser.ScopeSet)(request.scopes);
        const expiresOn = options.expiresOn || response.expires_in + (0, _browser.TimeUtils).nowSeconds();
        const extendedExpiresOn = options.extendedExpiresOn || (response.ext_expires_in || response.expires_in) + (0, _browser.TimeUtils).nowSeconds();
        const accessTokenEntity = (0, _browser.CacheHelpers).createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes.printScopes(), expiresOn, extendedExpiresOn, (0, _base64DecodeMjs.base64Decode));
        await this.storage.setAccessTokenCredential(accessTokenEntity, correlationId, kmsi);
        return accessTokenEntity;
    }
    /**
     * Helper function to load refresh tokens to msal-browser cache
     * @param request
     * @param response
     * @param homeAccountId
     * @param environment
     * @returns `RefreshTokenEntity`
     */ async loadRefreshToken(response, homeAccountId, environment, correlationId, kmsi) {
        if (!response.refresh_token) {
            this.logger.verbose("TokenCache - no refresh token found in response");
            return null;
        }
        this.logger.verbose("TokenCache - loading refresh token");
        const refreshTokenEntity = (0, _browser.CacheHelpers).createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId, response.foci, undefined, response.refresh_token_expires_in);
        await this.storage.setRefreshTokenCredential(refreshTokenEntity, correlationId, kmsi);
        return refreshTokenEntity;
    }
    /**
     * Helper function to generate an `AuthenticationResult` for the result.
     * @param request
     * @param idTokenObj
     * @param cacheRecord
     * @param authority
     * @returns `AuthenticationResult`
     */ generateAuthenticationResult(request, cacheRecord, idTokenClaims, authority) {
        let accessToken = "";
        let responseScopes = [];
        let expiresOn = null;
        let extExpiresOn;
        if (cacheRecord?.accessToken) {
            accessToken = cacheRecord.accessToken.secret;
            responseScopes = (0, _browser.ScopeSet).fromString(cacheRecord.accessToken.target).asArray();
            // Access token expiresOn stored in seconds, converting to Date for AuthenticationResult
            expiresOn = (0, _browser.TimeUtils).toDateFromSeconds(cacheRecord.accessToken.expiresOn);
            extExpiresOn = (0, _browser.TimeUtils).toDateFromSeconds(cacheRecord.accessToken.extendedExpiresOn);
        }
        const accountEntity = cacheRecord.account;
        return {
            authority: authority ? authority.canonicalAuthority : "",
            uniqueId: cacheRecord.account.localAccountId,
            tenantId: cacheRecord.account.realm,
            scopes: responseScopes,
            account: (0, _browser.AccountEntity).getAccountInfo(accountEntity),
            idToken: cacheRecord.idToken?.secret || "",
            idTokenClaims: idTokenClaims || {},
            accessToken: accessToken,
            fromCache: true,
            expiresOn: expiresOn,
            correlationId: request.correlationId || "",
            requestId: "",
            extExpiresOn: extExpiresOn,
            familyId: cacheRecord.refreshToken?.familyId || "",
            tokenType: cacheRecord?.accessToken?.tokenType || "",
            state: request.state || "",
            cloudGraphHostName: accountEntity.cloudGraphHostName || "",
            msGraphHost: accountEntity.msGraphHost || "",
            fromNativeBroker: false
        };
    }
}

},{"@azure/msal-common/browser":"aaatw","../error/BrowserAuthError.mjs":"dg1Z3","../encode/Base64Decode.mjs":"llQUH","../crypto/BrowserCrypto.mjs":"8sZR9","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"kNYXd":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentAuthCodeClient", ()=>SilentAuthCodeClient);
var _browser = require("@azure/msal-common/browser");
var _standardInteractionClientMjs = require("./StandardInteractionClient.mjs");
var _browserAuthErrorMjs = require("../error/BrowserAuthError.mjs");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _hybridSpaAuthorizationCodeClientMjs = require("./HybridSpaAuthorizationCodeClient.mjs");
var _interactionHandlerMjs = require("../interaction_handler/InteractionHandler.mjs");
var _browserAuthErrorCodesMjs = require("../error/BrowserAuthErrorCodes.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class SilentAuthCodeClient extends (0, _standardInteractionClientMjs.StandardInteractionClient) {
    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, platformAuthProvider, correlationId){
        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, platformAuthProvider, correlationId);
        this.apiId = apiId;
    }
    /**
     * Acquires a token silently by redeeming an authorization code against the /token endpoint
     * @param request
     */ async acquireToken(request) {
        // Auth code payload is required
        if (!request.code) throw (0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.authCodeRequired));
        // Create silent request
        const silentRequest = await (0, _browser.invokeAsync)(this.initializeAuthorizationRequest.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(request, (0, _browserConstantsMjs.InteractionType).Silent);
        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
        try {
            // Create auth code request (PKCE not needed)
            const authCodeRequest = {
                ...silentRequest,
                code: request.code
            };
            // Initialize the client
            const clientConfig = await (0, _browser.invokeAsync)(this.getClientConfiguration.bind(this), (0, _browser.PerformanceEvents).StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, request.correlationId)({
                serverTelemetryManager,
                requestAuthority: silentRequest.authority,
                requestAzureCloudOptions: silentRequest.azureCloudOptions,
                requestExtraQueryParameters: silentRequest.extraQueryParameters,
                account: silentRequest.account
            });
            const authClient = new (0, _hybridSpaAuthorizationCodeClientMjs.HybridSpaAuthorizationCodeClient)(clientConfig);
            this.logger.verbose("Auth code client created");
            // Create silent handler
            const interactionHandler = new (0, _interactionHandlerMjs.InteractionHandler)(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);
            // Handle auth code parameters from request
            return await (0, _browser.invokeAsync)(interactionHandler.handleCodeResponseFromServer.bind(interactionHandler), (0, _browser.PerformanceEvents).HandleCodeResponseFromServer, this.logger, this.performanceClient, request.correlationId)({
                code: request.code,
                msgraph_host: request.msGraphHost,
                cloud_graph_host_name: request.cloudGraphHostName,
                cloud_instance_host_name: request.cloudInstanceHostName
            }, silentRequest, false);
        } catch (e) {
            if (e instanceof (0, _browser.AuthError)) {
                e.setCorrelationId(this.correlationId);
                serverTelemetryManager.cacheFailedRequest(e);
            }
            throw e;
        }
    }
    /**
     * Currently Unsupported
     */ logout() {
        // Synchronous so we must reject
        return Promise.reject((0, _browserAuthErrorMjs.createBrowserAuthError)((0, _browserAuthErrorCodesMjs.silentLogoutUnsupported)));
    }
}

},{"@azure/msal-common/browser":"aaatw","./StandardInteractionClient.mjs":"7vHoG","../error/BrowserAuthError.mjs":"dg1Z3","../utils/BrowserConstants.mjs":"kJowt","./HybridSpaAuthorizationCodeClient.mjs":"hu3ls","../interaction_handler/InteractionHandler.mjs":"60nk3","../error/BrowserAuthErrorCodes.mjs":"dwOM5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"hu3ls":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HybridSpaAuthorizationCodeClient", ()=>HybridSpaAuthorizationCodeClient);
var _browser = require("@azure/msal-common/browser");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class HybridSpaAuthorizationCodeClient extends (0, _browser.AuthorizationCodeClient) {
    constructor(config){
        super(config);
        this.includeRedirectUri = false;
    }
}

},{"@azure/msal-common/browser":"aaatw","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7uuPV":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "collectInstanceStats", ()=>collectInstanceStats);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function collectInstanceStats(currentClientId, performanceEvent, logger) {
    const frameInstances = // @ts-ignore
    window.msal?.clientIds || [];
    const msalInstanceCount = frameInstances.length;
    const sameClientIdInstanceCount = frameInstances.filter((i)=>i === currentClientId).length;
    if (sameClientIdInstanceCount > 1) logger.warning("There is already an instance of MSAL.js in the window with the same client id.");
    performanceEvent.add({
        msalInstanceCount: msalInstanceCount,
        sameClientIdInstanceCount: sameClientIdInstanceCount
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"afImM":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NestedAppAuthController", ()=>NestedAppAuthController);
var _browser = require("@azure/msal-common/browser");
var _browserConstantsMjs = require("../utils/BrowserConstants.mjs");
var _cryptoOpsMjs = require("../crypto/CryptoOps.mjs");
var _nestedAppAuthAdapterMjs = require("../naa/mapping/NestedAppAuthAdapter.mjs");
var _nestedAppAuthErrorMjs = require("../error/NestedAppAuthError.mjs");
var _eventHandlerMjs = require("../event/EventHandler.mjs");
var _eventTypeMjs = require("../event/EventType.mjs");
var _browserCacheManagerMjs = require("../cache/BrowserCacheManager.mjs");
var _accountManagerMjs = require("../cache/AccountManager.mjs");
var _browserCryptoMjs = require("../crypto/BrowserCrypto.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class NestedAppAuthController {
    constructor(operatingContext){
        this.operatingContext = operatingContext;
        const proxy = this.operatingContext.getBridgeProxy();
        if (proxy !== undefined) this.bridgeProxy = proxy;
        else throw new Error("unexpected: bridgeProxy is undefined");
        // Set the configuration.
        this.config = operatingContext.getConfig();
        // Initialize logger
        this.logger = this.operatingContext.getLogger();
        // Initialize performance client
        this.performanceClient = this.config.telemetry.client;
        // Initialize the crypto class.
        this.browserCrypto = operatingContext.isBrowserEnvironment() ? new (0, _cryptoOpsMjs.CryptoOps)(this.logger, this.performanceClient, true) : (0, _browser.DEFAULT_CRYPTO_IMPLEMENTATION);
        this.eventHandler = new (0, _eventHandlerMjs.EventHandler)(this.logger);
        // Initialize the browser storage class.
        this.browserStorage = this.operatingContext.isBrowserEnvironment() ? new (0, _browserCacheManagerMjs.BrowserCacheManager)(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger, this.performanceClient, this.eventHandler, (0, _browser.buildStaticAuthorityOptions)(this.config.auth)) : (0, _browserCacheManagerMjs.DEFAULT_BROWSER_CACHE_MANAGER)(this.config.auth.clientId, this.logger, this.performanceClient, this.eventHandler);
        this.nestedAppAuthAdapter = new (0, _nestedAppAuthAdapterMjs.NestedAppAuthAdapter)(this.config.auth.clientId, this.config.auth.clientCapabilities, this.browserCrypto, this.logger);
        // Set the active account if available
        const accountContext = this.bridgeProxy.getAccountContext();
        this.currentAccountContext = accountContext ? accountContext : null;
    }
    /**
     * Factory function to create a new instance of NestedAppAuthController
     * @param operatingContext
     * @returns Promise<IController>
     */ static async createController(operatingContext) {
        const controller = new NestedAppAuthController(operatingContext);
        return Promise.resolve(controller);
    }
    /**
     * Specific implementation of initialize function for NestedAppAuthController
     * @returns
     */ async initialize(request, // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isBroker) {
        const initCorrelationId = request?.correlationId || (0, _browserCryptoMjs.createNewGuid)();
        await this.browserStorage.initialize(initCorrelationId);
        return Promise.resolve();
    }
    /**
     * Validate the incoming request and add correlationId if not present
     * @param request
     * @returns
     */ ensureValidRequest(request) {
        if (request?.correlationId) return request;
        return {
            ...request,
            correlationId: this.browserCrypto.createNewGuid()
        };
    }
    /**
     * Internal implementation of acquireTokenInteractive flow
     * @param request
     * @returns
     */ async acquireTokenInteractive(request) {
        const validRequest = this.ensureValidRequest(request);
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_START, (0, _browserConstantsMjs.InteractionType).Popup, validRequest);
        const atPopupMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AcquireTokenPopup, validRequest.correlationId);
        atPopupMeasurement.add({
            nestedAppAuthRequest: true
        });
        try {
            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);
            const reqTimestamp = (0, _browser.TimeUtils).nowSeconds();
            const response = await this.bridgeProxy.getTokenInteractive(naaRequest);
            const result = {
                ...this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp)
            };
            // cache the tokens in the response
            try {
                // cache hydration can fail in JS Runtime scenario that doesn't support full crypto API
                await this.hydrateCache(result, request);
            } catch (error) {
                this.logger.warningPii(`Failed to hydrate cache. Error: ${error}`, validRequest.correlationId);
            }
            // cache the account context in memory after successful token fetch
            this.currentAccountContext = {
                homeAccountId: result.account.homeAccountId,
                environment: result.account.environment,
                tenantId: result.account.tenantId
            };
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_SUCCESS, (0, _browserConstantsMjs.InteractionType).Popup, result);
            atPopupMeasurement.add({
                accessTokenSize: result.accessToken.length,
                idTokenSize: result.idToken.length
            });
            atPopupMeasurement.end({
                success: true,
                requestId: result.requestId
            }, undefined, result.account);
            return result;
        } catch (e) {
            const error = e instanceof (0, _browser.AuthError) ? e : this.nestedAppAuthAdapter.fromBridgeError(e);
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_FAILURE, (0, _browserConstantsMjs.InteractionType).Popup, null, e);
            atPopupMeasurement.end({
                success: false
            }, e, request.account);
            throw error;
        }
    }
    /**
     * Internal implementation of acquireTokenSilent flow
     * @param request
     * @returns
     */ async acquireTokenSilentInternal(request) {
        const validRequest = this.ensureValidRequest(request);
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_START, (0, _browserConstantsMjs.InteractionType).Silent, validRequest);
        // Look for tokens in the cache first
        const result = await this.acquireTokenFromCache(validRequest);
        if (result) {
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_SUCCESS, (0, _browserConstantsMjs.InteractionType).Silent, result);
            return result;
        }
        // proceed with acquiring tokens via the host
        const ssoSilentMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).SsoSilent, validRequest.correlationId);
        ssoSilentMeasurement.increment({
            visibilityChangeCount: 0
        });
        ssoSilentMeasurement.add({
            nestedAppAuthRequest: true
        });
        try {
            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);
            naaRequest.forceRefresh = validRequest.forceRefresh;
            const reqTimestamp = (0, _browser.TimeUtils).nowSeconds();
            const response = await this.bridgeProxy.getTokenSilent(naaRequest);
            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);
            // cache the tokens in the response
            try {
                // cache hydration can fail in JS Runtime scenario that doesn't support full crypto API
                await this.hydrateCache(result, request);
            } catch (error) {
                this.logger.warningPii(`Failed to hydrate cache. Error: ${error}`, validRequest.correlationId);
            }
            // cache the account context in memory after successful token fetch
            this.currentAccountContext = {
                homeAccountId: result.account.homeAccountId,
                environment: result.account.environment,
                tenantId: result.account.tenantId
            };
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_SUCCESS, (0, _browserConstantsMjs.InteractionType).Silent, result);
            ssoSilentMeasurement?.add({
                accessTokenSize: result.accessToken.length,
                idTokenSize: result.idToken.length
            });
            ssoSilentMeasurement?.end({
                success: true,
                requestId: result.requestId
            }, undefined, result.account);
            return result;
        } catch (e) {
            const error = e instanceof (0, _browser.AuthError) ? e : this.nestedAppAuthAdapter.fromBridgeError(e);
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_FAILURE, (0, _browserConstantsMjs.InteractionType).Silent, null, e);
            ssoSilentMeasurement?.end({
                success: false
            }, e, request.account);
            throw error;
        }
    }
    /**
     * acquires tokens from cache
     * @param request
     * @returns
     */ async acquireTokenFromCache(request) {
        const atsMeasurement = this.performanceClient.startMeasurement((0, _browser.PerformanceEvents).AcquireTokenSilent, request.correlationId);
        atsMeasurement?.add({
            nestedAppAuthRequest: true
        });
        // if the request has claims, we cannot look up in the cache
        if (request.claims) {
            this.logger.verbose("Claims are present in the request, skipping cache lookup");
            return null;
        }
        // if the request has forceRefresh, we cannot look up in the cache
        if (request.forceRefresh) {
            this.logger.verbose("forceRefresh is set to true, skipping cache lookup");
            return null;
        }
        // respect cache lookup policy
        let result = null;
        if (!request.cacheLookupPolicy) request.cacheLookupPolicy = (0, _browserConstantsMjs.CacheLookupPolicy).Default;
        switch(request.cacheLookupPolicy){
            case (0, _browserConstantsMjs.CacheLookupPolicy).Default:
            case (0, _browserConstantsMjs.CacheLookupPolicy).AccessToken:
            case (0, _browserConstantsMjs.CacheLookupPolicy).AccessTokenAndRefreshToken:
                result = await this.acquireTokenFromCacheInternal(request);
                break;
            default:
                return null;
        }
        if (result) {
            this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_SUCCESS, (0, _browserConstantsMjs.InteractionType).Silent, result);
            atsMeasurement.add({
                accessTokenSize: result.accessToken.length,
                idTokenSize: result.idToken.length
            });
            atsMeasurement.end({
                success: true
            }, undefined, result.account);
            return result;
        }
        this.logger.warning("Cached tokens are not found for the account, proceeding with silent token request.");
        this.eventHandler.emitEvent((0, _eventTypeMjs.EventType).ACQUIRE_TOKEN_FAILURE, (0, _browserConstantsMjs.InteractionType).Silent, null);
        atsMeasurement.end({
            success: false
        }, undefined, request.account);
        return null;
    }
    /**
     *
     * @param request
     * @returns
     */ async acquireTokenFromCacheInternal(request) {
        // always prioritize the account context from the bridge
        const accountContext = this.bridgeProxy.getAccountContext() || this.currentAccountContext;
        let currentAccount = null;
        const correlationId = request.correlationId || this.browserCrypto.createNewGuid();
        if (accountContext) currentAccount = (0, _accountManagerMjs.getAccount)(accountContext, this.logger, this.browserStorage, correlationId);
        // fall back to brokering if no cached account is found
        if (!currentAccount) {
            this.logger.verbose("No active account found, falling back to the host");
            return Promise.resolve(null);
        }
        this.logger.verbose("active account found, attempting to acquire token silently");
        const authRequest = {
            ...request,
            correlationId: request.correlationId || this.browserCrypto.createNewGuid(),
            authority: request.authority || currentAccount.environment,
            scopes: request.scopes?.length ? request.scopes : [
                ...(0, _browser.OIDC_DEFAULT_SCOPES)
            ]
        };
        // fetch access token and check for expiry
        const tokenKeys = this.browserStorage.getTokenKeys();
        const cachedAccessToken = this.browserStorage.getAccessToken(currentAccount, authRequest, tokenKeys, currentAccount.tenantId);
        // If there is no access token, log it and return null
        if (!cachedAccessToken) {
            this.logger.verbose("No cached access token found");
            return Promise.resolve(null);
        } else if ((0, _browser.TimeUtils).wasClockTurnedBack(cachedAccessToken.cachedAt) || (0, _browser.TimeUtils).isTokenExpired(cachedAccessToken.expiresOn, this.config.system.tokenRenewalOffsetSeconds)) {
            this.logger.verbose("Cached access token has expired");
            return Promise.resolve(null);
        }
        const cachedIdToken = this.browserStorage.getIdToken(currentAccount, authRequest.correlationId, tokenKeys, currentAccount.tenantId, this.performanceClient);
        if (!cachedIdToken) {
            this.logger.verbose("No cached id token found");
            return Promise.resolve(null);
        }
        return this.nestedAppAuthAdapter.toAuthenticationResultFromCache(currentAccount, cachedIdToken, cachedAccessToken, authRequest, authRequest.correlationId);
    }
    /**
     * acquireTokenPopup flow implementation
     * @param request
     * @returns
     */ async acquireTokenPopup(request) {
        return this.acquireTokenInteractive(request);
    }
    /**
     * acquireTokenRedirect flow is not supported in nested app auth
     * @param request
     */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
    acquireTokenRedirect(request) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    /**
     * acquireTokenSilent flow implementation
     * @param silentRequest
     * @returns
     */ async acquireTokenSilent(silentRequest) {
        return this.acquireTokenSilentInternal(silentRequest);
    }
    /**
     * Hybrid flow is not currently supported in nested app auth
     * @param request
     */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
    acquireTokenByCode(request // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    /**
     * acquireTokenNative flow is not currently supported in nested app auth
     * @param request
     * @param apiId
     * @param accountId
     */ acquireTokenNative(request, apiId, accountId // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    /**
     * acquireTokenByRefreshToken flow is not currently supported in nested app auth
     * @param commonRequest
     * @param silentRequest
     */ acquireTokenByRefreshToken(commonRequest, silentRequest // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    /**
     * Adds event callbacks to array
     * @param callback
     * @param eventTypes
     */ addEventCallback(callback, eventTypes) {
        return this.eventHandler.addEventCallback(callback, eventTypes);
    }
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */ removeEventCallback(callbackId) {
        this.eventHandler.removeEventCallback(callbackId);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    addPerformanceCallback(callback) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    removePerformanceCallback(callbackId) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    enableAccountStorageEvents() {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    disableAccountStorageEvents() {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    // #region Account APIs
    /**
     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.
     * @param accountFilter - (Optional) filter to narrow down the accounts returned
     * @returns Array of AccountInfo objects in cache
     */ getAllAccounts(accountFilter) {
        const correlationId = this.browserCrypto.createNewGuid();
        return (0, _accountManagerMjs.getAllAccounts)(this.logger, this.browserStorage, this.isBrowserEnv(), correlationId, accountFilter);
    }
    /**
     * Returns the first account found in the cache that matches the account filter passed in.
     * @param accountFilter
     * @returns The first account found in the cache matching the provided filter or null if no account could be found.
     */ getAccount(accountFilter) {
        const correlationId = this.browserCrypto.createNewGuid();
        return (0, _accountManagerMjs.getAccount)(accountFilter, this.logger, this.browserStorage, correlationId);
    }
    /**
     * Returns the signed in account matching username.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found.
     * This API is provided for convenience but getAccountById should be used for best reliability
     * @param username
     * @returns The account object stored in MSAL
     */ getAccountByUsername(username) {
        const correlationId = this.browserCrypto.createNewGuid();
        return (0, _accountManagerMjs.getAccountByUsername)(username, this.logger, this.browserStorage, correlationId);
    }
    /**
     * Returns the signed in account matching homeAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param homeAccountId
     * @returns The account object stored in MSAL
     */ getAccountByHomeId(homeAccountId) {
        const correlationId = this.browserCrypto.createNewGuid();
        return (0, _accountManagerMjs.getAccountByHomeId)(homeAccountId, this.logger, this.browserStorage, correlationId);
    }
    /**
     * Returns the signed in account matching localAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param localAccountId
     * @returns The account object stored in MSAL
     */ getAccountByLocalId(localAccountId) {
        const correlationId = this.browserCrypto.createNewGuid();
        return (0, _accountManagerMjs.getAccountByLocalId)(localAccountId, this.logger, this.browserStorage, correlationId);
    }
    /**
     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
     * @param account
     */ setActiveAccount(account) {
        /*
         * StandardController uses this to allow the developer to set the active account
         * in the nested app auth scenario the active account is controlled by the app hosting the nested app
         */ const correlationId = this.browserCrypto.createNewGuid();
        return (0, _accountManagerMjs.setActiveAccount)(account, this.browserStorage, correlationId);
    }
    /**
     * Gets the currently active account
     */ getActiveAccount() {
        const correlationId = this.browserCrypto.createNewGuid();
        return (0, _accountManagerMjs.getActiveAccount)(this.browserStorage, correlationId);
    }
    // #endregion
    handleRedirectPromise(hash // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        return Promise.resolve(null);
    }
    loginPopup(request // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        return this.acquireTokenInteractive(request || (0, _browserConstantsMjs.DEFAULT_REQUEST));
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    loginRedirect(request) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    logout(logoutRequest) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    logoutRedirect(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    logoutPopup(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars
    ) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    ssoSilent(// eslint-disable-next-line @typescript-eslint/no-unused-vars
    request) {
        return this.acquireTokenSilentInternal(request);
    }
    getTokenCache() {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    /**
     * Returns the logger instance
     */ getLogger() {
        return this.logger;
    }
    /**
     * Replaces the default logger set in configurations with new Logger with new configurations
     * @param logger Logger instance
     */ setLogger(logger) {
        this.logger = logger;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    initializeWrapperLibrary(sku, version) {
        /*
         * Standard controller uses this to set the sku and version of the wrapper library in the storage
         * we do nothing here
         */ return;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setNavigationClient(navigationClient) {
        this.logger.warning("setNavigationClient is not supported in nested app auth");
    }
    getConfiguration() {
        return this.config;
    }
    isBrowserEnv() {
        return this.operatingContext.isBrowserEnvironment();
    }
    getBrowserCrypto() {
        return this.browserCrypto;
    }
    getPerformanceClient() {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    getRedirectResponse() {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async clearCache(logoutRequest) {
        throw (0, _nestedAppAuthErrorMjs.NestedAppAuthError).createUnsupportedError();
    }
    async hydrateCache(result, request) {
        this.logger.verbose("hydrateCache called");
        const accountEntity = (0, _browser.AccountEntity).createFromAccountInfo(result.account, result.cloudGraphHostName, result.msGraphHost);
        await this.browserStorage.setAccount(accountEntity, result.correlationId, (0, _browser.AuthToken).isKmsi(result.idTokenClaims));
        return this.browserStorage.hydrateCache(result, request);
    }
}

},{"@azure/msal-common/browser":"aaatw","../utils/BrowserConstants.mjs":"kJowt","../crypto/CryptoOps.mjs":"6UNxs","../naa/mapping/NestedAppAuthAdapter.mjs":"8oVGW","../error/NestedAppAuthError.mjs":"5b0Il","../event/EventHandler.mjs":"ked8H","../event/EventType.mjs":"aw4MU","../cache/BrowserCacheManager.mjs":"9EqDn","../cache/AccountManager.mjs":"6Nrot","../crypto/BrowserCrypto.mjs":"8sZR9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"8oVGW":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NestedAppAuthAdapter", ()=>NestedAppAuthAdapter);
var _browser = require("@azure/msal-common/browser");
var _bridgeErrorMjs = require("../BridgeError.mjs");
var _bridgeStatusCodeMjs = require("../BridgeStatusCode.mjs");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ class NestedAppAuthAdapter {
    constructor(clientId, clientCapabilities, crypto, logger){
        this.clientId = clientId;
        this.clientCapabilities = clientCapabilities;
        this.crypto = crypto;
        this.logger = logger;
    }
    toNaaTokenRequest(request) {
        let extraParams;
        if (request.extraQueryParameters === undefined) extraParams = new Map();
        else extraParams = new Map(Object.entries(request.extraQueryParameters));
        const correlationId = request.correlationId || this.crypto.createNewGuid();
        const claims = (0, _browser.RequestParameterBuilder).addClientCapabilitiesToClaims(request.claims, this.clientCapabilities);
        const scopes = request.scopes || (0, _browser.OIDC_DEFAULT_SCOPES);
        const tokenRequest = {
            platformBrokerId: request.account?.homeAccountId,
            clientId: this.clientId,
            authority: request.authority,
            scope: scopes.join(" "),
            correlationId,
            claims: !(0, _browser.StringUtils).isEmptyObj(claims) ? claims : undefined,
            state: request.state,
            authenticationScheme: request.authenticationScheme || (0, _browser.AuthenticationScheme).BEARER,
            extraParameters: extraParams
        };
        return tokenRequest;
    }
    fromNaaTokenResponse(request, response, reqTimestamp) {
        if (!response.token.id_token || !response.token.access_token) throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).nullOrEmptyToken);
        // Request timestamp and AuthResult expires_in are in seconds, converting to Date for AuthenticationResult
        const expiresOn = (0, _browser.TimeUtils).toDateFromSeconds(reqTimestamp + (response.token.expires_in || 0));
        const idTokenClaims = (0, _browser.AuthToken).extractTokenClaims(response.token.id_token, this.crypto.base64Decode);
        const account = this.fromNaaAccountInfo(response.account, response.token.id_token, idTokenClaims);
        const scopes = response.token.scope || request.scope;
        const authenticationResult = {
            authority: response.token.authority || account.environment,
            uniqueId: account.localAccountId,
            tenantId: account.tenantId,
            scopes: scopes.split(" "),
            account,
            idToken: response.token.id_token,
            idTokenClaims,
            accessToken: response.token.access_token,
            fromCache: false,
            expiresOn: expiresOn,
            tokenType: request.authenticationScheme || (0, _browser.AuthenticationScheme).BEARER,
            correlationId: request.correlationId,
            extExpiresOn: expiresOn,
            state: request.state
        };
        return authenticationResult;
    }
    /*
     *  export type AccountInfo = {
     *     homeAccountId: string;
     *     environment: string;
     *     tenantId: string;
     *     username: string;
     *     localAccountId: string;
     *     name?: string;
     *     idToken?: string;
     *     idTokenClaims?: TokenClaims & {
     *         [key: string]:
     *             | string
     *             | number
     *             | string[]
     *             | object
     *             | undefined
     *             | unknown;
     *     };
     *     nativeAccountId?: string;
     *     authorityType?: string;
     * };
     */ fromNaaAccountInfo(fromAccount, idToken, idTokenClaims) {
        const effectiveIdTokenClaims = idTokenClaims || fromAccount.idTokenClaims;
        const localAccountId = fromAccount.localAccountId || effectiveIdTokenClaims?.oid || effectiveIdTokenClaims?.sub || "";
        const tenantId = fromAccount.tenantId || effectiveIdTokenClaims?.tid || "";
        const homeAccountId = fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;
        const username = fromAccount.username || effectiveIdTokenClaims?.preferred_username || "";
        const name = fromAccount.name || effectiveIdTokenClaims?.name;
        const loginHint = fromAccount.loginHint || effectiveIdTokenClaims?.login_hint;
        const tenantProfiles = new Map();
        const tenantProfile = (0, _browser.buildTenantProfile)(homeAccountId, localAccountId, tenantId, effectiveIdTokenClaims);
        tenantProfiles.set(tenantId, tenantProfile);
        const account = {
            homeAccountId,
            environment: fromAccount.environment,
            tenantId,
            username,
            localAccountId,
            name,
            loginHint,
            idToken: idToken,
            idTokenClaims: effectiveIdTokenClaims,
            tenantProfiles
        };
        return account;
    }
    /**
     *
     * @param error BridgeError
     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError
     */ fromBridgeError(error) {
        if ((0, _bridgeErrorMjs.isBridgeError)(error)) switch(error.status){
            case (0, _bridgeStatusCodeMjs.BridgeStatusCode).UserCancel:
                return new (0, _browser.ClientAuthError)((0, _browser.ClientAuthErrorCodes).userCanceled);
            case (0, _bridgeStatusCodeMjs.BridgeStatusCode).NoNetwork:
                return new (0, _browser.ClientAuthError)((0, _browser.ClientAuthErrorCodes).noNetworkConnectivity);
            case (0, _bridgeStatusCodeMjs.BridgeStatusCode).AccountUnavailable:
                return new (0, _browser.ClientAuthError)((0, _browser.ClientAuthErrorCodes).noAccountFound);
            case (0, _bridgeStatusCodeMjs.BridgeStatusCode).Disabled:
                return new (0, _browser.ClientAuthError)((0, _browser.ClientAuthErrorCodes).nestedAppAuthBridgeDisabled);
            case (0, _bridgeStatusCodeMjs.BridgeStatusCode).NestedAppAuthUnavailable:
                return new (0, _browser.ClientAuthError)(error.code || (0, _browser.ClientAuthErrorCodes).nestedAppAuthBridgeDisabled, error.description);
            case (0, _bridgeStatusCodeMjs.BridgeStatusCode).TransientError:
            case (0, _bridgeStatusCodeMjs.BridgeStatusCode).PersistentError:
                return new (0, _browser.ServerError)(error.code, error.description);
            case (0, _bridgeStatusCodeMjs.BridgeStatusCode).UserInteractionRequired:
                return new (0, _browser.InteractionRequiredAuthError)(error.code, error.description);
            default:
                return new (0, _browser.AuthError)(error.code, error.description);
        }
        else return new (0, _browser.AuthError)("unknown_error", "An unknown error occurred");
    }
    /**
     * Returns an AuthenticationResult from the given cache items
     *
     * @param account
     * @param idToken
     * @param accessToken
     * @param reqTimestamp
     * @returns
     */ toAuthenticationResultFromCache(account, idToken, accessToken, request, correlationId) {
        if (!idToken || !accessToken) throw (0, _browser.createClientAuthError)((0, _browser.ClientAuthErrorCodes).nullOrEmptyToken);
        const idTokenClaims = (0, _browser.AuthToken).extractTokenClaims(idToken.secret, this.crypto.base64Decode);
        const scopes = accessToken.target || request.scopes.join(" ");
        const authenticationResult = {
            authority: accessToken.environment || account.environment,
            uniqueId: account.localAccountId,
            tenantId: account.tenantId,
            scopes: scopes.split(" "),
            account,
            idToken: idToken.secret,
            idTokenClaims: idTokenClaims || {},
            accessToken: accessToken.secret,
            fromCache: true,
            expiresOn: (0, _browser.TimeUtils).toDateFromSeconds(accessToken.expiresOn),
            extExpiresOn: (0, _browser.TimeUtils).toDateFromSeconds(accessToken.extendedExpiresOn),
            tokenType: request.authenticationScheme || (0, _browser.AuthenticationScheme).BEARER,
            correlationId,
            state: request.state
        };
        return authenticationResult;
    }
}

},{"@azure/msal-common/browser":"aaatw","../BridgeError.mjs":"8jfgq","../BridgeStatusCode.mjs":"dgYdV","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"8jfgq":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBridgeError", ()=>isBridgeError);
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function isBridgeError(error) {
    return error.status !== undefined;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"5b0Il":[function(require,module,exports,__globalThis) {
/*! @azure/msal-browser v4.26.0 2025-10-29 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NestedAppAuthError", ()=>NestedAppAuthError);
parcelHelpers.export(exports, "NestedAppAuthErrorMessage", ()=>NestedAppAuthErrorMessage);
var _browser = require("@azure/msal-common/browser");
'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.
 */ const NestedAppAuthErrorMessage = {
    unsupportedMethod: {
        code: "unsupported_method",
        desc: "This method is not supported in nested app environment."
    }
};
class NestedAppAuthError extends (0, _browser.AuthError) {
    constructor(errorCode, errorMessage){
        super(errorCode, errorMessage);
        Object.setPrototypeOf(this, NestedAppAuthError.prototype);
        this.name = "NestedAppAuthError";
    }
    static createUnsupportedError() {
        return new NestedAppAuthError(NestedAppAuthErrorMessage.unsupportedMethod.code, NestedAppAuthErrorMessage.unsupportedMethod.desc);
    }
}

},{"@azure/msal-common/browser":"aaatw","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"dfMvT":[function() {},{}],"aaxde":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _redom = require("redom");
var _authServiceJs = require("../../services/authService.js");
class LoginComponent {
    constructor(){
        this.user = null;
        this.onAuthStateChange = null; // Callback for auth state changes
        this.createElement();
        this.checkAuthState();
    }
    createElement = ()=>{
        this.loginBtn = (0, _redom.el)('button.primary', 'Sign in with Microsoft 365');
        this.logoutBtn = (0, _redom.el)('button.secondary', 'Sign out');
        this.userInfo = (0, _redom.el)('.user-info');
        this.el = (0, _redom.el)('.auth-container', this.userInfo, this.loginBtn, this.logoutBtn);
        // Initially hide logout button
        this.logoutBtn.style.display = 'none';
    };
    async checkAuthState() {
        try {
            const isAuthenticated = await (0, _authServiceJs.AuthService).isAuthenticated();
            if (isAuthenticated) {
                const userInfo = await (0, _authServiceJs.AuthService).getUserInfo();
                this.showLoggedInState(userInfo);
            } else this.showLoggedOutState();
        } catch (error) {
            console.error('Auth check failed:', error);
            this.showLoggedOutState();
        }
    }
    showLoggedInState(userInfo) {
        this.user = userInfo;
        this.userInfo.textContent = `Welcome, ${userInfo.name}`;
        this.userInfo.style.display = 'block';
        this.loginBtn.style.display = 'none';
        this.logoutBtn.style.display = 'inline-block';
        if (this.onAuthStateChange) this.onAuthStateChange({
            detail: {
                isAuthenticated: true
            }
        });
    }
    showLoggedOutState() {
        this.user = null;
        this.userInfo.style.display = 'none';
        this.loginBtn.style.display = 'inline-block';
        this.logoutBtn.style.display = 'none';
        if (this.onAuthStateChange) this.onAuthStateChange({
            detail: {
                isAuthenticated: false
            }
        });
    }
    onmount = ()=>{
        this.loginBtn.addEventListener('click', this.handleLogin);
        this.logoutBtn.addEventListener('click', this.handleLogout);
    };
    onunmount = ()=>{
        this.loginBtn.removeEventListener('click', this.handleLogin);
        this.logoutBtn.removeEventListener('click', this.handleLogout);
    };
    handleLogin = async ()=>{
        try {
            this.loginBtn.disabled = true;
            this.loginBtn.textContent = 'Signing in...';
            const account = await (0, _authServiceJs.AuthService).login();
            const userInfo = await (0, _authServiceJs.AuthService).getUserInfo();
            this.showLoggedInState(userInfo);
        } catch (error) {
            alert('Login failed: ' + error.message);
            this.showLoggedOutState();
        } finally{
            this.loginBtn.disabled = false;
            this.loginBtn.textContent = 'Sign in with Microsoft 365';
        }
    };
    handleLogout = async ()=>{
        try {
            await (0, _authServiceJs.AuthService).logout();
            this.showLoggedOutState();
        } catch (error) {
            console.error('Logout failed:', error);
            // Still show logged out state even if logout fails
            this.showLoggedOutState();
        }
    };
    getCurrentUser() {
        return this.user;
    }
}
exports.default = LoginComponent;

},{"redom":"9CzRX","../../services/authService.js":"3PAGw","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}]},["6DHTQ","6kb64"], "6kb64", "parcelRequire24fe", {})

//# sourceMappingURL=app.6528c13b.js.map
